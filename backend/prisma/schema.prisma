generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model AcademicTitle {
  id    Int    @id @default(autoincrement())
  name  String

  users User[]
}

/// เก็บคำตอบรายข้อที่ผู้เรียนตอบ
model AnswerSubmission {
    id             Int      @id @default(autoincrement())
    userId         Int      @map("user_id")
    questionSetId  Int      @map("question_set_id")
    questionBankId Int      @map("question_bank_id")
    /// เก็บคำตอบ choice
    selectedChoice Json?    @map("selected_choice")
    /// เก็บคำตอบ fill in blank
    filledText     String?  @map("filled_text")
    /// upload
    fileUrl        String?  @map("file_url")
    /// ตอบถูกหรือผิด
    isCorrect      Boolean  @map("is_correct")
    submittedAt    DateTime @map("submitted_at")

    user User @relation("AnswerSubmissionUserId", fields: [userId], references: [id])

    questionSet QuestionSet @relation("AnswerSubmissionQuestionSetId", fields: [questionSetId], references: [id])

    questionBank QuestionBank @relation("AnswerSubmissionQuestionBankId", fields: [questionBankId], references: [id])
}


model Category {
    id          Int       @id @default(autoincrement())
    name        String
    isActive    Boolean   @default(true) @map("is_active")

    createdBy   Int       @map("created_by")
    updatedBy   Int?      @map("updated_by")
    deletedBy   Int?      @map("deleted_by")

    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime? @map("updated_at")
    deletedAt   DateTime? @map("deleted_at")

    // Relations to User
    createdByUser User   @relation("CatCreatedByUser", fields: [createdBy], references: [id])
    updatedByUser User?  @relation("CatUpdatedByUser", fields: [updatedBy], references: [id])
    deletedByUser User?  @relation("CatDeletedByUser", fields: [deletedBy], references: [id])

    categories Course[]
}

model Course {
    id          Int     @id @default(autoincrement())
    categoryId  Int     @map("category_id")
    name        String
    description String  @db.Text
    imageUrl    String  @map("image_url")
    /// ค่าใช้จ่าย
    fee         Int
    isActive    Boolean @default(true) @map("is_active")

    createdBy Int  @map("created_by")
    updatedBy Int? @map("updated_by")
    deletedBy Int? @map("deleted_by")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    category Category @relation(fields: [categoryId], references: [id])

    createdByUser User  @relation("CourseCreatedByUser", fields: [createdBy], references: [id])
    updatedByUser User? @relation("CourseUpdatedByUser", fields: [updatedBy], references: [id])
    deletedByUser User? @relation("CourseDeletedByUser", fields: [deletedBy], references: [id])

    courseInstructorCourseId CourseInstructor[] @relation("CourseId")

    courseCompletionCourseId CourseCompletion[] @relation("CourseId")

    lessonCourseId Lesson[] @relation("CourseId")

    questionSetCourseId QuestionSet[] @relation("QuestionSetCourseId")
}


// การเรียนจบรายวิชา
model CourseCompletion {
    id             Int      @id @default(autoincrement())
    courseId       Int      @map("course_id")
    userId         Int      @map("user_id")
    completedAt    DateTime @map("completed_at")
    finalScore     Int      @map("final_score")
    isCertified    Boolean  @default(false) @map("is_certified")
    certificateUrl String   @map("certificate_url")

    course Course @relation("CourseId", fields: [courseId], references: [id])
    user User? @relation("UserId", fields: [userId], references: [id])
}


// การลงทะเบียนเรียน
model CourseEnrollment {
    id          Int         @id @default(autoincrement())
    courseId    Int         @map("course_id")
    userId      Int         @map("user_id")
    enrolledAt  DateTime    @map("enrolled_at")
}

enum Role {
  OWNER    @map("owner")
  CO_OWNER @map("co-owner")
}

model CourseInstructor {
  id       Int     @id @default(autoincrement())
  courseId Int     @map("course_id")
  userId   Int?    @map("user_id")
  fullName String? @map("full_name")
  role     Role
  isActive Boolean @default(true) @map("is_active")

  updatedBy Int? @map("updated_by")
  deletedBy Int? @map("deleted_by")

  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  course Course @relation("CourseId", fields: [courseId], references: [id])
  user User? @relation("UserId", fields: [userId], references: [id])

  updatedByUser User? @relation("CourseInstructorUpdatedByUser", fields: [updatedBy], references: [id])
  deletedByUser User? @relation("CourseInstructorDeletedByUser", fields: [deletedBy], references: [id])

  courseInstructor Lesson[] @relation("CourseInstructorId")
}


model Department {
  id              Int          @id @default(autoincrement())
  organizationId  Int          @map("organization_id")
  name            String
  isActive        Boolean      @default(true) @map("is_active")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime?    @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  
  users        User[]
}

/// บทเรียน
model Lesson {
    id                 Int     @id @default(autoincrement())
    lessonTypeId       Int     @map("lesson_type_id")
    courseId           Int     @map("course_id")
    courseInstructorId Int     @map("course_instructor_id")
    name               String
    description        String?
    imageUrl           String? @map("image_url")
    sortOrder          Int     @map("sort_order")
    /// บทเรียนย่อย อ้างอิง lessonId
    parentId           Int?    @map("parent_id")

    isActive Boolean @default(true) @map("is_active")

    createdBy Int  @map("created_by")
    updatedBy Int? @map("updated_by")
    deletedBy Int? @map("deleted_by")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Self-reference
    parent   Lesson?  @relation("LessonToParent", fields: [parentId], references: [id])
    children Lesson[] @relation("LessonToParent")

    // Relations
    lessonType       LessonType       @relation("LessonTypeId", fields: [lessonTypeId], references: [id])
    course           Course           @relation("CourseId", fields: [courseId], references: [id])
    courseInstructor CourseInstructor @relation("CourseInstructorId", fields: [courseInstructorId], references: [id])

    createdByUser User  @relation("LessonCreatedByUser", fields: [createdBy], references: [id])
    updatedByUser User? @relation("LessonUpdatedByUser", fields: [updatedBy], references: [id])
    deletedByUser User? @relation("LessonDeletedByUser", fields: [deletedBy], references: [id])

    // Reverse relations
    lessonContent LessonContent[] @relation("LessonTypeId")

    lessonViewLessonId LessonView[] @relation("LessonViewLessonId")

    lessonAttemptLessonId LessonAttempt[] @relation("LessonAttemptLessonId")

    lessonPrerequisiteLessonId         LessonPrerequisite[] @relation("LessonPrerequisiteLessonId")
    lessonPrerequisiteRequiredLessonId LessonPrerequisite[] @relation("LessonPrerequisiteRequiredLessonId")

    questionSetLessonId QuestionSet[] @relation("QuestionSetLessonId")
}


/// การเรียนซ้ำ
model LessonAttempt {
    id          Int       @id @default(autoincrement())
    userId      Int       @map("user_id")
    lessonId    Int       @map("lesson_id")
    /// จำนวนรอบที่เรียน
    attemptNo   Int       @map("attempt_no")
    completedAt DateTime? @map("completed_at")
    createdAt   DateTime  @map("created_at")

    // Relations
    users   User   @relation("LessonAttemptUserId", fields: [userId], references: [id])
    lessons Lesson @relation("LessonAttemptLessonId", fields: [lessonId], references: [id])
}


/// เนื้อหาในบทเรียน
model LessonContent {
    id            Int     @id @default(autoincrement())
    lessonId      Int     @map("lesson_id")
    contentTypeId Int     @map("content_type_id")
    contentUrl    String? @map("content_url")
    /// เวลาวิดีโอ (วินาที)
    duration      Int?
    /// จำนวนหน้า
    pages         Int?
    sortOrder     Int     @map("sort_order")
    isActive      Boolean @default(true) @map("is_active")

    updatedBy Int? @map("updated_by")
    deletedBy Int? @map("deleted_by")

    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    lesson            Lesson            @relation("LessonTypeId", fields: [lessonId], references: [id])
    lessonContentType LessonContentType @relation("ContentTypeId", fields: [contentTypeId], references: [id])

    updatedByUser User? @relation("LessonContentUpdatedByUser", fields: [updatedBy], references: [id])
    deletedByUser User? @relation("LessonContentDeletedByUser", fields: [deletedBy], references: [id])
}


/// ประเภทเนื้อหา
// data: video, pdf, quiz, embed, interactive, scorm
model LessonContentType {
    id Int @id @default(autoincrement())
    name String

    // Reverse relations
    lessonContent LessonContent[] @relation("ContentTypeId")
}

/// รองรับการล็อกบทเรียนก่อนเรียน
model LessonPrerequisite {
    id               Int @id @default(autoincrement())
    /// บทเรียนหลักที่ต้องการกำหนดเงื่อนไข
    lessonId         Int @map("lesson_id")
    /// บทเรียนที่ต้องเรียนจบก่อน
    requiredLessonId Int @map("required_lesson_id")

    // Relations
    lessons        Lesson @relation("LessonPrerequisiteLessonId", fields: [lessonId], references: [id])
    requiredLesson Lesson @relation("LessonPrerequisiteRequiredLessonId", fields: [requiredLessonId], references: [id])
}


/// ประเภทบทเรียน
// data: Main Lesson, Supplementary Lesson
model LessonType {
    id   Int    @id @default(autoincrement())
    name String

    // Reverse relations
    lessonTypeId Lesson[] @relation("LessonTypeId")
}


/// ติดตามการเรียน
model LessonView {
    id          Int       @id @default(autoincrement())
    userId      Int       @map("user_id")
    lessonId    Int       @map("lesson_id")
    completed   Boolean   @default(false)
    /// เวลาดูวิดิโอ
    watchedTime Int       @map("watched_time")
    /// จำนวนหน้าที่อ่าน
    readPages   Int       @map("read_pages")
    /// วันที่เรียนสำเร็จ
    completedAt DateTime? @map("completed_at")
    createdAt   DateTime  @map("created_at")

    // Relations
    users   User   @relation("LessonViewUserId", fields: [userId], references: [id])
    lessons Lesson @relation("LessonViewLessonId", fields: [lessonId], references: [id])
}




model Organization {
  id          Int       @id @default(autoincrement())
  name        String
  isActive    Boolean   @default(true) @map("is_active")

  createdBy   Int       @map("created_by")
  updatedBy   Int?      @map("updated_by")
  deletedBy   Int?      @map("deleted_by")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations to User
  createdByUser User   @relation("OrgCreatedByUser", fields: [createdBy], references: [id])
  updatedByUser User?  @relation("OrgUpdatedByUser", fields: [updatedBy], references: [id])
  deletedByUser User?  @relation("OrgDeletedByUser", fields: [deletedBy], references: [id])

  departments  Department[]
}

/// คลังข้อสอบ

enum CreationMethod {
    UPLOAD @map("upload")
    MANUAL @map("manual")
}

model QuestionBank {
    id              Int            @id @default(autoincrement())
    questionTypeId  Int            @map("question_type_id")
    questionLevelId Int            @map("question_level_id")
    questionSetId   Int            @map("question_set_id")
    questionText    String         @map("question_text")
    score           Int
    imageUrl        String?        @map("image_url")
    /// ตัวเลือกและคำตอบที่ถูกต้อง
    answerData      Json           @map("answer_data")
    /// คำอธิบายเฉลย
    explanation     String?
    versioning      String?
    creationMethod  CreationMethod @map("creation_method")
    sortOrder       Int            @map("sort_order")
    /// ใช้สุ่มหรือไม่
    randomize       Boolean        @default(false)
    isActive        Boolean        @default(true) @map("is_active")

    createdBy Int  @map("created_by")
    updatedBy Int? @map("updated_by")
    deletedBy Int? @map("deleted_by")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    questionType QuestionType @relation("QuestionBankQuestionTypeId", fields: [questionTypeId], references: [id])

    questionLevel QuestionLevel @relation("QuestionBankQuestionLevelId", fields: [questionLevelId], references: [id])

    questionSet QuestionSet @relation("QuestionBankQuestionSetId", fields: [questionSetId], references: [id])

    createdByUser User  @relation("QuestionBankCreatedByUser", fields: [createdBy], references: [id])
    updatedByUser User? @relation("QuestionBankUpdatedByUser", fields: [updatedBy], references: [id])
    deletedByUser User? @relation("QuestionBankDeletedByUser", fields: [deletedBy], references: [id])

    answerSubmission AnswerSubmission[] @relation("AnswerSubmissionQuestionBankId")
}


/// ระดับข้อสอบ
// data: easy, medium, hard
model QuestionLevel {
    id       Int     @id @default(autoincrement())
    name     String
    isActive Boolean @default(true) @map("is_active")

    questionBank QuestionBank[] @relation("QuestionBankQuestionLevelId")
}


/// ชุดข้อสอบ
model QuestionSet {
    id           Int     @id @default(autoincrement())
    courseId     Int     @map("course_id")
    lessonId     Int     @map("lesson_id")
    testTypeId   Int     @map("test_type_id")
    name         String
    description  String?
    /// คะแนนที่ผ่าน
    passScore    Int     @map("pass_score")
    /// จำนวนครั้งที่ทำได้
    attemptLimit Int     @map("attempt_limit")
    isActive     Boolean @default(true) @map("is_active")

    createdBy Int  @map("created_by")
    updatedBy Int? @map("updated_by")
    deletedBy Int? @map("deleted_by")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    course Course @relation("QuestionSetCourseId", fields: [courseId], references: [id])

    lesson Lesson @relation("QuestionSetLessonId", fields: [lessonId], references: [id])

    testType TestType @relation("QuestionSetTestTypeId", fields: [testTypeId], references: [id])

    createdByUser User  @relation("QuestionSetCreatedByUser", fields: [createdBy], references: [id])
    updatedByUser User? @relation("QuestionSetUpdatedByUser", fields: [updatedBy], references: [id])
    deletedByUser User? @relation("QuestionSetDeletedByUser", fields: [deletedBy], references: [id])

    questionBank QuestionBank[] @relation("QuestionBankQuestionSetId")

    scoreCriteria ScoreCriteria[] @relation("ScoreCriteriaQuestionSetId")

    testResult TestResult[] @relation("TestResultQuestionSetId")

    answerSubmission AnswerSubmission[] @relation("AnswerSubmissionQuestionSetId")
}


/// ประเภทคลังข้อสอบ
// data: choice, fill_in_blank, upload_file
model QuestionType {
    id       Int     @id @default(autoincrement())
    name     String
    isActive Boolean @default(true) @map("is_active")

    questionBank QuestionBank[] @relation("QuestionBankQuestionTypeId")
}


/// ระดับผลสอบที่ได้
// data: low, medium, hard
model ResultLevel {
    id       Int     @id @default(autoincrement())
    name     String
    isActive Boolean @default(true) @map("is_active")

    scoreCriteria ScoreCriteria[] @relation("ScoreCriteriaResultLevelId")

    testResult TestResult[] @relation("TestResultResultLevelId")
}


/// เกณฑ์การแปลผลคะแนน

model ScoreCriteria {
    id            Int       @id @default(autoincrement())
    questionSetId Int       @map("question_set_id")
    resultLevelId Int       @map("result_level_id")
    minScore      Int       @map("min_score")
    maxScore      Int       @map("max_score")
    description   String?
    updatedAt     DateTime?

    questionSet QuestionSet @relation("ScoreCriteriaQuestionSetId", fields: [questionSetId], references: [id])

    resultLevel ResultLevel @relation("ScoreCriteriaResultLevelId", fields: [resultLevelId], references: [id])
}


/// เก็บผลสอบรวม
model TestResult {
    id Int @id @default(autoincrement())
    userId Int @map("user_id")
    questionSetId Int @map("question_set_id")
    resultLevelId Int @map("result_level_id")
    /// คะแนนดิบ
    rawScore Int @map("raw_score")
    /// คะแนนปกติ
    normalizedScore Int @map("normalized_score")
    /// ครั้งที่สอบ
    attemptNo Int @map("attempt_no")
    /// เวลาที่สอบเสร็จ
    completedAt DateTime? @map("completed_at")

    user User @relation("TestResultUserId", fields: [userId], references: [id])

    questionSet QuestionSet @relation("TestResultQuestionSetId", fields: [questionSetId], references: [id])

    resultLevel ResultLevel @relation("TestResultResultLevelId", fields: [resultLevelId], references: [id])
}

/// ประเภทแบบทดสอบ
// data: foundation, pre, post, test
model TestType {
    id       Int     @id @default(autoincrement())
    name     String
    isActive Boolean @default(true) @map("is_active")

    questionSet QuestionSet[] @relation("QuestionSetTestTypeId")
}


model Title {
    id      Int       @id @default(autoincrement())
    name    String

    users User[]
}

model User {
  id Int @id @default(autoincrement())

  userRoleId      Int     @map("user_role_id")
  titleId         Int?     @map("title_id")
  academicTitleId Int?    @map("academic_title_id")
  firstName       String  @map("first_name")
  lastName        String  @map("last_name")
  email           String
  password        String
  departmentId    Int?     @map("department_id")
  isActive        Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  userRole      UserRole       @relation(fields: [userRoleId], references: [id])
  title         Title?          @relation(fields: [titleId], references: [id])
  academicTitle AcademicTitle? @relation(fields: [academicTitleId], references: [id])
  department    Department?     @relation(fields: [departmentId], references: [id])

  // Reverse relations
  organizationsCreated Organization[] @relation("OrgCreatedByUser")
  organizationsUpdated Organization[] @relation("OrgUpdatedByUser")
  organizationsDeleted Organization[] @relation("OrgDeletedByUser")

  categoryCreated Category[] @relation("CatCreatedByUser")
  categoryUpdated Category[] @relation("CatUpdatedByUser")
  categoryDeleted Category[] @relation("CatDeletedByUser")

  courseCreated Course[] @relation("CourseCreatedByUser")
  courseUpdated Course[] @relation("CourseUpdatedByUser")
  courseDeleted Course[] @relation("CourseDeletedByUser")

  courseInstructorUpdated CourseInstructor[] @relation("CourseInstructorUpdatedByUser")
  courseInstructorDeleted CourseInstructor[] @relation("CourseInstructorDeletedByUser")

  courseInstructorUserId CourseInstructor[] @relation("UserId")

  courseCompletionUserId CourseCompletion[] @relation("UserId")

  lessonCreated Lesson[] @relation("LessonCreatedByUser")
  lessonUpdated Lesson[] @relation("LessonUpdatedByUser")
  lessonDeleted Lesson[] @relation("LessonDeletedByUser")

  lessonContentUpdated LessonContent[] @relation("LessonContentUpdatedByUser")
  lessonContentDeleted LessonContent[] @relation("LessonContentDeletedByUser")

  lessonViewUserId LessonView[] @relation("LessonViewUserId")

  lessonAttemptUserId LessonAttempt[] @relation("LessonAttemptUserId")

  questionSetCreated QuestionSet[] @relation("QuestionSetCreatedByUser")
  questionSetUpdated QuestionSet[] @relation("QuestionSetUpdatedByUser")
  questionSetDeleted QuestionSet[] @relation("QuestionSetDeletedByUser")

  questionBankCreated QuestionBank[] @relation("QuestionBankCreatedByUser")
  questionBankUpdated QuestionBank[] @relation("QuestionBankUpdatedByUser")
  questionBankDeleted QuestionBank[] @relation("QuestionBankDeletedByUser")

  testResultUser TestResult[] @relation("TestResultUserId")

  answerSubmissionUser AnswerSubmission[] @relation("AnswerSubmissionUserId")
}


model UserRole {
    id      Int       @id @default(autoincrement())
    name    String

    users User[]
}