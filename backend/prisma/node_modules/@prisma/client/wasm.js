
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AcademicTitleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.AnswerSubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  questionBankId: 'questionBankId',
  selectedChoice: 'selectedChoice',
  filledText: 'filledText',
  fileUrl: 'fileUrl',
  isCorrect: 'isCorrect',
  submittedAt: 'submittedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CourseCompletionScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  userId: 'userId',
  completedAt: 'completedAt',
  finalScore: 'finalScore',
  isCertified: 'isCertified',
  certificateUrl: 'certificateUrl'
};

exports.Prisma.CourseEnrollmentScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  userId: 'userId',
  enrolledAt: 'enrolledAt'
};

exports.Prisma.CourseInstructorScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  userId: 'userId',
  fullName: 'fullName',
  role: 'role',
  isActive: 'isActive',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  fee: 'fee',
  isActive: 'isActive',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LessonAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  attemptNo: 'attemptNo',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.LessonContentTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.LessonContentScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  contentTypeId: 'contentTypeId',
  contentUrl: 'contentUrl',
  duration: 'duration',
  pages: 'pages',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LessonPrerequisiteScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  requiredLessonId: 'requiredLessonId'
};

exports.Prisma.LessonTypeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.LessonViewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  completed: 'completed',
  watchedTime: 'watchedTime',
  readPages: 'readPages',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  lessonTypeId: 'lessonTypeId',
  courseId: 'courseId',
  courseInstructorId: 'courseInstructorId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  sortOrder: 'sortOrder',
  parentId: 'parentId',
  isActive: 'isActive',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QuestionBankScalarFieldEnum = {
  id: 'id',
  questionTypeId: 'questionTypeId',
  questionLevelId: 'questionLevelId',
  questionSetId: 'questionSetId',
  questionText: 'questionText',
  score: 'score',
  imageUrl: 'imageUrl',
  answerData: 'answerData',
  explanation: 'explanation',
  versioning: 'versioning',
  creationMethod: 'creationMethod',
  sortOrder: 'sortOrder',
  randomize: 'randomize',
  isActive: 'isActive',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QuestionLevelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive'
};

exports.Prisma.QuestionSetScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  lessonId: 'lessonId',
  testTypeId: 'testTypeId',
  name: 'name',
  description: 'description',
  passScore: 'passScore',
  attemptLimit: 'attemptLimit',
  isActive: 'isActive',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QuestionTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive'
};

exports.Prisma.ResultLevelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive'
};

exports.Prisma.ScoreCriteriaScalarFieldEnum = {
  id: 'id',
  questionSetId: 'questionSetId',
  resultLevelId: 'resultLevelId',
  minScore: 'minScore',
  maxScore: 'maxScore',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestResultScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  resultLevelId: 'resultLevelId',
  rawScore: 'rawScore',
  normalizedScore: 'normalizedScore',
  attemptNo: 'attemptNo',
  completedAt: 'completedAt'
};

exports.Prisma.TestTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive'
};

exports.Prisma.TitleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userRoleId: 'userRoleId',
  titleId: 'titleId',
  academicTitleId: 'academicTitleId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  departmentId: 'departmentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  CO_OWNER: 'CO_OWNER'
};

exports.CreationMethod = exports.$Enums.CreationMethod = {
  UPLOAD: 'UPLOAD',
  MANUAL: 'MANUAL'
};

exports.Prisma.ModelName = {
  AcademicTitle: 'AcademicTitle',
  AnswerSubmission: 'AnswerSubmission',
  Category: 'Category',
  CourseCompletion: 'CourseCompletion',
  CourseEnrollment: 'CourseEnrollment',
  CourseInstructor: 'CourseInstructor',
  Course: 'Course',
  Department: 'Department',
  LessonAttempt: 'LessonAttempt',
  LessonContentType: 'LessonContentType',
  LessonContent: 'LessonContent',
  LessonPrerequisite: 'LessonPrerequisite',
  LessonType: 'LessonType',
  LessonView: 'LessonView',
  Lesson: 'Lesson',
  Organization: 'Organization',
  QuestionBank: 'QuestionBank',
  QuestionLevel: 'QuestionLevel',
  QuestionSet: 'QuestionSet',
  QuestionType: 'QuestionType',
  ResultLevel: 'ResultLevel',
  ScoreCriteria: 'ScoreCriteria',
  TestResult: 'TestResult',
  TestType: 'TestType',
  Title: 'Title',
  UserRole: 'UserRole',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
