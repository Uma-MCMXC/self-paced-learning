
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AcademicTitle
 * 
 */
export type AcademicTitle = $Result.DefaultSelection<Prisma.$AcademicTitlePayload>
/**
 * Model AnswerSubmission
 * เก็บคำตอบรายข้อที่ผู้เรียนตอบ
 */
export type AnswerSubmission = $Result.DefaultSelection<Prisma.$AnswerSubmissionPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model CourseCompletion
 * 
 */
export type CourseCompletion = $Result.DefaultSelection<Prisma.$CourseCompletionPayload>
/**
 * Model CourseEnrollment
 * 
 */
export type CourseEnrollment = $Result.DefaultSelection<Prisma.$CourseEnrollmentPayload>
/**
 * Model CourseInstructor
 * 
 */
export type CourseInstructor = $Result.DefaultSelection<Prisma.$CourseInstructorPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model LessonAttempt
 * การเรียนซ้ำ
 */
export type LessonAttempt = $Result.DefaultSelection<Prisma.$LessonAttemptPayload>
/**
 * Model LessonContentType
 * ประเภทเนื้อหา
 */
export type LessonContentType = $Result.DefaultSelection<Prisma.$LessonContentTypePayload>
/**
 * Model LessonContent
 * เนื้อหาในบทเรียน
 */
export type LessonContent = $Result.DefaultSelection<Prisma.$LessonContentPayload>
/**
 * Model LessonPrerequisite
 * รองรับการล็อกบทเรียนก่อนเรียน
 */
export type LessonPrerequisite = $Result.DefaultSelection<Prisma.$LessonPrerequisitePayload>
/**
 * Model LessonType
 * ประเภทบทเรียน
 */
export type LessonType = $Result.DefaultSelection<Prisma.$LessonTypePayload>
/**
 * Model LessonView
 * ติดตามการเรียน
 */
export type LessonView = $Result.DefaultSelection<Prisma.$LessonViewPayload>
/**
 * Model Lesson
 * บทเรียน
 */
export type Lesson = $Result.DefaultSelection<Prisma.$LessonPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model QuestionBank
 * 
 */
export type QuestionBank = $Result.DefaultSelection<Prisma.$QuestionBankPayload>
/**
 * Model QuestionLevel
 * ระดับข้อสอบ
 */
export type QuestionLevel = $Result.DefaultSelection<Prisma.$QuestionLevelPayload>
/**
 * Model QuestionSet
 * ชุดข้อสอบ
 */
export type QuestionSet = $Result.DefaultSelection<Prisma.$QuestionSetPayload>
/**
 * Model QuestionType
 * ประเภทคลังข้อสอบ
 */
export type QuestionType = $Result.DefaultSelection<Prisma.$QuestionTypePayload>
/**
 * Model ResultLevel
 * ระดับผลสอบที่ได้
 */
export type ResultLevel = $Result.DefaultSelection<Prisma.$ResultLevelPayload>
/**
 * Model ScoreCriteria
 * 
 */
export type ScoreCriteria = $Result.DefaultSelection<Prisma.$ScoreCriteriaPayload>
/**
 * Model TestResult
 * เก็บผลสอบรวม
 */
export type TestResult = $Result.DefaultSelection<Prisma.$TestResultPayload>
/**
 * Model TestType
 * ประเภทแบบทดสอบ
 */
export type TestType = $Result.DefaultSelection<Prisma.$TestTypePayload>
/**
 * Model Title
 * 
 */
export type Title = $Result.DefaultSelection<Prisma.$TitlePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  OWNER: 'OWNER',
  CO_OWNER: 'CO_OWNER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const CreationMethod: {
  UPLOAD: 'UPLOAD',
  MANUAL: 'MANUAL'
};

export type CreationMethod = (typeof CreationMethod)[keyof typeof CreationMethod]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type CreationMethod = $Enums.CreationMethod

export const CreationMethod: typeof $Enums.CreationMethod

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AcademicTitles
 * const academicTitles = await prisma.academicTitle.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AcademicTitles
   * const academicTitles = await prisma.academicTitle.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.academicTitle`: Exposes CRUD operations for the **AcademicTitle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicTitles
    * const academicTitles = await prisma.academicTitle.findMany()
    * ```
    */
  get academicTitle(): Prisma.AcademicTitleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.answerSubmission`: Exposes CRUD operations for the **AnswerSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnswerSubmissions
    * const answerSubmissions = await prisma.answerSubmission.findMany()
    * ```
    */
  get answerSubmission(): Prisma.AnswerSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseCompletion`: Exposes CRUD operations for the **CourseCompletion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseCompletions
    * const courseCompletions = await prisma.courseCompletion.findMany()
    * ```
    */
  get courseCompletion(): Prisma.CourseCompletionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseEnrollment`: Exposes CRUD operations for the **CourseEnrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseEnrollments
    * const courseEnrollments = await prisma.courseEnrollment.findMany()
    * ```
    */
  get courseEnrollment(): Prisma.CourseEnrollmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseInstructor`: Exposes CRUD operations for the **CourseInstructor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseInstructors
    * const courseInstructors = await prisma.courseInstructor.findMany()
    * ```
    */
  get courseInstructor(): Prisma.CourseInstructorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessonAttempt`: Exposes CRUD operations for the **LessonAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LessonAttempts
    * const lessonAttempts = await prisma.lessonAttempt.findMany()
    * ```
    */
  get lessonAttempt(): Prisma.LessonAttemptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessonContentType`: Exposes CRUD operations for the **LessonContentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LessonContentTypes
    * const lessonContentTypes = await prisma.lessonContentType.findMany()
    * ```
    */
  get lessonContentType(): Prisma.LessonContentTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessonContent`: Exposes CRUD operations for the **LessonContent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LessonContents
    * const lessonContents = await prisma.lessonContent.findMany()
    * ```
    */
  get lessonContent(): Prisma.LessonContentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessonPrerequisite`: Exposes CRUD operations for the **LessonPrerequisite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LessonPrerequisites
    * const lessonPrerequisites = await prisma.lessonPrerequisite.findMany()
    * ```
    */
  get lessonPrerequisite(): Prisma.LessonPrerequisiteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessonType`: Exposes CRUD operations for the **LessonType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LessonTypes
    * const lessonTypes = await prisma.lessonType.findMany()
    * ```
    */
  get lessonType(): Prisma.LessonTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessonView`: Exposes CRUD operations for the **LessonView** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LessonViews
    * const lessonViews = await prisma.lessonView.findMany()
    * ```
    */
  get lessonView(): Prisma.LessonViewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lesson`: Exposes CRUD operations for the **Lesson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lesson.findMany()
    * ```
    */
  get lesson(): Prisma.LessonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionBank`: Exposes CRUD operations for the **QuestionBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionBanks
    * const questionBanks = await prisma.questionBank.findMany()
    * ```
    */
  get questionBank(): Prisma.QuestionBankDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionLevel`: Exposes CRUD operations for the **QuestionLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionLevels
    * const questionLevels = await prisma.questionLevel.findMany()
    * ```
    */
  get questionLevel(): Prisma.QuestionLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionSet`: Exposes CRUD operations for the **QuestionSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionSets
    * const questionSets = await prisma.questionSet.findMany()
    * ```
    */
  get questionSet(): Prisma.QuestionSetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionType`: Exposes CRUD operations for the **QuestionType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionTypes
    * const questionTypes = await prisma.questionType.findMany()
    * ```
    */
  get questionType(): Prisma.QuestionTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resultLevel`: Exposes CRUD operations for the **ResultLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResultLevels
    * const resultLevels = await prisma.resultLevel.findMany()
    * ```
    */
  get resultLevel(): Prisma.ResultLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scoreCriteria`: Exposes CRUD operations for the **ScoreCriteria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScoreCriteria
    * const scoreCriteria = await prisma.scoreCriteria.findMany()
    * ```
    */
  get scoreCriteria(): Prisma.ScoreCriteriaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testResult`: Exposes CRUD operations for the **TestResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestResults
    * const testResults = await prisma.testResult.findMany()
    * ```
    */
  get testResult(): Prisma.TestResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testType`: Exposes CRUD operations for the **TestType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestTypes
    * const testTypes = await prisma.testType.findMany()
    * ```
    */
  get testType(): Prisma.TestTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.title`: Exposes CRUD operations for the **Title** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Titles
    * const titles = await prisma.title.findMany()
    * ```
    */
  get title(): Prisma.TitleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AcademicTitle: 'AcademicTitle',
    AnswerSubmission: 'AnswerSubmission',
    Category: 'Category',
    CourseCompletion: 'CourseCompletion',
    CourseEnrollment: 'CourseEnrollment',
    CourseInstructor: 'CourseInstructor',
    Course: 'Course',
    Department: 'Department',
    LessonAttempt: 'LessonAttempt',
    LessonContentType: 'LessonContentType',
    LessonContent: 'LessonContent',
    LessonPrerequisite: 'LessonPrerequisite',
    LessonType: 'LessonType',
    LessonView: 'LessonView',
    Lesson: 'Lesson',
    Organization: 'Organization',
    QuestionBank: 'QuestionBank',
    QuestionLevel: 'QuestionLevel',
    QuestionSet: 'QuestionSet',
    QuestionType: 'QuestionType',
    ResultLevel: 'ResultLevel',
    ScoreCriteria: 'ScoreCriteria',
    TestResult: 'TestResult',
    TestType: 'TestType',
    Title: 'Title',
    UserRole: 'UserRole',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "academicTitle" | "answerSubmission" | "category" | "courseCompletion" | "courseEnrollment" | "courseInstructor" | "course" | "department" | "lessonAttempt" | "lessonContentType" | "lessonContent" | "lessonPrerequisite" | "lessonType" | "lessonView" | "lesson" | "organization" | "questionBank" | "questionLevel" | "questionSet" | "questionType" | "resultLevel" | "scoreCriteria" | "testResult" | "testType" | "title" | "userRole" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AcademicTitle: {
        payload: Prisma.$AcademicTitlePayload<ExtArgs>
        fields: Prisma.AcademicTitleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicTitleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicTitleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>
          }
          findFirst: {
            args: Prisma.AcademicTitleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicTitleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>
          }
          findMany: {
            args: Prisma.AcademicTitleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>[]
          }
          create: {
            args: Prisma.AcademicTitleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>
          }
          createMany: {
            args: Prisma.AcademicTitleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AcademicTitleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>[]
          }
          delete: {
            args: Prisma.AcademicTitleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>
          }
          update: {
            args: Prisma.AcademicTitleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>
          }
          deleteMany: {
            args: Prisma.AcademicTitleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicTitleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AcademicTitleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>[]
          }
          upsert: {
            args: Prisma.AcademicTitleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicTitlePayload>
          }
          aggregate: {
            args: Prisma.AcademicTitleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcademicTitle>
          }
          groupBy: {
            args: Prisma.AcademicTitleGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcademicTitleGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicTitleCountArgs<ExtArgs>
            result: $Utils.Optional<AcademicTitleCountAggregateOutputType> | number
          }
        }
      }
      AnswerSubmission: {
        payload: Prisma.$AnswerSubmissionPayload<ExtArgs>
        fields: Prisma.AnswerSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnswerSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnswerSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>
          }
          findFirst: {
            args: Prisma.AnswerSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnswerSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>
          }
          findMany: {
            args: Prisma.AnswerSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>[]
          }
          create: {
            args: Prisma.AnswerSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>
          }
          createMany: {
            args: Prisma.AnswerSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnswerSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>[]
          }
          delete: {
            args: Prisma.AnswerSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>
          }
          update: {
            args: Prisma.AnswerSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.AnswerSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnswerSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnswerSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.AnswerSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerSubmissionPayload>
          }
          aggregate: {
            args: Prisma.AnswerSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswerSubmission>
          }
          groupBy: {
            args: Prisma.AnswerSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswerSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnswerSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<AnswerSubmissionCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      CourseCompletion: {
        payload: Prisma.$CourseCompletionPayload<ExtArgs>
        fields: Prisma.CourseCompletionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseCompletionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseCompletionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>
          }
          findFirst: {
            args: Prisma.CourseCompletionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseCompletionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>
          }
          findMany: {
            args: Prisma.CourseCompletionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>[]
          }
          create: {
            args: Prisma.CourseCompletionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>
          }
          createMany: {
            args: Prisma.CourseCompletionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCompletionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>[]
          }
          delete: {
            args: Prisma.CourseCompletionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>
          }
          update: {
            args: Prisma.CourseCompletionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>
          }
          deleteMany: {
            args: Prisma.CourseCompletionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseCompletionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseCompletionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>[]
          }
          upsert: {
            args: Prisma.CourseCompletionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseCompletionPayload>
          }
          aggregate: {
            args: Prisma.CourseCompletionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseCompletion>
          }
          groupBy: {
            args: Prisma.CourseCompletionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseCompletionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCompletionCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCompletionCountAggregateOutputType> | number
          }
        }
      }
      CourseEnrollment: {
        payload: Prisma.$CourseEnrollmentPayload<ExtArgs>
        fields: Prisma.CourseEnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseEnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseEnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>
          }
          findFirst: {
            args: Prisma.CourseEnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseEnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>
          }
          findMany: {
            args: Prisma.CourseEnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>[]
          }
          create: {
            args: Prisma.CourseEnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>
          }
          createMany: {
            args: Prisma.CourseEnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseEnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>[]
          }
          delete: {
            args: Prisma.CourseEnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>
          }
          update: {
            args: Prisma.CourseEnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.CourseEnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseEnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseEnrollmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>[]
          }
          upsert: {
            args: Prisma.CourseEnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseEnrollmentPayload>
          }
          aggregate: {
            args: Prisma.CourseEnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseEnrollment>
          }
          groupBy: {
            args: Prisma.CourseEnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseEnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseEnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<CourseEnrollmentCountAggregateOutputType> | number
          }
        }
      }
      CourseInstructor: {
        payload: Prisma.$CourseInstructorPayload<ExtArgs>
        fields: Prisma.CourseInstructorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseInstructorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseInstructorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          findFirst: {
            args: Prisma.CourseInstructorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseInstructorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          findMany: {
            args: Prisma.CourseInstructorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>[]
          }
          create: {
            args: Prisma.CourseInstructorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          createMany: {
            args: Prisma.CourseInstructorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseInstructorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>[]
          }
          delete: {
            args: Prisma.CourseInstructorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          update: {
            args: Prisma.CourseInstructorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          deleteMany: {
            args: Prisma.CourseInstructorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseInstructorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseInstructorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>[]
          }
          upsert: {
            args: Prisma.CourseInstructorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          aggregate: {
            args: Prisma.CourseInstructorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseInstructor>
          }
          groupBy: {
            args: Prisma.CourseInstructorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseInstructorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseInstructorCountArgs<ExtArgs>
            result: $Utils.Optional<CourseInstructorCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      LessonAttempt: {
        payload: Prisma.$LessonAttemptPayload<ExtArgs>
        fields: Prisma.LessonAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>
          }
          findFirst: {
            args: Prisma.LessonAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>
          }
          findMany: {
            args: Prisma.LessonAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>[]
          }
          create: {
            args: Prisma.LessonAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>
          }
          createMany: {
            args: Prisma.LessonAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>[]
          }
          delete: {
            args: Prisma.LessonAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>
          }
          update: {
            args: Prisma.LessonAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>
          }
          deleteMany: {
            args: Prisma.LessonAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonAttemptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>[]
          }
          upsert: {
            args: Prisma.LessonAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonAttemptPayload>
          }
          aggregate: {
            args: Prisma.LessonAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessonAttempt>
          }
          groupBy: {
            args: Prisma.LessonAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<LessonAttemptCountAggregateOutputType> | number
          }
        }
      }
      LessonContentType: {
        payload: Prisma.$LessonContentTypePayload<ExtArgs>
        fields: Prisma.LessonContentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonContentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonContentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>
          }
          findFirst: {
            args: Prisma.LessonContentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonContentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>
          }
          findMany: {
            args: Prisma.LessonContentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>[]
          }
          create: {
            args: Prisma.LessonContentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>
          }
          createMany: {
            args: Prisma.LessonContentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonContentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>[]
          }
          delete: {
            args: Prisma.LessonContentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>
          }
          update: {
            args: Prisma.LessonContentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>
          }
          deleteMany: {
            args: Prisma.LessonContentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonContentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonContentTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>[]
          }
          upsert: {
            args: Prisma.LessonContentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentTypePayload>
          }
          aggregate: {
            args: Prisma.LessonContentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessonContentType>
          }
          groupBy: {
            args: Prisma.LessonContentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonContentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonContentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<LessonContentTypeCountAggregateOutputType> | number
          }
        }
      }
      LessonContent: {
        payload: Prisma.$LessonContentPayload<ExtArgs>
        fields: Prisma.LessonContentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonContentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonContentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>
          }
          findFirst: {
            args: Prisma.LessonContentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonContentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>
          }
          findMany: {
            args: Prisma.LessonContentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>[]
          }
          create: {
            args: Prisma.LessonContentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>
          }
          createMany: {
            args: Prisma.LessonContentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonContentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>[]
          }
          delete: {
            args: Prisma.LessonContentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>
          }
          update: {
            args: Prisma.LessonContentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>
          }
          deleteMany: {
            args: Prisma.LessonContentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonContentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonContentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>[]
          }
          upsert: {
            args: Prisma.LessonContentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonContentPayload>
          }
          aggregate: {
            args: Prisma.LessonContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessonContent>
          }
          groupBy: {
            args: Prisma.LessonContentGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonContentCountArgs<ExtArgs>
            result: $Utils.Optional<LessonContentCountAggregateOutputType> | number
          }
        }
      }
      LessonPrerequisite: {
        payload: Prisma.$LessonPrerequisitePayload<ExtArgs>
        fields: Prisma.LessonPrerequisiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonPrerequisiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonPrerequisiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>
          }
          findFirst: {
            args: Prisma.LessonPrerequisiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonPrerequisiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>
          }
          findMany: {
            args: Prisma.LessonPrerequisiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>[]
          }
          create: {
            args: Prisma.LessonPrerequisiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>
          }
          createMany: {
            args: Prisma.LessonPrerequisiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonPrerequisiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>[]
          }
          delete: {
            args: Prisma.LessonPrerequisiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>
          }
          update: {
            args: Prisma.LessonPrerequisiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>
          }
          deleteMany: {
            args: Prisma.LessonPrerequisiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonPrerequisiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonPrerequisiteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>[]
          }
          upsert: {
            args: Prisma.LessonPrerequisiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPrerequisitePayload>
          }
          aggregate: {
            args: Prisma.LessonPrerequisiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessonPrerequisite>
          }
          groupBy: {
            args: Prisma.LessonPrerequisiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonPrerequisiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonPrerequisiteCountArgs<ExtArgs>
            result: $Utils.Optional<LessonPrerequisiteCountAggregateOutputType> | number
          }
        }
      }
      LessonType: {
        payload: Prisma.$LessonTypePayload<ExtArgs>
        fields: Prisma.LessonTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>
          }
          findFirst: {
            args: Prisma.LessonTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>
          }
          findMany: {
            args: Prisma.LessonTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>[]
          }
          create: {
            args: Prisma.LessonTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>
          }
          createMany: {
            args: Prisma.LessonTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>[]
          }
          delete: {
            args: Prisma.LessonTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>
          }
          update: {
            args: Prisma.LessonTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>
          }
          deleteMany: {
            args: Prisma.LessonTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>[]
          }
          upsert: {
            args: Prisma.LessonTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonTypePayload>
          }
          aggregate: {
            args: Prisma.LessonTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessonType>
          }
          groupBy: {
            args: Prisma.LessonTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonTypeCountArgs<ExtArgs>
            result: $Utils.Optional<LessonTypeCountAggregateOutputType> | number
          }
        }
      }
      LessonView: {
        payload: Prisma.$LessonViewPayload<ExtArgs>
        fields: Prisma.LessonViewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonViewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonViewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>
          }
          findFirst: {
            args: Prisma.LessonViewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonViewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>
          }
          findMany: {
            args: Prisma.LessonViewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>[]
          }
          create: {
            args: Prisma.LessonViewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>
          }
          createMany: {
            args: Prisma.LessonViewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonViewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>[]
          }
          delete: {
            args: Prisma.LessonViewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>
          }
          update: {
            args: Prisma.LessonViewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>
          }
          deleteMany: {
            args: Prisma.LessonViewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonViewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonViewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>[]
          }
          upsert: {
            args: Prisma.LessonViewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonViewPayload>
          }
          aggregate: {
            args: Prisma.LessonViewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessonView>
          }
          groupBy: {
            args: Prisma.LessonViewGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonViewGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonViewCountArgs<ExtArgs>
            result: $Utils.Optional<LessonViewCountAggregateOutputType> | number
          }
        }
      }
      Lesson: {
        payload: Prisma.$LessonPayload<ExtArgs>
        fields: Prisma.LessonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          findFirst: {
            args: Prisma.LessonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          findMany: {
            args: Prisma.LessonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>[]
          }
          create: {
            args: Prisma.LessonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          createMany: {
            args: Prisma.LessonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>[]
          }
          delete: {
            args: Prisma.LessonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          update: {
            args: Prisma.LessonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          deleteMany: {
            args: Prisma.LessonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>[]
          }
          upsert: {
            args: Prisma.LessonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonPayload>
          }
          aggregate: {
            args: Prisma.LessonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLesson>
          }
          groupBy: {
            args: Prisma.LessonGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonCountArgs<ExtArgs>
            result: $Utils.Optional<LessonCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      QuestionBank: {
        payload: Prisma.$QuestionBankPayload<ExtArgs>
        fields: Prisma.QuestionBankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionBankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionBankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          findFirst: {
            args: Prisma.QuestionBankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionBankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          findMany: {
            args: Prisma.QuestionBankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>[]
          }
          create: {
            args: Prisma.QuestionBankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          createMany: {
            args: Prisma.QuestionBankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionBankCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>[]
          }
          delete: {
            args: Prisma.QuestionBankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          update: {
            args: Prisma.QuestionBankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          deleteMany: {
            args: Prisma.QuestionBankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionBankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionBankUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>[]
          }
          upsert: {
            args: Prisma.QuestionBankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionBankPayload>
          }
          aggregate: {
            args: Prisma.QuestionBankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionBank>
          }
          groupBy: {
            args: Prisma.QuestionBankGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionBankGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionBankCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionBankCountAggregateOutputType> | number
          }
        }
      }
      QuestionLevel: {
        payload: Prisma.$QuestionLevelPayload<ExtArgs>
        fields: Prisma.QuestionLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>
          }
          findFirst: {
            args: Prisma.QuestionLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>
          }
          findMany: {
            args: Prisma.QuestionLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>[]
          }
          create: {
            args: Prisma.QuestionLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>
          }
          createMany: {
            args: Prisma.QuestionLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>[]
          }
          delete: {
            args: Prisma.QuestionLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>
          }
          update: {
            args: Prisma.QuestionLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>
          }
          deleteMany: {
            args: Prisma.QuestionLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>[]
          }
          upsert: {
            args: Prisma.QuestionLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionLevelPayload>
          }
          aggregate: {
            args: Prisma.QuestionLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionLevel>
          }
          groupBy: {
            args: Prisma.QuestionLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionLevelCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionLevelCountAggregateOutputType> | number
          }
        }
      }
      QuestionSet: {
        payload: Prisma.$QuestionSetPayload<ExtArgs>
        fields: Prisma.QuestionSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          findFirst: {
            args: Prisma.QuestionSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          findMany: {
            args: Prisma.QuestionSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          create: {
            args: Prisma.QuestionSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          createMany: {
            args: Prisma.QuestionSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          delete: {
            args: Prisma.QuestionSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          update: {
            args: Prisma.QuestionSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          deleteMany: {
            args: Prisma.QuestionSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          upsert: {
            args: Prisma.QuestionSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          aggregate: {
            args: Prisma.QuestionSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionSet>
          }
          groupBy: {
            args: Prisma.QuestionSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionSetCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionSetCountAggregateOutputType> | number
          }
        }
      }
      QuestionType: {
        payload: Prisma.$QuestionTypePayload<ExtArgs>
        fields: Prisma.QuestionTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>
          }
          findFirst: {
            args: Prisma.QuestionTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>
          }
          findMany: {
            args: Prisma.QuestionTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>[]
          }
          create: {
            args: Prisma.QuestionTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>
          }
          createMany: {
            args: Prisma.QuestionTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>[]
          }
          delete: {
            args: Prisma.QuestionTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>
          }
          update: {
            args: Prisma.QuestionTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>
          }
          deleteMany: {
            args: Prisma.QuestionTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>[]
          }
          upsert: {
            args: Prisma.QuestionTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionTypePayload>
          }
          aggregate: {
            args: Prisma.QuestionTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionType>
          }
          groupBy: {
            args: Prisma.QuestionTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionTypeCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionTypeCountAggregateOutputType> | number
          }
        }
      }
      ResultLevel: {
        payload: Prisma.$ResultLevelPayload<ExtArgs>
        fields: Prisma.ResultLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResultLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResultLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>
          }
          findFirst: {
            args: Prisma.ResultLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResultLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>
          }
          findMany: {
            args: Prisma.ResultLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>[]
          }
          create: {
            args: Prisma.ResultLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>
          }
          createMany: {
            args: Prisma.ResultLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResultLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>[]
          }
          delete: {
            args: Prisma.ResultLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>
          }
          update: {
            args: Prisma.ResultLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>
          }
          deleteMany: {
            args: Prisma.ResultLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResultLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResultLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>[]
          }
          upsert: {
            args: Prisma.ResultLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultLevelPayload>
          }
          aggregate: {
            args: Prisma.ResultLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResultLevel>
          }
          groupBy: {
            args: Prisma.ResultLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResultLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResultLevelCountArgs<ExtArgs>
            result: $Utils.Optional<ResultLevelCountAggregateOutputType> | number
          }
        }
      }
      ScoreCriteria: {
        payload: Prisma.$ScoreCriteriaPayload<ExtArgs>
        fields: Prisma.ScoreCriteriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreCriteriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreCriteriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>
          }
          findFirst: {
            args: Prisma.ScoreCriteriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreCriteriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>
          }
          findMany: {
            args: Prisma.ScoreCriteriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>[]
          }
          create: {
            args: Prisma.ScoreCriteriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>
          }
          createMany: {
            args: Prisma.ScoreCriteriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreCriteriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>[]
          }
          delete: {
            args: Prisma.ScoreCriteriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>
          }
          update: {
            args: Prisma.ScoreCriteriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>
          }
          deleteMany: {
            args: Prisma.ScoreCriteriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreCriteriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreCriteriaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>[]
          }
          upsert: {
            args: Prisma.ScoreCriteriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreCriteriaPayload>
          }
          aggregate: {
            args: Prisma.ScoreCriteriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScoreCriteria>
          }
          groupBy: {
            args: Prisma.ScoreCriteriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreCriteriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreCriteriaCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreCriteriaCountAggregateOutputType> | number
          }
        }
      }
      TestResult: {
        payload: Prisma.$TestResultPayload<ExtArgs>
        fields: Prisma.TestResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>
          }
          findFirst: {
            args: Prisma.TestResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>
          }
          findMany: {
            args: Prisma.TestResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>[]
          }
          create: {
            args: Prisma.TestResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>
          }
          createMany: {
            args: Prisma.TestResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>[]
          }
          delete: {
            args: Prisma.TestResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>
          }
          update: {
            args: Prisma.TestResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>
          }
          deleteMany: {
            args: Prisma.TestResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>[]
          }
          upsert: {
            args: Prisma.TestResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestResultPayload>
          }
          aggregate: {
            args: Prisma.TestResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestResult>
          }
          groupBy: {
            args: Prisma.TestResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestResultCountArgs<ExtArgs>
            result: $Utils.Optional<TestResultCountAggregateOutputType> | number
          }
        }
      }
      TestType: {
        payload: Prisma.$TestTypePayload<ExtArgs>
        fields: Prisma.TestTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          findFirst: {
            args: Prisma.TestTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          findMany: {
            args: Prisma.TestTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>[]
          }
          create: {
            args: Prisma.TestTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          createMany: {
            args: Prisma.TestTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>[]
          }
          delete: {
            args: Prisma.TestTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          update: {
            args: Prisma.TestTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          deleteMany: {
            args: Prisma.TestTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>[]
          }
          upsert: {
            args: Prisma.TestTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestTypePayload>
          }
          aggregate: {
            args: Prisma.TestTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestType>
          }
          groupBy: {
            args: Prisma.TestTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestTypeCountArgs<ExtArgs>
            result: $Utils.Optional<TestTypeCountAggregateOutputType> | number
          }
        }
      }
      Title: {
        payload: Prisma.$TitlePayload<ExtArgs>
        fields: Prisma.TitleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TitleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TitleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          findFirst: {
            args: Prisma.TitleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TitleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          findMany: {
            args: Prisma.TitleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>[]
          }
          create: {
            args: Prisma.TitleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          createMany: {
            args: Prisma.TitleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TitleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>[]
          }
          delete: {
            args: Prisma.TitleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          update: {
            args: Prisma.TitleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          deleteMany: {
            args: Prisma.TitleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TitleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TitleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>[]
          }
          upsert: {
            args: Prisma.TitleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          aggregate: {
            args: Prisma.TitleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTitle>
          }
          groupBy: {
            args: Prisma.TitleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TitleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TitleCountArgs<ExtArgs>
            result: $Utils.Optional<TitleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    academicTitle?: AcademicTitleOmit
    answerSubmission?: AnswerSubmissionOmit
    category?: CategoryOmit
    courseCompletion?: CourseCompletionOmit
    courseEnrollment?: CourseEnrollmentOmit
    courseInstructor?: CourseInstructorOmit
    course?: CourseOmit
    department?: DepartmentOmit
    lessonAttempt?: LessonAttemptOmit
    lessonContentType?: LessonContentTypeOmit
    lessonContent?: LessonContentOmit
    lessonPrerequisite?: LessonPrerequisiteOmit
    lessonType?: LessonTypeOmit
    lessonView?: LessonViewOmit
    lesson?: LessonOmit
    organization?: OrganizationOmit
    questionBank?: QuestionBankOmit
    questionLevel?: QuestionLevelOmit
    questionSet?: QuestionSetOmit
    questionType?: QuestionTypeOmit
    resultLevel?: ResultLevelOmit
    scoreCriteria?: ScoreCriteriaOmit
    testResult?: TestResultOmit
    testType?: TestTypeOmit
    title?: TitleOmit
    userRole?: UserRoleOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AcademicTitleCountOutputType
   */

  export type AcademicTitleCountOutputType = {
    users: number
  }

  export type AcademicTitleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AcademicTitleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * AcademicTitleCountOutputType without action
   */
  export type AcademicTitleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitleCountOutputType
     */
    select?: AcademicTitleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AcademicTitleCountOutputType without action
   */
  export type AcademicTitleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    categories: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | CategoryCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type CourseInstructorCountOutputType
   */

  export type CourseInstructorCountOutputType = {
    courseInstructor: number
  }

  export type CourseInstructorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courseInstructor?: boolean | CourseInstructorCountOutputTypeCountCourseInstructorArgs
  }

  // Custom InputTypes
  /**
   * CourseInstructorCountOutputType without action
   */
  export type CourseInstructorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructorCountOutputType
     */
    select?: CourseInstructorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseInstructorCountOutputType without action
   */
  export type CourseInstructorCountOutputTypeCountCourseInstructorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    courseInstructorCourseId: number
    courseCompletionCourseId: number
    lessonCourseId: number
    questionSetCourseId: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courseInstructorCourseId?: boolean | CourseCountOutputTypeCountCourseInstructorCourseIdArgs
    courseCompletionCourseId?: boolean | CourseCountOutputTypeCountCourseCompletionCourseIdArgs
    lessonCourseId?: boolean | CourseCountOutputTypeCountLessonCourseIdArgs
    questionSetCourseId?: boolean | CourseCountOutputTypeCountQuestionSetCourseIdArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCourseInstructorCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseInstructorWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCourseCompletionCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCompletionWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountLessonCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountQuestionSetCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type LessonContentTypeCountOutputType
   */

  export type LessonContentTypeCountOutputType = {
    lessonContent: number
  }

  export type LessonContentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessonContent?: boolean | LessonContentTypeCountOutputTypeCountLessonContentArgs
  }

  // Custom InputTypes
  /**
   * LessonContentTypeCountOutputType without action
   */
  export type LessonContentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentTypeCountOutputType
     */
    select?: LessonContentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LessonContentTypeCountOutputType without action
   */
  export type LessonContentTypeCountOutputTypeCountLessonContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonContentWhereInput
  }


  /**
   * Count Type LessonTypeCountOutputType
   */

  export type LessonTypeCountOutputType = {
    lessonTypeId: number
  }

  export type LessonTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessonTypeId?: boolean | LessonTypeCountOutputTypeCountLessonTypeIdArgs
  }

  // Custom InputTypes
  /**
   * LessonTypeCountOutputType without action
   */
  export type LessonTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonTypeCountOutputType
     */
    select?: LessonTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LessonTypeCountOutputType without action
   */
  export type LessonTypeCountOutputTypeCountLessonTypeIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }


  /**
   * Count Type LessonCountOutputType
   */

  export type LessonCountOutputType = {
    children: number
    lessonContent: number
    lessonViewLessonId: number
    lessonAttemptLessonId: number
    lessonPrerequisiteLessonId: number
    lessonPrerequisiteRequiredLessonId: number
    questionSetLessonId: number
  }

  export type LessonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | LessonCountOutputTypeCountChildrenArgs
    lessonContent?: boolean | LessonCountOutputTypeCountLessonContentArgs
    lessonViewLessonId?: boolean | LessonCountOutputTypeCountLessonViewLessonIdArgs
    lessonAttemptLessonId?: boolean | LessonCountOutputTypeCountLessonAttemptLessonIdArgs
    lessonPrerequisiteLessonId?: boolean | LessonCountOutputTypeCountLessonPrerequisiteLessonIdArgs
    lessonPrerequisiteRequiredLessonId?: boolean | LessonCountOutputTypeCountLessonPrerequisiteRequiredLessonIdArgs
    questionSetLessonId?: boolean | LessonCountOutputTypeCountQuestionSetLessonIdArgs
  }

  // Custom InputTypes
  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonCountOutputType
     */
    select?: LessonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountLessonContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonContentWhereInput
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountLessonViewLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonViewWhereInput
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountLessonAttemptLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonAttemptWhereInput
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountLessonPrerequisiteLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonPrerequisiteWhereInput
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountLessonPrerequisiteRequiredLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonPrerequisiteWhereInput
  }

  /**
   * LessonCountOutputType without action
   */
  export type LessonCountOutputTypeCountQuestionSetLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    departments: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departments?: boolean | OrganizationCountOutputTypeCountDepartmentsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * Count Type QuestionBankCountOutputType
   */

  export type QuestionBankCountOutputType = {
    answerSubmission: number
  }

  export type QuestionBankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    answerSubmission?: boolean | QuestionBankCountOutputTypeCountAnswerSubmissionArgs
  }

  // Custom InputTypes
  /**
   * QuestionBankCountOutputType without action
   */
  export type QuestionBankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBankCountOutputType
     */
    select?: QuestionBankCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionBankCountOutputType without action
   */
  export type QuestionBankCountOutputTypeCountAnswerSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerSubmissionWhereInput
  }


  /**
   * Count Type QuestionLevelCountOutputType
   */

  export type QuestionLevelCountOutputType = {
    questionBank: number
  }

  export type QuestionLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionBank?: boolean | QuestionLevelCountOutputTypeCountQuestionBankArgs
  }

  // Custom InputTypes
  /**
   * QuestionLevelCountOutputType without action
   */
  export type QuestionLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevelCountOutputType
     */
    select?: QuestionLevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionLevelCountOutputType without action
   */
  export type QuestionLevelCountOutputTypeCountQuestionBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }


  /**
   * Count Type QuestionSetCountOutputType
   */

  export type QuestionSetCountOutputType = {
    questionBank: number
    scoreCriteria: number
    testResult: number
    answerSubmission: number
  }

  export type QuestionSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionBank?: boolean | QuestionSetCountOutputTypeCountQuestionBankArgs
    scoreCriteria?: boolean | QuestionSetCountOutputTypeCountScoreCriteriaArgs
    testResult?: boolean | QuestionSetCountOutputTypeCountTestResultArgs
    answerSubmission?: boolean | QuestionSetCountOutputTypeCountAnswerSubmissionArgs
  }

  // Custom InputTypes
  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSetCountOutputType
     */
    select?: QuestionSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountQuestionBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountScoreCriteriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreCriteriaWhereInput
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountTestResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestResultWhereInput
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountAnswerSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerSubmissionWhereInput
  }


  /**
   * Count Type QuestionTypeCountOutputType
   */

  export type QuestionTypeCountOutputType = {
    questionBank: number
  }

  export type QuestionTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionBank?: boolean | QuestionTypeCountOutputTypeCountQuestionBankArgs
  }

  // Custom InputTypes
  /**
   * QuestionTypeCountOutputType without action
   */
  export type QuestionTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionTypeCountOutputType
     */
    select?: QuestionTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionTypeCountOutputType without action
   */
  export type QuestionTypeCountOutputTypeCountQuestionBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }


  /**
   * Count Type ResultLevelCountOutputType
   */

  export type ResultLevelCountOutputType = {
    scoreCriteria: number
    testResult: number
  }

  export type ResultLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreCriteria?: boolean | ResultLevelCountOutputTypeCountScoreCriteriaArgs
    testResult?: boolean | ResultLevelCountOutputTypeCountTestResultArgs
  }

  // Custom InputTypes
  /**
   * ResultLevelCountOutputType without action
   */
  export type ResultLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevelCountOutputType
     */
    select?: ResultLevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResultLevelCountOutputType without action
   */
  export type ResultLevelCountOutputTypeCountScoreCriteriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreCriteriaWhereInput
  }

  /**
   * ResultLevelCountOutputType without action
   */
  export type ResultLevelCountOutputTypeCountTestResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestResultWhereInput
  }


  /**
   * Count Type TestTypeCountOutputType
   */

  export type TestTypeCountOutputType = {
    questionSet: number
  }

  export type TestTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | TestTypeCountOutputTypeCountQuestionSetArgs
  }

  // Custom InputTypes
  /**
   * TestTypeCountOutputType without action
   */
  export type TestTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestTypeCountOutputType
     */
    select?: TestTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestTypeCountOutputType without action
   */
  export type TestTypeCountOutputTypeCountQuestionSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }


  /**
   * Count Type TitleCountOutputType
   */

  export type TitleCountOutputType = {
    users: number
  }

  export type TitleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TitleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * TitleCountOutputType without action
   */
  export type TitleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TitleCountOutputType
     */
    select?: TitleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TitleCountOutputType without action
   */
  export type TitleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserRoleCountOutputType
   */

  export type UserRoleCountOutputType = {
    users: number
  }

  export type UserRoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserRoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * UserRoleCountOutputType without action
   */
  export type UserRoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleCountOutputType
     */
    select?: UserRoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserRoleCountOutputType without action
   */
  export type UserRoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    organizationsCreated: number
    organizationsUpdated: number
    organizationsDeleted: number
    categoryCreated: number
    categoryUpdated: number
    categoryDeleted: number
    courseCreated: number
    courseUpdated: number
    courseDeleted: number
    courseInstructorUpdated: number
    courseInstructorDeleted: number
    courseInstructorUserId: number
    courseCompletionUserId: number
    lessonCreated: number
    lessonUpdated: number
    lessonDeleted: number
    lessonContentUpdated: number
    lessonContentDeleted: number
    lessonViewUserId: number
    lessonAttemptUserId: number
    questionSetCreated: number
    questionSetUpdated: number
    questionSetDeleted: number
    questionBankCreated: number
    questionBankUpdated: number
    questionBankDeleted: number
    testResultUser: number
    answerSubmissionUser: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizationsCreated?: boolean | UserCountOutputTypeCountOrganizationsCreatedArgs
    organizationsUpdated?: boolean | UserCountOutputTypeCountOrganizationsUpdatedArgs
    organizationsDeleted?: boolean | UserCountOutputTypeCountOrganizationsDeletedArgs
    categoryCreated?: boolean | UserCountOutputTypeCountCategoryCreatedArgs
    categoryUpdated?: boolean | UserCountOutputTypeCountCategoryUpdatedArgs
    categoryDeleted?: boolean | UserCountOutputTypeCountCategoryDeletedArgs
    courseCreated?: boolean | UserCountOutputTypeCountCourseCreatedArgs
    courseUpdated?: boolean | UserCountOutputTypeCountCourseUpdatedArgs
    courseDeleted?: boolean | UserCountOutputTypeCountCourseDeletedArgs
    courseInstructorUpdated?: boolean | UserCountOutputTypeCountCourseInstructorUpdatedArgs
    courseInstructorDeleted?: boolean | UserCountOutputTypeCountCourseInstructorDeletedArgs
    courseInstructorUserId?: boolean | UserCountOutputTypeCountCourseInstructorUserIdArgs
    courseCompletionUserId?: boolean | UserCountOutputTypeCountCourseCompletionUserIdArgs
    lessonCreated?: boolean | UserCountOutputTypeCountLessonCreatedArgs
    lessonUpdated?: boolean | UserCountOutputTypeCountLessonUpdatedArgs
    lessonDeleted?: boolean | UserCountOutputTypeCountLessonDeletedArgs
    lessonContentUpdated?: boolean | UserCountOutputTypeCountLessonContentUpdatedArgs
    lessonContentDeleted?: boolean | UserCountOutputTypeCountLessonContentDeletedArgs
    lessonViewUserId?: boolean | UserCountOutputTypeCountLessonViewUserIdArgs
    lessonAttemptUserId?: boolean | UserCountOutputTypeCountLessonAttemptUserIdArgs
    questionSetCreated?: boolean | UserCountOutputTypeCountQuestionSetCreatedArgs
    questionSetUpdated?: boolean | UserCountOutputTypeCountQuestionSetUpdatedArgs
    questionSetDeleted?: boolean | UserCountOutputTypeCountQuestionSetDeletedArgs
    questionBankCreated?: boolean | UserCountOutputTypeCountQuestionBankCreatedArgs
    questionBankUpdated?: boolean | UserCountOutputTypeCountQuestionBankUpdatedArgs
    questionBankDeleted?: boolean | UserCountOutputTypeCountQuestionBankDeletedArgs
    testResultUser?: boolean | UserCountOutputTypeCountTestResultUserArgs
    answerSubmissionUser?: boolean | UserCountOutputTypeCountAnswerSubmissionUserArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizationsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizationsUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizationsDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategoryCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategoryUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategoryDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseInstructorUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseInstructorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseInstructorDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseInstructorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseInstructorUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseInstructorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseCompletionUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCompletionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonContentUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonContentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonContentDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonContentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonViewUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonViewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLessonAttemptUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonAttemptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionSetCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionSetUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionSetDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionBankCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionBankUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuestionBankDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTestResultUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnswerSubmissionUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerSubmissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AcademicTitle
   */

  export type AggregateAcademicTitle = {
    _count: AcademicTitleCountAggregateOutputType | null
    _avg: AcademicTitleAvgAggregateOutputType | null
    _sum: AcademicTitleSumAggregateOutputType | null
    _min: AcademicTitleMinAggregateOutputType | null
    _max: AcademicTitleMaxAggregateOutputType | null
  }

  export type AcademicTitleAvgAggregateOutputType = {
    id: number | null
  }

  export type AcademicTitleSumAggregateOutputType = {
    id: number | null
  }

  export type AcademicTitleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AcademicTitleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type AcademicTitleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type AcademicTitleAvgAggregateInputType = {
    id?: true
  }

  export type AcademicTitleSumAggregateInputType = {
    id?: true
  }

  export type AcademicTitleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type AcademicTitleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type AcademicTitleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AcademicTitleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicTitle to aggregate.
     */
    where?: AcademicTitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTitles to fetch.
     */
    orderBy?: AcademicTitleOrderByWithRelationInput | AcademicTitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicTitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTitles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicTitles
    **/
    _count?: true | AcademicTitleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicTitleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicTitleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicTitleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicTitleMaxAggregateInputType
  }

  export type GetAcademicTitleAggregateType<T extends AcademicTitleAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicTitle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicTitle[P]>
      : GetScalarType<T[P], AggregateAcademicTitle[P]>
  }




  export type AcademicTitleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicTitleWhereInput
    orderBy?: AcademicTitleOrderByWithAggregationInput | AcademicTitleOrderByWithAggregationInput[]
    by: AcademicTitleScalarFieldEnum[] | AcademicTitleScalarFieldEnum
    having?: AcademicTitleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicTitleCountAggregateInputType | true
    _avg?: AcademicTitleAvgAggregateInputType
    _sum?: AcademicTitleSumAggregateInputType
    _min?: AcademicTitleMinAggregateInputType
    _max?: AcademicTitleMaxAggregateInputType
  }

  export type AcademicTitleGroupByOutputType = {
    id: number
    name: string
    _count: AcademicTitleCountAggregateOutputType | null
    _avg: AcademicTitleAvgAggregateOutputType | null
    _sum: AcademicTitleSumAggregateOutputType | null
    _min: AcademicTitleMinAggregateOutputType | null
    _max: AcademicTitleMaxAggregateOutputType | null
  }

  type GetAcademicTitleGroupByPayload<T extends AcademicTitleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicTitleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicTitleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicTitleGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicTitleGroupByOutputType[P]>
        }
      >
    >


  export type AcademicTitleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | AcademicTitle$usersArgs<ExtArgs>
    _count?: boolean | AcademicTitleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicTitle"]>

  export type AcademicTitleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["academicTitle"]>

  export type AcademicTitleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["academicTitle"]>

  export type AcademicTitleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type AcademicTitleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["academicTitle"]>
  export type AcademicTitleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AcademicTitle$usersArgs<ExtArgs>
    _count?: boolean | AcademicTitleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AcademicTitleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AcademicTitleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AcademicTitlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicTitle"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["academicTitle"]>
    composites: {}
  }

  type AcademicTitleGetPayload<S extends boolean | null | undefined | AcademicTitleDefaultArgs> = $Result.GetResult<Prisma.$AcademicTitlePayload, S>

  type AcademicTitleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AcademicTitleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcademicTitleCountAggregateInputType | true
    }

  export interface AcademicTitleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicTitle'], meta: { name: 'AcademicTitle' } }
    /**
     * Find zero or one AcademicTitle that matches the filter.
     * @param {AcademicTitleFindUniqueArgs} args - Arguments to find a AcademicTitle
     * @example
     * // Get one AcademicTitle
     * const academicTitle = await prisma.academicTitle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcademicTitleFindUniqueArgs>(args: SelectSubset<T, AcademicTitleFindUniqueArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AcademicTitle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AcademicTitleFindUniqueOrThrowArgs} args - Arguments to find a AcademicTitle
     * @example
     * // Get one AcademicTitle
     * const academicTitle = await prisma.academicTitle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcademicTitleFindUniqueOrThrowArgs>(args: SelectSubset<T, AcademicTitleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicTitle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleFindFirstArgs} args - Arguments to find a AcademicTitle
     * @example
     * // Get one AcademicTitle
     * const academicTitle = await prisma.academicTitle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcademicTitleFindFirstArgs>(args?: SelectSubset<T, AcademicTitleFindFirstArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicTitle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleFindFirstOrThrowArgs} args - Arguments to find a AcademicTitle
     * @example
     * // Get one AcademicTitle
     * const academicTitle = await prisma.academicTitle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcademicTitleFindFirstOrThrowArgs>(args?: SelectSubset<T, AcademicTitleFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AcademicTitles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicTitles
     * const academicTitles = await prisma.academicTitle.findMany()
     * 
     * // Get first 10 AcademicTitles
     * const academicTitles = await prisma.academicTitle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicTitleWithIdOnly = await prisma.academicTitle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AcademicTitleFindManyArgs>(args?: SelectSubset<T, AcademicTitleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AcademicTitle.
     * @param {AcademicTitleCreateArgs} args - Arguments to create a AcademicTitle.
     * @example
     * // Create one AcademicTitle
     * const AcademicTitle = await prisma.academicTitle.create({
     *   data: {
     *     // ... data to create a AcademicTitle
     *   }
     * })
     * 
     */
    create<T extends AcademicTitleCreateArgs>(args: SelectSubset<T, AcademicTitleCreateArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AcademicTitles.
     * @param {AcademicTitleCreateManyArgs} args - Arguments to create many AcademicTitles.
     * @example
     * // Create many AcademicTitles
     * const academicTitle = await prisma.academicTitle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcademicTitleCreateManyArgs>(args?: SelectSubset<T, AcademicTitleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AcademicTitles and returns the data saved in the database.
     * @param {AcademicTitleCreateManyAndReturnArgs} args - Arguments to create many AcademicTitles.
     * @example
     * // Create many AcademicTitles
     * const academicTitle = await prisma.academicTitle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AcademicTitles and only return the `id`
     * const academicTitleWithIdOnly = await prisma.academicTitle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AcademicTitleCreateManyAndReturnArgs>(args?: SelectSubset<T, AcademicTitleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AcademicTitle.
     * @param {AcademicTitleDeleteArgs} args - Arguments to delete one AcademicTitle.
     * @example
     * // Delete one AcademicTitle
     * const AcademicTitle = await prisma.academicTitle.delete({
     *   where: {
     *     // ... filter to delete one AcademicTitle
     *   }
     * })
     * 
     */
    delete<T extends AcademicTitleDeleteArgs>(args: SelectSubset<T, AcademicTitleDeleteArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AcademicTitle.
     * @param {AcademicTitleUpdateArgs} args - Arguments to update one AcademicTitle.
     * @example
     * // Update one AcademicTitle
     * const academicTitle = await prisma.academicTitle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcademicTitleUpdateArgs>(args: SelectSubset<T, AcademicTitleUpdateArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AcademicTitles.
     * @param {AcademicTitleDeleteManyArgs} args - Arguments to filter AcademicTitles to delete.
     * @example
     * // Delete a few AcademicTitles
     * const { count } = await prisma.academicTitle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcademicTitleDeleteManyArgs>(args?: SelectSubset<T, AcademicTitleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicTitles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicTitles
     * const academicTitle = await prisma.academicTitle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcademicTitleUpdateManyArgs>(args: SelectSubset<T, AcademicTitleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicTitles and returns the data updated in the database.
     * @param {AcademicTitleUpdateManyAndReturnArgs} args - Arguments to update many AcademicTitles.
     * @example
     * // Update many AcademicTitles
     * const academicTitle = await prisma.academicTitle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AcademicTitles and only return the `id`
     * const academicTitleWithIdOnly = await prisma.academicTitle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AcademicTitleUpdateManyAndReturnArgs>(args: SelectSubset<T, AcademicTitleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AcademicTitle.
     * @param {AcademicTitleUpsertArgs} args - Arguments to update or create a AcademicTitle.
     * @example
     * // Update or create a AcademicTitle
     * const academicTitle = await prisma.academicTitle.upsert({
     *   create: {
     *     // ... data to create a AcademicTitle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicTitle we want to update
     *   }
     * })
     */
    upsert<T extends AcademicTitleUpsertArgs>(args: SelectSubset<T, AcademicTitleUpsertArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AcademicTitles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleCountArgs} args - Arguments to filter AcademicTitles to count.
     * @example
     * // Count the number of AcademicTitles
     * const count = await prisma.academicTitle.count({
     *   where: {
     *     // ... the filter for the AcademicTitles we want to count
     *   }
     * })
    **/
    count<T extends AcademicTitleCountArgs>(
      args?: Subset<T, AcademicTitleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicTitleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicTitle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicTitleAggregateArgs>(args: Subset<T, AcademicTitleAggregateArgs>): Prisma.PrismaPromise<GetAcademicTitleAggregateType<T>>

    /**
     * Group by AcademicTitle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicTitleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicTitleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicTitleGroupByArgs['orderBy'] }
        : { orderBy?: AcademicTitleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicTitleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicTitleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicTitle model
   */
  readonly fields: AcademicTitleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicTitle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicTitleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends AcademicTitle$usersArgs<ExtArgs> = {}>(args?: Subset<T, AcademicTitle$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AcademicTitle model
   */
  interface AcademicTitleFieldRefs {
    readonly id: FieldRef<"AcademicTitle", 'Int'>
    readonly name: FieldRef<"AcademicTitle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AcademicTitle findUnique
   */
  export type AcademicTitleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTitle to fetch.
     */
    where: AcademicTitleWhereUniqueInput
  }

  /**
   * AcademicTitle findUniqueOrThrow
   */
  export type AcademicTitleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTitle to fetch.
     */
    where: AcademicTitleWhereUniqueInput
  }

  /**
   * AcademicTitle findFirst
   */
  export type AcademicTitleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTitle to fetch.
     */
    where?: AcademicTitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTitles to fetch.
     */
    orderBy?: AcademicTitleOrderByWithRelationInput | AcademicTitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicTitles.
     */
    cursor?: AcademicTitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTitles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicTitles.
     */
    distinct?: AcademicTitleScalarFieldEnum | AcademicTitleScalarFieldEnum[]
  }

  /**
   * AcademicTitle findFirstOrThrow
   */
  export type AcademicTitleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTitle to fetch.
     */
    where?: AcademicTitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTitles to fetch.
     */
    orderBy?: AcademicTitleOrderByWithRelationInput | AcademicTitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicTitles.
     */
    cursor?: AcademicTitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTitles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicTitles.
     */
    distinct?: AcademicTitleScalarFieldEnum | AcademicTitleScalarFieldEnum[]
  }

  /**
   * AcademicTitle findMany
   */
  export type AcademicTitleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * Filter, which AcademicTitles to fetch.
     */
    where?: AcademicTitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicTitles to fetch.
     */
    orderBy?: AcademicTitleOrderByWithRelationInput | AcademicTitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicTitles.
     */
    cursor?: AcademicTitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicTitles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicTitles.
     */
    skip?: number
    distinct?: AcademicTitleScalarFieldEnum | AcademicTitleScalarFieldEnum[]
  }

  /**
   * AcademicTitle create
   */
  export type AcademicTitleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicTitle.
     */
    data: XOR<AcademicTitleCreateInput, AcademicTitleUncheckedCreateInput>
  }

  /**
   * AcademicTitle createMany
   */
  export type AcademicTitleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicTitles.
     */
    data: AcademicTitleCreateManyInput | AcademicTitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicTitle createManyAndReturn
   */
  export type AcademicTitleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * The data used to create many AcademicTitles.
     */
    data: AcademicTitleCreateManyInput | AcademicTitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicTitle update
   */
  export type AcademicTitleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicTitle.
     */
    data: XOR<AcademicTitleUpdateInput, AcademicTitleUncheckedUpdateInput>
    /**
     * Choose, which AcademicTitle to update.
     */
    where: AcademicTitleWhereUniqueInput
  }

  /**
   * AcademicTitle updateMany
   */
  export type AcademicTitleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicTitles.
     */
    data: XOR<AcademicTitleUpdateManyMutationInput, AcademicTitleUncheckedUpdateManyInput>
    /**
     * Filter which AcademicTitles to update
     */
    where?: AcademicTitleWhereInput
    /**
     * Limit how many AcademicTitles to update.
     */
    limit?: number
  }

  /**
   * AcademicTitle updateManyAndReturn
   */
  export type AcademicTitleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * The data used to update AcademicTitles.
     */
    data: XOR<AcademicTitleUpdateManyMutationInput, AcademicTitleUncheckedUpdateManyInput>
    /**
     * Filter which AcademicTitles to update
     */
    where?: AcademicTitleWhereInput
    /**
     * Limit how many AcademicTitles to update.
     */
    limit?: number
  }

  /**
   * AcademicTitle upsert
   */
  export type AcademicTitleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicTitle to update in case it exists.
     */
    where: AcademicTitleWhereUniqueInput
    /**
     * In case the AcademicTitle found by the `where` argument doesn't exist, create a new AcademicTitle with this data.
     */
    create: XOR<AcademicTitleCreateInput, AcademicTitleUncheckedCreateInput>
    /**
     * In case the AcademicTitle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicTitleUpdateInput, AcademicTitleUncheckedUpdateInput>
  }

  /**
   * AcademicTitle delete
   */
  export type AcademicTitleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    /**
     * Filter which AcademicTitle to delete.
     */
    where: AcademicTitleWhereUniqueInput
  }

  /**
   * AcademicTitle deleteMany
   */
  export type AcademicTitleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicTitles to delete
     */
    where?: AcademicTitleWhereInput
    /**
     * Limit how many AcademicTitles to delete.
     */
    limit?: number
  }

  /**
   * AcademicTitle.users
   */
  export type AcademicTitle$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * AcademicTitle without action
   */
  export type AcademicTitleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
  }


  /**
   * Model AnswerSubmission
   */

  export type AggregateAnswerSubmission = {
    _count: AnswerSubmissionCountAggregateOutputType | null
    _avg: AnswerSubmissionAvgAggregateOutputType | null
    _sum: AnswerSubmissionSumAggregateOutputType | null
    _min: AnswerSubmissionMinAggregateOutputType | null
    _max: AnswerSubmissionMaxAggregateOutputType | null
  }

  export type AnswerSubmissionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    questionBankId: number | null
  }

  export type AnswerSubmissionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    questionBankId: number | null
  }

  export type AnswerSubmissionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    questionBankId: number | null
    filledText: string | null
    fileUrl: string | null
    isCorrect: boolean | null
    submittedAt: Date | null
  }

  export type AnswerSubmissionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    questionBankId: number | null
    filledText: string | null
    fileUrl: string | null
    isCorrect: boolean | null
    submittedAt: Date | null
  }

  export type AnswerSubmissionCountAggregateOutputType = {
    id: number
    userId: number
    questionSetId: number
    questionBankId: number
    selectedChoice: number
    filledText: number
    fileUrl: number
    isCorrect: number
    submittedAt: number
    _all: number
  }


  export type AnswerSubmissionAvgAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    questionBankId?: true
  }

  export type AnswerSubmissionSumAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    questionBankId?: true
  }

  export type AnswerSubmissionMinAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    questionBankId?: true
    filledText?: true
    fileUrl?: true
    isCorrect?: true
    submittedAt?: true
  }

  export type AnswerSubmissionMaxAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    questionBankId?: true
    filledText?: true
    fileUrl?: true
    isCorrect?: true
    submittedAt?: true
  }

  export type AnswerSubmissionCountAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    questionBankId?: true
    selectedChoice?: true
    filledText?: true
    fileUrl?: true
    isCorrect?: true
    submittedAt?: true
    _all?: true
  }

  export type AnswerSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnswerSubmission to aggregate.
     */
    where?: AnswerSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerSubmissions to fetch.
     */
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnswerSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnswerSubmissions
    **/
    _count?: true | AnswerSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswerSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswerSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerSubmissionMaxAggregateInputType
  }

  export type GetAnswerSubmissionAggregateType<T extends AnswerSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswerSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswerSubmission[P]>
      : GetScalarType<T[P], AggregateAnswerSubmission[P]>
  }




  export type AnswerSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerSubmissionWhereInput
    orderBy?: AnswerSubmissionOrderByWithAggregationInput | AnswerSubmissionOrderByWithAggregationInput[]
    by: AnswerSubmissionScalarFieldEnum[] | AnswerSubmissionScalarFieldEnum
    having?: AnswerSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerSubmissionCountAggregateInputType | true
    _avg?: AnswerSubmissionAvgAggregateInputType
    _sum?: AnswerSubmissionSumAggregateInputType
    _min?: AnswerSubmissionMinAggregateInputType
    _max?: AnswerSubmissionMaxAggregateInputType
  }

  export type AnswerSubmissionGroupByOutputType = {
    id: number
    userId: number
    questionSetId: number
    questionBankId: number
    selectedChoice: JsonValue | null
    filledText: string | null
    fileUrl: string | null
    isCorrect: boolean
    submittedAt: Date
    _count: AnswerSubmissionCountAggregateOutputType | null
    _avg: AnswerSubmissionAvgAggregateOutputType | null
    _sum: AnswerSubmissionSumAggregateOutputType | null
    _min: AnswerSubmissionMinAggregateOutputType | null
    _max: AnswerSubmissionMaxAggregateOutputType | null
  }

  type GetAnswerSubmissionGroupByPayload<T extends AnswerSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswerSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type AnswerSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    questionBankId?: boolean
    selectedChoice?: boolean
    filledText?: boolean
    fileUrl?: boolean
    isCorrect?: boolean
    submittedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    questionBank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answerSubmission"]>

  export type AnswerSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    questionBankId?: boolean
    selectedChoice?: boolean
    filledText?: boolean
    fileUrl?: boolean
    isCorrect?: boolean
    submittedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    questionBank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answerSubmission"]>

  export type AnswerSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    questionBankId?: boolean
    selectedChoice?: boolean
    filledText?: boolean
    fileUrl?: boolean
    isCorrect?: boolean
    submittedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    questionBank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answerSubmission"]>

  export type AnswerSubmissionSelectScalar = {
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    questionBankId?: boolean
    selectedChoice?: boolean
    filledText?: boolean
    fileUrl?: boolean
    isCorrect?: boolean
    submittedAt?: boolean
  }

  export type AnswerSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionSetId" | "questionBankId" | "selectedChoice" | "filledText" | "fileUrl" | "isCorrect" | "submittedAt", ExtArgs["result"]["answerSubmission"]>
  export type AnswerSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    questionBank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }
  export type AnswerSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    questionBank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }
  export type AnswerSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    questionBank?: boolean | QuestionBankDefaultArgs<ExtArgs>
  }

  export type $AnswerSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnswerSubmission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      questionSet: Prisma.$QuestionSetPayload<ExtArgs>
      questionBank: Prisma.$QuestionBankPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      questionSetId: number
      questionBankId: number
      /**
       * เก็บคำตอบ choice
       */
      selectedChoice: Prisma.JsonValue | null
      /**
       * เก็บคำตอบ fill in blank
       */
      filledText: string | null
      /**
       * upload
       */
      fileUrl: string | null
      /**
       * ตอบถูกหรือผิด
       */
      isCorrect: boolean
      submittedAt: Date
    }, ExtArgs["result"]["answerSubmission"]>
    composites: {}
  }

  type AnswerSubmissionGetPayload<S extends boolean | null | undefined | AnswerSubmissionDefaultArgs> = $Result.GetResult<Prisma.$AnswerSubmissionPayload, S>

  type AnswerSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnswerSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnswerSubmissionCountAggregateInputType | true
    }

  export interface AnswerSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnswerSubmission'], meta: { name: 'AnswerSubmission' } }
    /**
     * Find zero or one AnswerSubmission that matches the filter.
     * @param {AnswerSubmissionFindUniqueArgs} args - Arguments to find a AnswerSubmission
     * @example
     * // Get one AnswerSubmission
     * const answerSubmission = await prisma.answerSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnswerSubmissionFindUniqueArgs>(args: SelectSubset<T, AnswerSubmissionFindUniqueArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnswerSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnswerSubmissionFindUniqueOrThrowArgs} args - Arguments to find a AnswerSubmission
     * @example
     * // Get one AnswerSubmission
     * const answerSubmission = await prisma.answerSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnswerSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, AnswerSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnswerSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionFindFirstArgs} args - Arguments to find a AnswerSubmission
     * @example
     * // Get one AnswerSubmission
     * const answerSubmission = await prisma.answerSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnswerSubmissionFindFirstArgs>(args?: SelectSubset<T, AnswerSubmissionFindFirstArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnswerSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionFindFirstOrThrowArgs} args - Arguments to find a AnswerSubmission
     * @example
     * // Get one AnswerSubmission
     * const answerSubmission = await prisma.answerSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnswerSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, AnswerSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnswerSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnswerSubmissions
     * const answerSubmissions = await prisma.answerSubmission.findMany()
     * 
     * // Get first 10 AnswerSubmissions
     * const answerSubmissions = await prisma.answerSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answerSubmissionWithIdOnly = await prisma.answerSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnswerSubmissionFindManyArgs>(args?: SelectSubset<T, AnswerSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnswerSubmission.
     * @param {AnswerSubmissionCreateArgs} args - Arguments to create a AnswerSubmission.
     * @example
     * // Create one AnswerSubmission
     * const AnswerSubmission = await prisma.answerSubmission.create({
     *   data: {
     *     // ... data to create a AnswerSubmission
     *   }
     * })
     * 
     */
    create<T extends AnswerSubmissionCreateArgs>(args: SelectSubset<T, AnswerSubmissionCreateArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnswerSubmissions.
     * @param {AnswerSubmissionCreateManyArgs} args - Arguments to create many AnswerSubmissions.
     * @example
     * // Create many AnswerSubmissions
     * const answerSubmission = await prisma.answerSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnswerSubmissionCreateManyArgs>(args?: SelectSubset<T, AnswerSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnswerSubmissions and returns the data saved in the database.
     * @param {AnswerSubmissionCreateManyAndReturnArgs} args - Arguments to create many AnswerSubmissions.
     * @example
     * // Create many AnswerSubmissions
     * const answerSubmission = await prisma.answerSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnswerSubmissions and only return the `id`
     * const answerSubmissionWithIdOnly = await prisma.answerSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnswerSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, AnswerSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AnswerSubmission.
     * @param {AnswerSubmissionDeleteArgs} args - Arguments to delete one AnswerSubmission.
     * @example
     * // Delete one AnswerSubmission
     * const AnswerSubmission = await prisma.answerSubmission.delete({
     *   where: {
     *     // ... filter to delete one AnswerSubmission
     *   }
     * })
     * 
     */
    delete<T extends AnswerSubmissionDeleteArgs>(args: SelectSubset<T, AnswerSubmissionDeleteArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnswerSubmission.
     * @param {AnswerSubmissionUpdateArgs} args - Arguments to update one AnswerSubmission.
     * @example
     * // Update one AnswerSubmission
     * const answerSubmission = await prisma.answerSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnswerSubmissionUpdateArgs>(args: SelectSubset<T, AnswerSubmissionUpdateArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnswerSubmissions.
     * @param {AnswerSubmissionDeleteManyArgs} args - Arguments to filter AnswerSubmissions to delete.
     * @example
     * // Delete a few AnswerSubmissions
     * const { count } = await prisma.answerSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnswerSubmissionDeleteManyArgs>(args?: SelectSubset<T, AnswerSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnswerSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnswerSubmissions
     * const answerSubmission = await prisma.answerSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnswerSubmissionUpdateManyArgs>(args: SelectSubset<T, AnswerSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnswerSubmissions and returns the data updated in the database.
     * @param {AnswerSubmissionUpdateManyAndReturnArgs} args - Arguments to update many AnswerSubmissions.
     * @example
     * // Update many AnswerSubmissions
     * const answerSubmission = await prisma.answerSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AnswerSubmissions and only return the `id`
     * const answerSubmissionWithIdOnly = await prisma.answerSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnswerSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, AnswerSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AnswerSubmission.
     * @param {AnswerSubmissionUpsertArgs} args - Arguments to update or create a AnswerSubmission.
     * @example
     * // Update or create a AnswerSubmission
     * const answerSubmission = await prisma.answerSubmission.upsert({
     *   create: {
     *     // ... data to create a AnswerSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnswerSubmission we want to update
     *   }
     * })
     */
    upsert<T extends AnswerSubmissionUpsertArgs>(args: SelectSubset<T, AnswerSubmissionUpsertArgs<ExtArgs>>): Prisma__AnswerSubmissionClient<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnswerSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionCountArgs} args - Arguments to filter AnswerSubmissions to count.
     * @example
     * // Count the number of AnswerSubmissions
     * const count = await prisma.answerSubmission.count({
     *   where: {
     *     // ... the filter for the AnswerSubmissions we want to count
     *   }
     * })
    **/
    count<T extends AnswerSubmissionCountArgs>(
      args?: Subset<T, AnswerSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnswerSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerSubmissionAggregateArgs>(args: Subset<T, AnswerSubmissionAggregateArgs>): Prisma.PrismaPromise<GetAnswerSubmissionAggregateType<T>>

    /**
     * Group by AnswerSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnswerSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnswerSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: AnswerSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnswerSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnswerSubmission model
   */
  readonly fields: AnswerSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnswerSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnswerSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionSet<T extends QuestionSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSetDefaultArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionBank<T extends QuestionBankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBankDefaultArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnswerSubmission model
   */
  interface AnswerSubmissionFieldRefs {
    readonly id: FieldRef<"AnswerSubmission", 'Int'>
    readonly userId: FieldRef<"AnswerSubmission", 'Int'>
    readonly questionSetId: FieldRef<"AnswerSubmission", 'Int'>
    readonly questionBankId: FieldRef<"AnswerSubmission", 'Int'>
    readonly selectedChoice: FieldRef<"AnswerSubmission", 'Json'>
    readonly filledText: FieldRef<"AnswerSubmission", 'String'>
    readonly fileUrl: FieldRef<"AnswerSubmission", 'String'>
    readonly isCorrect: FieldRef<"AnswerSubmission", 'Boolean'>
    readonly submittedAt: FieldRef<"AnswerSubmission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnswerSubmission findUnique
   */
  export type AnswerSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerSubmission to fetch.
     */
    where: AnswerSubmissionWhereUniqueInput
  }

  /**
   * AnswerSubmission findUniqueOrThrow
   */
  export type AnswerSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerSubmission to fetch.
     */
    where: AnswerSubmissionWhereUniqueInput
  }

  /**
   * AnswerSubmission findFirst
   */
  export type AnswerSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerSubmission to fetch.
     */
    where?: AnswerSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerSubmissions to fetch.
     */
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnswerSubmissions.
     */
    cursor?: AnswerSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnswerSubmissions.
     */
    distinct?: AnswerSubmissionScalarFieldEnum | AnswerSubmissionScalarFieldEnum[]
  }

  /**
   * AnswerSubmission findFirstOrThrow
   */
  export type AnswerSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerSubmission to fetch.
     */
    where?: AnswerSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerSubmissions to fetch.
     */
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnswerSubmissions.
     */
    cursor?: AnswerSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnswerSubmissions.
     */
    distinct?: AnswerSubmissionScalarFieldEnum | AnswerSubmissionScalarFieldEnum[]
  }

  /**
   * AnswerSubmission findMany
   */
  export type AnswerSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AnswerSubmissions to fetch.
     */
    where?: AnswerSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnswerSubmissions to fetch.
     */
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnswerSubmissions.
     */
    cursor?: AnswerSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnswerSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnswerSubmissions.
     */
    skip?: number
    distinct?: AnswerSubmissionScalarFieldEnum | AnswerSubmissionScalarFieldEnum[]
  }

  /**
   * AnswerSubmission create
   */
  export type AnswerSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a AnswerSubmission.
     */
    data: XOR<AnswerSubmissionCreateInput, AnswerSubmissionUncheckedCreateInput>
  }

  /**
   * AnswerSubmission createMany
   */
  export type AnswerSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnswerSubmissions.
     */
    data: AnswerSubmissionCreateManyInput | AnswerSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnswerSubmission createManyAndReturn
   */
  export type AnswerSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many AnswerSubmissions.
     */
    data: AnswerSubmissionCreateManyInput | AnswerSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnswerSubmission update
   */
  export type AnswerSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a AnswerSubmission.
     */
    data: XOR<AnswerSubmissionUpdateInput, AnswerSubmissionUncheckedUpdateInput>
    /**
     * Choose, which AnswerSubmission to update.
     */
    where: AnswerSubmissionWhereUniqueInput
  }

  /**
   * AnswerSubmission updateMany
   */
  export type AnswerSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnswerSubmissions.
     */
    data: XOR<AnswerSubmissionUpdateManyMutationInput, AnswerSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which AnswerSubmissions to update
     */
    where?: AnswerSubmissionWhereInput
    /**
     * Limit how many AnswerSubmissions to update.
     */
    limit?: number
  }

  /**
   * AnswerSubmission updateManyAndReturn
   */
  export type AnswerSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update AnswerSubmissions.
     */
    data: XOR<AnswerSubmissionUpdateManyMutationInput, AnswerSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which AnswerSubmissions to update
     */
    where?: AnswerSubmissionWhereInput
    /**
     * Limit how many AnswerSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnswerSubmission upsert
   */
  export type AnswerSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the AnswerSubmission to update in case it exists.
     */
    where: AnswerSubmissionWhereUniqueInput
    /**
     * In case the AnswerSubmission found by the `where` argument doesn't exist, create a new AnswerSubmission with this data.
     */
    create: XOR<AnswerSubmissionCreateInput, AnswerSubmissionUncheckedCreateInput>
    /**
     * In case the AnswerSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnswerSubmissionUpdateInput, AnswerSubmissionUncheckedUpdateInput>
  }

  /**
   * AnswerSubmission delete
   */
  export type AnswerSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    /**
     * Filter which AnswerSubmission to delete.
     */
    where: AnswerSubmissionWhereUniqueInput
  }

  /**
   * AnswerSubmission deleteMany
   */
  export type AnswerSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnswerSubmissions to delete
     */
    where?: AnswerSubmissionWhereInput
    /**
     * Limit how many AnswerSubmissions to delete.
     */
    limit?: number
  }

  /**
   * AnswerSubmission without action
   */
  export type AnswerSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    createdBy: number
    updatedBy: number
    deletedBy: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    isActive: boolean
    createdBy: number
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Category$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Category$deletedByUserArgs<ExtArgs>
    categories?: boolean | Category$categoriesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Category$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Category$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Category$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Category$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isActive" | "createdBy" | "updatedBy" | "deletedBy" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Category$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Category$deletedByUserArgs<ExtArgs>
    categories?: boolean | Category$categoriesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Category$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Category$deletedByUserArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Category$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Category$deletedByUserArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      createdByUser: Prisma.$UserPayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      categories: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isActive: boolean
      createdBy: number
      updatedBy: number | null
      deletedBy: number | null
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends Category$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Category$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends Category$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Category$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    categories<T extends Category$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Category$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly createdBy: FieldRef<"Category", 'Int'>
    readonly updatedBy: FieldRef<"Category", 'Int'>
    readonly deletedBy: FieldRef<"Category", 'Int'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly deletedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.updatedByUser
   */
  export type Category$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Category.deletedByUser
   */
  export type Category$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Category.categories
   */
  export type Category$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model CourseCompletion
   */

  export type AggregateCourseCompletion = {
    _count: CourseCompletionCountAggregateOutputType | null
    _avg: CourseCompletionAvgAggregateOutputType | null
    _sum: CourseCompletionSumAggregateOutputType | null
    _min: CourseCompletionMinAggregateOutputType | null
    _max: CourseCompletionMaxAggregateOutputType | null
  }

  export type CourseCompletionAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    finalScore: number | null
  }

  export type CourseCompletionSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    finalScore: number | null
  }

  export type CourseCompletionMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    completedAt: Date | null
    finalScore: number | null
    isCertified: boolean | null
    certificateUrl: string | null
  }

  export type CourseCompletionMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    completedAt: Date | null
    finalScore: number | null
    isCertified: boolean | null
    certificateUrl: string | null
  }

  export type CourseCompletionCountAggregateOutputType = {
    id: number
    courseId: number
    userId: number
    completedAt: number
    finalScore: number
    isCertified: number
    certificateUrl: number
    _all: number
  }


  export type CourseCompletionAvgAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    finalScore?: true
  }

  export type CourseCompletionSumAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    finalScore?: true
  }

  export type CourseCompletionMinAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    completedAt?: true
    finalScore?: true
    isCertified?: true
    certificateUrl?: true
  }

  export type CourseCompletionMaxAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    completedAt?: true
    finalScore?: true
    isCertified?: true
    certificateUrl?: true
  }

  export type CourseCompletionCountAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    completedAt?: true
    finalScore?: true
    isCertified?: true
    certificateUrl?: true
    _all?: true
  }

  export type CourseCompletionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseCompletion to aggregate.
     */
    where?: CourseCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCompletions to fetch.
     */
    orderBy?: CourseCompletionOrderByWithRelationInput | CourseCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseCompletions
    **/
    _count?: true | CourseCompletionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseCompletionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseCompletionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseCompletionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseCompletionMaxAggregateInputType
  }

  export type GetCourseCompletionAggregateType<T extends CourseCompletionAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseCompletion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseCompletion[P]>
      : GetScalarType<T[P], AggregateCourseCompletion[P]>
  }




  export type CourseCompletionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseCompletionWhereInput
    orderBy?: CourseCompletionOrderByWithAggregationInput | CourseCompletionOrderByWithAggregationInput[]
    by: CourseCompletionScalarFieldEnum[] | CourseCompletionScalarFieldEnum
    having?: CourseCompletionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCompletionCountAggregateInputType | true
    _avg?: CourseCompletionAvgAggregateInputType
    _sum?: CourseCompletionSumAggregateInputType
    _min?: CourseCompletionMinAggregateInputType
    _max?: CourseCompletionMaxAggregateInputType
  }

  export type CourseCompletionGroupByOutputType = {
    id: number
    courseId: number
    userId: number
    completedAt: Date
    finalScore: number
    isCertified: boolean
    certificateUrl: string
    _count: CourseCompletionCountAggregateOutputType | null
    _avg: CourseCompletionAvgAggregateOutputType | null
    _sum: CourseCompletionSumAggregateOutputType | null
    _min: CourseCompletionMinAggregateOutputType | null
    _max: CourseCompletionMaxAggregateOutputType | null
  }

  type GetCourseCompletionGroupByPayload<T extends CourseCompletionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseCompletionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseCompletionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseCompletionGroupByOutputType[P]>
            : GetScalarType<T[P], CourseCompletionGroupByOutputType[P]>
        }
      >
    >


  export type CourseCompletionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    completedAt?: boolean
    finalScore?: boolean
    isCertified?: boolean
    certificateUrl?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseCompletion$userArgs<ExtArgs>
  }, ExtArgs["result"]["courseCompletion"]>

  export type CourseCompletionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    completedAt?: boolean
    finalScore?: boolean
    isCertified?: boolean
    certificateUrl?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseCompletion$userArgs<ExtArgs>
  }, ExtArgs["result"]["courseCompletion"]>

  export type CourseCompletionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    completedAt?: boolean
    finalScore?: boolean
    isCertified?: boolean
    certificateUrl?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseCompletion$userArgs<ExtArgs>
  }, ExtArgs["result"]["courseCompletion"]>

  export type CourseCompletionSelectScalar = {
    id?: boolean
    courseId?: boolean
    userId?: boolean
    completedAt?: boolean
    finalScore?: boolean
    isCertified?: boolean
    certificateUrl?: boolean
  }

  export type CourseCompletionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "userId" | "completedAt" | "finalScore" | "isCertified" | "certificateUrl", ExtArgs["result"]["courseCompletion"]>
  export type CourseCompletionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseCompletion$userArgs<ExtArgs>
  }
  export type CourseCompletionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseCompletion$userArgs<ExtArgs>
  }
  export type CourseCompletionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseCompletion$userArgs<ExtArgs>
  }

  export type $CourseCompletionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseCompletion"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      userId: number
      completedAt: Date
      finalScore: number
      isCertified: boolean
      certificateUrl: string
    }, ExtArgs["result"]["courseCompletion"]>
    composites: {}
  }

  type CourseCompletionGetPayload<S extends boolean | null | undefined | CourseCompletionDefaultArgs> = $Result.GetResult<Prisma.$CourseCompletionPayload, S>

  type CourseCompletionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseCompletionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCompletionCountAggregateInputType | true
    }

  export interface CourseCompletionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseCompletion'], meta: { name: 'CourseCompletion' } }
    /**
     * Find zero or one CourseCompletion that matches the filter.
     * @param {CourseCompletionFindUniqueArgs} args - Arguments to find a CourseCompletion
     * @example
     * // Get one CourseCompletion
     * const courseCompletion = await prisma.courseCompletion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseCompletionFindUniqueArgs>(args: SelectSubset<T, CourseCompletionFindUniqueArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseCompletion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseCompletionFindUniqueOrThrowArgs} args - Arguments to find a CourseCompletion
     * @example
     * // Get one CourseCompletion
     * const courseCompletion = await prisma.courseCompletion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseCompletionFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseCompletionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseCompletion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionFindFirstArgs} args - Arguments to find a CourseCompletion
     * @example
     * // Get one CourseCompletion
     * const courseCompletion = await prisma.courseCompletion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseCompletionFindFirstArgs>(args?: SelectSubset<T, CourseCompletionFindFirstArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseCompletion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionFindFirstOrThrowArgs} args - Arguments to find a CourseCompletion
     * @example
     * // Get one CourseCompletion
     * const courseCompletion = await prisma.courseCompletion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseCompletionFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseCompletionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseCompletions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseCompletions
     * const courseCompletions = await prisma.courseCompletion.findMany()
     * 
     * // Get first 10 CourseCompletions
     * const courseCompletions = await prisma.courseCompletion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseCompletionWithIdOnly = await prisma.courseCompletion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseCompletionFindManyArgs>(args?: SelectSubset<T, CourseCompletionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseCompletion.
     * @param {CourseCompletionCreateArgs} args - Arguments to create a CourseCompletion.
     * @example
     * // Create one CourseCompletion
     * const CourseCompletion = await prisma.courseCompletion.create({
     *   data: {
     *     // ... data to create a CourseCompletion
     *   }
     * })
     * 
     */
    create<T extends CourseCompletionCreateArgs>(args: SelectSubset<T, CourseCompletionCreateArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseCompletions.
     * @param {CourseCompletionCreateManyArgs} args - Arguments to create many CourseCompletions.
     * @example
     * // Create many CourseCompletions
     * const courseCompletion = await prisma.courseCompletion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCompletionCreateManyArgs>(args?: SelectSubset<T, CourseCompletionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseCompletions and returns the data saved in the database.
     * @param {CourseCompletionCreateManyAndReturnArgs} args - Arguments to create many CourseCompletions.
     * @example
     * // Create many CourseCompletions
     * const courseCompletion = await prisma.courseCompletion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseCompletions and only return the `id`
     * const courseCompletionWithIdOnly = await prisma.courseCompletion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCompletionCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCompletionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseCompletion.
     * @param {CourseCompletionDeleteArgs} args - Arguments to delete one CourseCompletion.
     * @example
     * // Delete one CourseCompletion
     * const CourseCompletion = await prisma.courseCompletion.delete({
     *   where: {
     *     // ... filter to delete one CourseCompletion
     *   }
     * })
     * 
     */
    delete<T extends CourseCompletionDeleteArgs>(args: SelectSubset<T, CourseCompletionDeleteArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseCompletion.
     * @param {CourseCompletionUpdateArgs} args - Arguments to update one CourseCompletion.
     * @example
     * // Update one CourseCompletion
     * const courseCompletion = await prisma.courseCompletion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseCompletionUpdateArgs>(args: SelectSubset<T, CourseCompletionUpdateArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseCompletions.
     * @param {CourseCompletionDeleteManyArgs} args - Arguments to filter CourseCompletions to delete.
     * @example
     * // Delete a few CourseCompletions
     * const { count } = await prisma.courseCompletion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseCompletionDeleteManyArgs>(args?: SelectSubset<T, CourseCompletionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseCompletions
     * const courseCompletion = await prisma.courseCompletion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseCompletionUpdateManyArgs>(args: SelectSubset<T, CourseCompletionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseCompletions and returns the data updated in the database.
     * @param {CourseCompletionUpdateManyAndReturnArgs} args - Arguments to update many CourseCompletions.
     * @example
     * // Update many CourseCompletions
     * const courseCompletion = await prisma.courseCompletion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseCompletions and only return the `id`
     * const courseCompletionWithIdOnly = await prisma.courseCompletion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseCompletionUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseCompletionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseCompletion.
     * @param {CourseCompletionUpsertArgs} args - Arguments to update or create a CourseCompletion.
     * @example
     * // Update or create a CourseCompletion
     * const courseCompletion = await prisma.courseCompletion.upsert({
     *   create: {
     *     // ... data to create a CourseCompletion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseCompletion we want to update
     *   }
     * })
     */
    upsert<T extends CourseCompletionUpsertArgs>(args: SelectSubset<T, CourseCompletionUpsertArgs<ExtArgs>>): Prisma__CourseCompletionClient<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionCountArgs} args - Arguments to filter CourseCompletions to count.
     * @example
     * // Count the number of CourseCompletions
     * const count = await prisma.courseCompletion.count({
     *   where: {
     *     // ... the filter for the CourseCompletions we want to count
     *   }
     * })
    **/
    count<T extends CourseCompletionCountArgs>(
      args?: Subset<T, CourseCompletionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCompletionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseCompletionAggregateArgs>(args: Subset<T, CourseCompletionAggregateArgs>): Prisma.PrismaPromise<GetCourseCompletionAggregateType<T>>

    /**
     * Group by CourseCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCompletionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseCompletionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseCompletionGroupByArgs['orderBy'] }
        : { orderBy?: CourseCompletionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseCompletionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseCompletionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseCompletion model
   */
  readonly fields: CourseCompletionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseCompletion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseCompletionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends CourseCompletion$userArgs<ExtArgs> = {}>(args?: Subset<T, CourseCompletion$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseCompletion model
   */
  interface CourseCompletionFieldRefs {
    readonly id: FieldRef<"CourseCompletion", 'Int'>
    readonly courseId: FieldRef<"CourseCompletion", 'Int'>
    readonly userId: FieldRef<"CourseCompletion", 'Int'>
    readonly completedAt: FieldRef<"CourseCompletion", 'DateTime'>
    readonly finalScore: FieldRef<"CourseCompletion", 'Int'>
    readonly isCertified: FieldRef<"CourseCompletion", 'Boolean'>
    readonly certificateUrl: FieldRef<"CourseCompletion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CourseCompletion findUnique
   */
  export type CourseCompletionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCompletion to fetch.
     */
    where: CourseCompletionWhereUniqueInput
  }

  /**
   * CourseCompletion findUniqueOrThrow
   */
  export type CourseCompletionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCompletion to fetch.
     */
    where: CourseCompletionWhereUniqueInput
  }

  /**
   * CourseCompletion findFirst
   */
  export type CourseCompletionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCompletion to fetch.
     */
    where?: CourseCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCompletions to fetch.
     */
    orderBy?: CourseCompletionOrderByWithRelationInput | CourseCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseCompletions.
     */
    cursor?: CourseCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseCompletions.
     */
    distinct?: CourseCompletionScalarFieldEnum | CourseCompletionScalarFieldEnum[]
  }

  /**
   * CourseCompletion findFirstOrThrow
   */
  export type CourseCompletionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCompletion to fetch.
     */
    where?: CourseCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCompletions to fetch.
     */
    orderBy?: CourseCompletionOrderByWithRelationInput | CourseCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseCompletions.
     */
    cursor?: CourseCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseCompletions.
     */
    distinct?: CourseCompletionScalarFieldEnum | CourseCompletionScalarFieldEnum[]
  }

  /**
   * CourseCompletion findMany
   */
  export type CourseCompletionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * Filter, which CourseCompletions to fetch.
     */
    where?: CourseCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseCompletions to fetch.
     */
    orderBy?: CourseCompletionOrderByWithRelationInput | CourseCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseCompletions.
     */
    cursor?: CourseCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseCompletions.
     */
    skip?: number
    distinct?: CourseCompletionScalarFieldEnum | CourseCompletionScalarFieldEnum[]
  }

  /**
   * CourseCompletion create
   */
  export type CourseCompletionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseCompletion.
     */
    data: XOR<CourseCompletionCreateInput, CourseCompletionUncheckedCreateInput>
  }

  /**
   * CourseCompletion createMany
   */
  export type CourseCompletionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseCompletions.
     */
    data: CourseCompletionCreateManyInput | CourseCompletionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseCompletion createManyAndReturn
   */
  export type CourseCompletionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * The data used to create many CourseCompletions.
     */
    data: CourseCompletionCreateManyInput | CourseCompletionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseCompletion update
   */
  export type CourseCompletionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseCompletion.
     */
    data: XOR<CourseCompletionUpdateInput, CourseCompletionUncheckedUpdateInput>
    /**
     * Choose, which CourseCompletion to update.
     */
    where: CourseCompletionWhereUniqueInput
  }

  /**
   * CourseCompletion updateMany
   */
  export type CourseCompletionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseCompletions.
     */
    data: XOR<CourseCompletionUpdateManyMutationInput, CourseCompletionUncheckedUpdateManyInput>
    /**
     * Filter which CourseCompletions to update
     */
    where?: CourseCompletionWhereInput
    /**
     * Limit how many CourseCompletions to update.
     */
    limit?: number
  }

  /**
   * CourseCompletion updateManyAndReturn
   */
  export type CourseCompletionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * The data used to update CourseCompletions.
     */
    data: XOR<CourseCompletionUpdateManyMutationInput, CourseCompletionUncheckedUpdateManyInput>
    /**
     * Filter which CourseCompletions to update
     */
    where?: CourseCompletionWhereInput
    /**
     * Limit how many CourseCompletions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseCompletion upsert
   */
  export type CourseCompletionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseCompletion to update in case it exists.
     */
    where: CourseCompletionWhereUniqueInput
    /**
     * In case the CourseCompletion found by the `where` argument doesn't exist, create a new CourseCompletion with this data.
     */
    create: XOR<CourseCompletionCreateInput, CourseCompletionUncheckedCreateInput>
    /**
     * In case the CourseCompletion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseCompletionUpdateInput, CourseCompletionUncheckedUpdateInput>
  }

  /**
   * CourseCompletion delete
   */
  export type CourseCompletionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    /**
     * Filter which CourseCompletion to delete.
     */
    where: CourseCompletionWhereUniqueInput
  }

  /**
   * CourseCompletion deleteMany
   */
  export type CourseCompletionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseCompletions to delete
     */
    where?: CourseCompletionWhereInput
    /**
     * Limit how many CourseCompletions to delete.
     */
    limit?: number
  }

  /**
   * CourseCompletion.user
   */
  export type CourseCompletion$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CourseCompletion without action
   */
  export type CourseCompletionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
  }


  /**
   * Model CourseEnrollment
   */

  export type AggregateCourseEnrollment = {
    _count: CourseEnrollmentCountAggregateOutputType | null
    _avg: CourseEnrollmentAvgAggregateOutputType | null
    _sum: CourseEnrollmentSumAggregateOutputType | null
    _min: CourseEnrollmentMinAggregateOutputType | null
    _max: CourseEnrollmentMaxAggregateOutputType | null
  }

  export type CourseEnrollmentAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
  }

  export type CourseEnrollmentSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
  }

  export type CourseEnrollmentMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    enrolledAt: Date | null
  }

  export type CourseEnrollmentMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    enrolledAt: Date | null
  }

  export type CourseEnrollmentCountAggregateOutputType = {
    id: number
    courseId: number
    userId: number
    enrolledAt: number
    _all: number
  }


  export type CourseEnrollmentAvgAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
  }

  export type CourseEnrollmentSumAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
  }

  export type CourseEnrollmentMinAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    enrolledAt?: true
  }

  export type CourseEnrollmentMaxAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    enrolledAt?: true
  }

  export type CourseEnrollmentCountAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    enrolledAt?: true
    _all?: true
  }

  export type CourseEnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseEnrollment to aggregate.
     */
    where?: CourseEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseEnrollments to fetch.
     */
    orderBy?: CourseEnrollmentOrderByWithRelationInput | CourseEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseEnrollments
    **/
    _count?: true | CourseEnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseEnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseEnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseEnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseEnrollmentMaxAggregateInputType
  }

  export type GetCourseEnrollmentAggregateType<T extends CourseEnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseEnrollment[P]>
      : GetScalarType<T[P], AggregateCourseEnrollment[P]>
  }




  export type CourseEnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseEnrollmentWhereInput
    orderBy?: CourseEnrollmentOrderByWithAggregationInput | CourseEnrollmentOrderByWithAggregationInput[]
    by: CourseEnrollmentScalarFieldEnum[] | CourseEnrollmentScalarFieldEnum
    having?: CourseEnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseEnrollmentCountAggregateInputType | true
    _avg?: CourseEnrollmentAvgAggregateInputType
    _sum?: CourseEnrollmentSumAggregateInputType
    _min?: CourseEnrollmentMinAggregateInputType
    _max?: CourseEnrollmentMaxAggregateInputType
  }

  export type CourseEnrollmentGroupByOutputType = {
    id: number
    courseId: number
    userId: number
    enrolledAt: Date
    _count: CourseEnrollmentCountAggregateOutputType | null
    _avg: CourseEnrollmentAvgAggregateOutputType | null
    _sum: CourseEnrollmentSumAggregateOutputType | null
    _min: CourseEnrollmentMinAggregateOutputType | null
    _max: CourseEnrollmentMaxAggregateOutputType | null
  }

  type GetCourseEnrollmentGroupByPayload<T extends CourseEnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseEnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseEnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseEnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], CourseEnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type CourseEnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    enrolledAt?: boolean
  }, ExtArgs["result"]["courseEnrollment"]>

  export type CourseEnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    enrolledAt?: boolean
  }, ExtArgs["result"]["courseEnrollment"]>

  export type CourseEnrollmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    enrolledAt?: boolean
  }, ExtArgs["result"]["courseEnrollment"]>

  export type CourseEnrollmentSelectScalar = {
    id?: boolean
    courseId?: boolean
    userId?: boolean
    enrolledAt?: boolean
  }

  export type CourseEnrollmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "userId" | "enrolledAt", ExtArgs["result"]["courseEnrollment"]>

  export type $CourseEnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseEnrollment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      userId: number
      enrolledAt: Date
    }, ExtArgs["result"]["courseEnrollment"]>
    composites: {}
  }

  type CourseEnrollmentGetPayload<S extends boolean | null | undefined | CourseEnrollmentDefaultArgs> = $Result.GetResult<Prisma.$CourseEnrollmentPayload, S>

  type CourseEnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseEnrollmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseEnrollmentCountAggregateInputType | true
    }

  export interface CourseEnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseEnrollment'], meta: { name: 'CourseEnrollment' } }
    /**
     * Find zero or one CourseEnrollment that matches the filter.
     * @param {CourseEnrollmentFindUniqueArgs} args - Arguments to find a CourseEnrollment
     * @example
     * // Get one CourseEnrollment
     * const courseEnrollment = await prisma.courseEnrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseEnrollmentFindUniqueArgs>(args: SelectSubset<T, CourseEnrollmentFindUniqueArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseEnrollment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseEnrollmentFindUniqueOrThrowArgs} args - Arguments to find a CourseEnrollment
     * @example
     * // Get one CourseEnrollment
     * const courseEnrollment = await prisma.courseEnrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseEnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseEnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseEnrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentFindFirstArgs} args - Arguments to find a CourseEnrollment
     * @example
     * // Get one CourseEnrollment
     * const courseEnrollment = await prisma.courseEnrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseEnrollmentFindFirstArgs>(args?: SelectSubset<T, CourseEnrollmentFindFirstArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseEnrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentFindFirstOrThrowArgs} args - Arguments to find a CourseEnrollment
     * @example
     * // Get one CourseEnrollment
     * const courseEnrollment = await prisma.courseEnrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseEnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseEnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseEnrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseEnrollments
     * const courseEnrollments = await prisma.courseEnrollment.findMany()
     * 
     * // Get first 10 CourseEnrollments
     * const courseEnrollments = await prisma.courseEnrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseEnrollmentWithIdOnly = await prisma.courseEnrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseEnrollmentFindManyArgs>(args?: SelectSubset<T, CourseEnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseEnrollment.
     * @param {CourseEnrollmentCreateArgs} args - Arguments to create a CourseEnrollment.
     * @example
     * // Create one CourseEnrollment
     * const CourseEnrollment = await prisma.courseEnrollment.create({
     *   data: {
     *     // ... data to create a CourseEnrollment
     *   }
     * })
     * 
     */
    create<T extends CourseEnrollmentCreateArgs>(args: SelectSubset<T, CourseEnrollmentCreateArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseEnrollments.
     * @param {CourseEnrollmentCreateManyArgs} args - Arguments to create many CourseEnrollments.
     * @example
     * // Create many CourseEnrollments
     * const courseEnrollment = await prisma.courseEnrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseEnrollmentCreateManyArgs>(args?: SelectSubset<T, CourseEnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseEnrollments and returns the data saved in the database.
     * @param {CourseEnrollmentCreateManyAndReturnArgs} args - Arguments to create many CourseEnrollments.
     * @example
     * // Create many CourseEnrollments
     * const courseEnrollment = await prisma.courseEnrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseEnrollments and only return the `id`
     * const courseEnrollmentWithIdOnly = await prisma.courseEnrollment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseEnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseEnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseEnrollment.
     * @param {CourseEnrollmentDeleteArgs} args - Arguments to delete one CourseEnrollment.
     * @example
     * // Delete one CourseEnrollment
     * const CourseEnrollment = await prisma.courseEnrollment.delete({
     *   where: {
     *     // ... filter to delete one CourseEnrollment
     *   }
     * })
     * 
     */
    delete<T extends CourseEnrollmentDeleteArgs>(args: SelectSubset<T, CourseEnrollmentDeleteArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseEnrollment.
     * @param {CourseEnrollmentUpdateArgs} args - Arguments to update one CourseEnrollment.
     * @example
     * // Update one CourseEnrollment
     * const courseEnrollment = await prisma.courseEnrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseEnrollmentUpdateArgs>(args: SelectSubset<T, CourseEnrollmentUpdateArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseEnrollments.
     * @param {CourseEnrollmentDeleteManyArgs} args - Arguments to filter CourseEnrollments to delete.
     * @example
     * // Delete a few CourseEnrollments
     * const { count } = await prisma.courseEnrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseEnrollmentDeleteManyArgs>(args?: SelectSubset<T, CourseEnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseEnrollments
     * const courseEnrollment = await prisma.courseEnrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseEnrollmentUpdateManyArgs>(args: SelectSubset<T, CourseEnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseEnrollments and returns the data updated in the database.
     * @param {CourseEnrollmentUpdateManyAndReturnArgs} args - Arguments to update many CourseEnrollments.
     * @example
     * // Update many CourseEnrollments
     * const courseEnrollment = await prisma.courseEnrollment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseEnrollments and only return the `id`
     * const courseEnrollmentWithIdOnly = await prisma.courseEnrollment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseEnrollmentUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseEnrollmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseEnrollment.
     * @param {CourseEnrollmentUpsertArgs} args - Arguments to update or create a CourseEnrollment.
     * @example
     * // Update or create a CourseEnrollment
     * const courseEnrollment = await prisma.courseEnrollment.upsert({
     *   create: {
     *     // ... data to create a CourseEnrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseEnrollment we want to update
     *   }
     * })
     */
    upsert<T extends CourseEnrollmentUpsertArgs>(args: SelectSubset<T, CourseEnrollmentUpsertArgs<ExtArgs>>): Prisma__CourseEnrollmentClient<$Result.GetResult<Prisma.$CourseEnrollmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentCountArgs} args - Arguments to filter CourseEnrollments to count.
     * @example
     * // Count the number of CourseEnrollments
     * const count = await prisma.courseEnrollment.count({
     *   where: {
     *     // ... the filter for the CourseEnrollments we want to count
     *   }
     * })
    **/
    count<T extends CourseEnrollmentCountArgs>(
      args?: Subset<T, CourseEnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseEnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseEnrollmentAggregateArgs>(args: Subset<T, CourseEnrollmentAggregateArgs>): Prisma.PrismaPromise<GetCourseEnrollmentAggregateType<T>>

    /**
     * Group by CourseEnrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseEnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseEnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseEnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: CourseEnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseEnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseEnrollment model
   */
  readonly fields: CourseEnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseEnrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseEnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseEnrollment model
   */
  interface CourseEnrollmentFieldRefs {
    readonly id: FieldRef<"CourseEnrollment", 'Int'>
    readonly courseId: FieldRef<"CourseEnrollment", 'Int'>
    readonly userId: FieldRef<"CourseEnrollment", 'Int'>
    readonly enrolledAt: FieldRef<"CourseEnrollment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseEnrollment findUnique
   */
  export type CourseEnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * Filter, which CourseEnrollment to fetch.
     */
    where: CourseEnrollmentWhereUniqueInput
  }

  /**
   * CourseEnrollment findUniqueOrThrow
   */
  export type CourseEnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * Filter, which CourseEnrollment to fetch.
     */
    where: CourseEnrollmentWhereUniqueInput
  }

  /**
   * CourseEnrollment findFirst
   */
  export type CourseEnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * Filter, which CourseEnrollment to fetch.
     */
    where?: CourseEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseEnrollments to fetch.
     */
    orderBy?: CourseEnrollmentOrderByWithRelationInput | CourseEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseEnrollments.
     */
    cursor?: CourseEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseEnrollments.
     */
    distinct?: CourseEnrollmentScalarFieldEnum | CourseEnrollmentScalarFieldEnum[]
  }

  /**
   * CourseEnrollment findFirstOrThrow
   */
  export type CourseEnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * Filter, which CourseEnrollment to fetch.
     */
    where?: CourseEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseEnrollments to fetch.
     */
    orderBy?: CourseEnrollmentOrderByWithRelationInput | CourseEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseEnrollments.
     */
    cursor?: CourseEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseEnrollments.
     */
    distinct?: CourseEnrollmentScalarFieldEnum | CourseEnrollmentScalarFieldEnum[]
  }

  /**
   * CourseEnrollment findMany
   */
  export type CourseEnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * Filter, which CourseEnrollments to fetch.
     */
    where?: CourseEnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseEnrollments to fetch.
     */
    orderBy?: CourseEnrollmentOrderByWithRelationInput | CourseEnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseEnrollments.
     */
    cursor?: CourseEnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseEnrollments.
     */
    skip?: number
    distinct?: CourseEnrollmentScalarFieldEnum | CourseEnrollmentScalarFieldEnum[]
  }

  /**
   * CourseEnrollment create
   */
  export type CourseEnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * The data needed to create a CourseEnrollment.
     */
    data: XOR<CourseEnrollmentCreateInput, CourseEnrollmentUncheckedCreateInput>
  }

  /**
   * CourseEnrollment createMany
   */
  export type CourseEnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseEnrollments.
     */
    data: CourseEnrollmentCreateManyInput | CourseEnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseEnrollment createManyAndReturn
   */
  export type CourseEnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * The data used to create many CourseEnrollments.
     */
    data: CourseEnrollmentCreateManyInput | CourseEnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseEnrollment update
   */
  export type CourseEnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * The data needed to update a CourseEnrollment.
     */
    data: XOR<CourseEnrollmentUpdateInput, CourseEnrollmentUncheckedUpdateInput>
    /**
     * Choose, which CourseEnrollment to update.
     */
    where: CourseEnrollmentWhereUniqueInput
  }

  /**
   * CourseEnrollment updateMany
   */
  export type CourseEnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseEnrollments.
     */
    data: XOR<CourseEnrollmentUpdateManyMutationInput, CourseEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which CourseEnrollments to update
     */
    where?: CourseEnrollmentWhereInput
    /**
     * Limit how many CourseEnrollments to update.
     */
    limit?: number
  }

  /**
   * CourseEnrollment updateManyAndReturn
   */
  export type CourseEnrollmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * The data used to update CourseEnrollments.
     */
    data: XOR<CourseEnrollmentUpdateManyMutationInput, CourseEnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which CourseEnrollments to update
     */
    where?: CourseEnrollmentWhereInput
    /**
     * Limit how many CourseEnrollments to update.
     */
    limit?: number
  }

  /**
   * CourseEnrollment upsert
   */
  export type CourseEnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * The filter to search for the CourseEnrollment to update in case it exists.
     */
    where: CourseEnrollmentWhereUniqueInput
    /**
     * In case the CourseEnrollment found by the `where` argument doesn't exist, create a new CourseEnrollment with this data.
     */
    create: XOR<CourseEnrollmentCreateInput, CourseEnrollmentUncheckedCreateInput>
    /**
     * In case the CourseEnrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseEnrollmentUpdateInput, CourseEnrollmentUncheckedUpdateInput>
  }

  /**
   * CourseEnrollment delete
   */
  export type CourseEnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
    /**
     * Filter which CourseEnrollment to delete.
     */
    where: CourseEnrollmentWhereUniqueInput
  }

  /**
   * CourseEnrollment deleteMany
   */
  export type CourseEnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseEnrollments to delete
     */
    where?: CourseEnrollmentWhereInput
    /**
     * Limit how many CourseEnrollments to delete.
     */
    limit?: number
  }

  /**
   * CourseEnrollment without action
   */
  export type CourseEnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseEnrollment
     */
    select?: CourseEnrollmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseEnrollment
     */
    omit?: CourseEnrollmentOmit<ExtArgs> | null
  }


  /**
   * Model CourseInstructor
   */

  export type AggregateCourseInstructor = {
    _count: CourseInstructorCountAggregateOutputType | null
    _avg: CourseInstructorAvgAggregateOutputType | null
    _sum: CourseInstructorSumAggregateOutputType | null
    _min: CourseInstructorMinAggregateOutputType | null
    _max: CourseInstructorMaxAggregateOutputType | null
  }

  export type CourseInstructorAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type CourseInstructorSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type CourseInstructorMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    fullName: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    updatedBy: number | null
    deletedBy: number | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CourseInstructorMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    userId: number | null
    fullName: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    updatedBy: number | null
    deletedBy: number | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CourseInstructorCountAggregateOutputType = {
    id: number
    courseId: number
    userId: number
    fullName: number
    role: number
    isActive: number
    updatedBy: number
    deletedBy: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type CourseInstructorAvgAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type CourseInstructorSumAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type CourseInstructorMinAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    fullName?: true
    role?: true
    isActive?: true
    updatedBy?: true
    deletedBy?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CourseInstructorMaxAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    fullName?: true
    role?: true
    isActive?: true
    updatedBy?: true
    deletedBy?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CourseInstructorCountAggregateInputType = {
    id?: true
    courseId?: true
    userId?: true
    fullName?: true
    role?: true
    isActive?: true
    updatedBy?: true
    deletedBy?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type CourseInstructorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseInstructor to aggregate.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseInstructors
    **/
    _count?: true | CourseInstructorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseInstructorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseInstructorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseInstructorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseInstructorMaxAggregateInputType
  }

  export type GetCourseInstructorAggregateType<T extends CourseInstructorAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseInstructor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseInstructor[P]>
      : GetScalarType<T[P], AggregateCourseInstructor[P]>
  }




  export type CourseInstructorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseInstructorWhereInput
    orderBy?: CourseInstructorOrderByWithAggregationInput | CourseInstructorOrderByWithAggregationInput[]
    by: CourseInstructorScalarFieldEnum[] | CourseInstructorScalarFieldEnum
    having?: CourseInstructorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseInstructorCountAggregateInputType | true
    _avg?: CourseInstructorAvgAggregateInputType
    _sum?: CourseInstructorSumAggregateInputType
    _min?: CourseInstructorMinAggregateInputType
    _max?: CourseInstructorMaxAggregateInputType
  }

  export type CourseInstructorGroupByOutputType = {
    id: number
    courseId: number
    userId: number | null
    fullName: string | null
    role: $Enums.Role
    isActive: boolean
    updatedBy: number | null
    deletedBy: number | null
    updatedAt: Date | null
    deletedAt: Date | null
    _count: CourseInstructorCountAggregateOutputType | null
    _avg: CourseInstructorAvgAggregateOutputType | null
    _sum: CourseInstructorSumAggregateOutputType | null
    _min: CourseInstructorMinAggregateOutputType | null
    _max: CourseInstructorMaxAggregateOutputType | null
  }

  type GetCourseInstructorGroupByPayload<T extends CourseInstructorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseInstructorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseInstructorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseInstructorGroupByOutputType[P]>
            : GetScalarType<T[P], CourseInstructorGroupByOutputType[P]>
        }
      >
    >


  export type CourseInstructorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    fullName?: boolean
    role?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseInstructor$userArgs<ExtArgs>
    updatedByUser?: boolean | CourseInstructor$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | CourseInstructor$deletedByUserArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructor$courseInstructorArgs<ExtArgs>
    _count?: boolean | CourseInstructorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseInstructor"]>

  export type CourseInstructorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    fullName?: boolean
    role?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseInstructor$userArgs<ExtArgs>
    updatedByUser?: boolean | CourseInstructor$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | CourseInstructor$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["courseInstructor"]>

  export type CourseInstructorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    userId?: boolean
    fullName?: boolean
    role?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseInstructor$userArgs<ExtArgs>
    updatedByUser?: boolean | CourseInstructor$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | CourseInstructor$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["courseInstructor"]>

  export type CourseInstructorSelectScalar = {
    id?: boolean
    courseId?: boolean
    userId?: boolean
    fullName?: boolean
    role?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type CourseInstructorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "userId" | "fullName" | "role" | "isActive" | "updatedBy" | "deletedBy" | "updatedAt" | "deletedAt", ExtArgs["result"]["courseInstructor"]>
  export type CourseInstructorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseInstructor$userArgs<ExtArgs>
    updatedByUser?: boolean | CourseInstructor$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | CourseInstructor$deletedByUserArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructor$courseInstructorArgs<ExtArgs>
    _count?: boolean | CourseInstructorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseInstructorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseInstructor$userArgs<ExtArgs>
    updatedByUser?: boolean | CourseInstructor$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | CourseInstructor$deletedByUserArgs<ExtArgs>
  }
  export type CourseInstructorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    user?: boolean | CourseInstructor$userArgs<ExtArgs>
    updatedByUser?: boolean | CourseInstructor$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | CourseInstructor$deletedByUserArgs<ExtArgs>
  }

  export type $CourseInstructorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseInstructor"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      courseInstructor: Prisma.$LessonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      userId: number | null
      fullName: string | null
      role: $Enums.Role
      isActive: boolean
      updatedBy: number | null
      deletedBy: number | null
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["courseInstructor"]>
    composites: {}
  }

  type CourseInstructorGetPayload<S extends boolean | null | undefined | CourseInstructorDefaultArgs> = $Result.GetResult<Prisma.$CourseInstructorPayload, S>

  type CourseInstructorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseInstructorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseInstructorCountAggregateInputType | true
    }

  export interface CourseInstructorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseInstructor'], meta: { name: 'CourseInstructor' } }
    /**
     * Find zero or one CourseInstructor that matches the filter.
     * @param {CourseInstructorFindUniqueArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseInstructorFindUniqueArgs>(args: SelectSubset<T, CourseInstructorFindUniqueArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseInstructor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseInstructorFindUniqueOrThrowArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseInstructorFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseInstructorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseInstructor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorFindFirstArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseInstructorFindFirstArgs>(args?: SelectSubset<T, CourseInstructorFindFirstArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseInstructor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorFindFirstOrThrowArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseInstructorFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseInstructorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseInstructors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseInstructors
     * const courseInstructors = await prisma.courseInstructor.findMany()
     * 
     * // Get first 10 CourseInstructors
     * const courseInstructors = await prisma.courseInstructor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseInstructorWithIdOnly = await prisma.courseInstructor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseInstructorFindManyArgs>(args?: SelectSubset<T, CourseInstructorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseInstructor.
     * @param {CourseInstructorCreateArgs} args - Arguments to create a CourseInstructor.
     * @example
     * // Create one CourseInstructor
     * const CourseInstructor = await prisma.courseInstructor.create({
     *   data: {
     *     // ... data to create a CourseInstructor
     *   }
     * })
     * 
     */
    create<T extends CourseInstructorCreateArgs>(args: SelectSubset<T, CourseInstructorCreateArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseInstructors.
     * @param {CourseInstructorCreateManyArgs} args - Arguments to create many CourseInstructors.
     * @example
     * // Create many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseInstructorCreateManyArgs>(args?: SelectSubset<T, CourseInstructorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseInstructors and returns the data saved in the database.
     * @param {CourseInstructorCreateManyAndReturnArgs} args - Arguments to create many CourseInstructors.
     * @example
     * // Create many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseInstructors and only return the `id`
     * const courseInstructorWithIdOnly = await prisma.courseInstructor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseInstructorCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseInstructorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseInstructor.
     * @param {CourseInstructorDeleteArgs} args - Arguments to delete one CourseInstructor.
     * @example
     * // Delete one CourseInstructor
     * const CourseInstructor = await prisma.courseInstructor.delete({
     *   where: {
     *     // ... filter to delete one CourseInstructor
     *   }
     * })
     * 
     */
    delete<T extends CourseInstructorDeleteArgs>(args: SelectSubset<T, CourseInstructorDeleteArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseInstructor.
     * @param {CourseInstructorUpdateArgs} args - Arguments to update one CourseInstructor.
     * @example
     * // Update one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseInstructorUpdateArgs>(args: SelectSubset<T, CourseInstructorUpdateArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseInstructors.
     * @param {CourseInstructorDeleteManyArgs} args - Arguments to filter CourseInstructors to delete.
     * @example
     * // Delete a few CourseInstructors
     * const { count } = await prisma.courseInstructor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseInstructorDeleteManyArgs>(args?: SelectSubset<T, CourseInstructorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseInstructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseInstructorUpdateManyArgs>(args: SelectSubset<T, CourseInstructorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseInstructors and returns the data updated in the database.
     * @param {CourseInstructorUpdateManyAndReturnArgs} args - Arguments to update many CourseInstructors.
     * @example
     * // Update many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseInstructors and only return the `id`
     * const courseInstructorWithIdOnly = await prisma.courseInstructor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseInstructorUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseInstructorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseInstructor.
     * @param {CourseInstructorUpsertArgs} args - Arguments to update or create a CourseInstructor.
     * @example
     * // Update or create a CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.upsert({
     *   create: {
     *     // ... data to create a CourseInstructor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseInstructor we want to update
     *   }
     * })
     */
    upsert<T extends CourseInstructorUpsertArgs>(args: SelectSubset<T, CourseInstructorUpsertArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseInstructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorCountArgs} args - Arguments to filter CourseInstructors to count.
     * @example
     * // Count the number of CourseInstructors
     * const count = await prisma.courseInstructor.count({
     *   where: {
     *     // ... the filter for the CourseInstructors we want to count
     *   }
     * })
    **/
    count<T extends CourseInstructorCountArgs>(
      args?: Subset<T, CourseInstructorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseInstructorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseInstructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseInstructorAggregateArgs>(args: Subset<T, CourseInstructorAggregateArgs>): Prisma.PrismaPromise<GetCourseInstructorAggregateType<T>>

    /**
     * Group by CourseInstructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseInstructorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseInstructorGroupByArgs['orderBy'] }
        : { orderBy?: CourseInstructorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseInstructorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseInstructorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseInstructor model
   */
  readonly fields: CourseInstructorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseInstructor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseInstructorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends CourseInstructor$userArgs<ExtArgs> = {}>(args?: Subset<T, CourseInstructor$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends CourseInstructor$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, CourseInstructor$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends CourseInstructor$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, CourseInstructor$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    courseInstructor<T extends CourseInstructor$courseInstructorArgs<ExtArgs> = {}>(args?: Subset<T, CourseInstructor$courseInstructorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseInstructor model
   */
  interface CourseInstructorFieldRefs {
    readonly id: FieldRef<"CourseInstructor", 'Int'>
    readonly courseId: FieldRef<"CourseInstructor", 'Int'>
    readonly userId: FieldRef<"CourseInstructor", 'Int'>
    readonly fullName: FieldRef<"CourseInstructor", 'String'>
    readonly role: FieldRef<"CourseInstructor", 'Role'>
    readonly isActive: FieldRef<"CourseInstructor", 'Boolean'>
    readonly updatedBy: FieldRef<"CourseInstructor", 'Int'>
    readonly deletedBy: FieldRef<"CourseInstructor", 'Int'>
    readonly updatedAt: FieldRef<"CourseInstructor", 'DateTime'>
    readonly deletedAt: FieldRef<"CourseInstructor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseInstructor findUnique
   */
  export type CourseInstructorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor findUniqueOrThrow
   */
  export type CourseInstructorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor findFirst
   */
  export type CourseInstructorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseInstructors.
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseInstructors.
     */
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * CourseInstructor findFirstOrThrow
   */
  export type CourseInstructorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseInstructors.
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseInstructors.
     */
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * CourseInstructor findMany
   */
  export type CourseInstructorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructors to fetch.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseInstructors.
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * CourseInstructor create
   */
  export type CourseInstructorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseInstructor.
     */
    data: XOR<CourseInstructorCreateInput, CourseInstructorUncheckedCreateInput>
  }

  /**
   * CourseInstructor createMany
   */
  export type CourseInstructorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseInstructors.
     */
    data: CourseInstructorCreateManyInput | CourseInstructorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseInstructor createManyAndReturn
   */
  export type CourseInstructorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * The data used to create many CourseInstructors.
     */
    data: CourseInstructorCreateManyInput | CourseInstructorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseInstructor update
   */
  export type CourseInstructorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseInstructor.
     */
    data: XOR<CourseInstructorUpdateInput, CourseInstructorUncheckedUpdateInput>
    /**
     * Choose, which CourseInstructor to update.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor updateMany
   */
  export type CourseInstructorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseInstructors.
     */
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyInput>
    /**
     * Filter which CourseInstructors to update
     */
    where?: CourseInstructorWhereInput
    /**
     * Limit how many CourseInstructors to update.
     */
    limit?: number
  }

  /**
   * CourseInstructor updateManyAndReturn
   */
  export type CourseInstructorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * The data used to update CourseInstructors.
     */
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyInput>
    /**
     * Filter which CourseInstructors to update
     */
    where?: CourseInstructorWhereInput
    /**
     * Limit how many CourseInstructors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseInstructor upsert
   */
  export type CourseInstructorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseInstructor to update in case it exists.
     */
    where: CourseInstructorWhereUniqueInput
    /**
     * In case the CourseInstructor found by the `where` argument doesn't exist, create a new CourseInstructor with this data.
     */
    create: XOR<CourseInstructorCreateInput, CourseInstructorUncheckedCreateInput>
    /**
     * In case the CourseInstructor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseInstructorUpdateInput, CourseInstructorUncheckedUpdateInput>
  }

  /**
   * CourseInstructor delete
   */
  export type CourseInstructorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter which CourseInstructor to delete.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor deleteMany
   */
  export type CourseInstructorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseInstructors to delete
     */
    where?: CourseInstructorWhereInput
    /**
     * Limit how many CourseInstructors to delete.
     */
    limit?: number
  }

  /**
   * CourseInstructor.user
   */
  export type CourseInstructor$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CourseInstructor.updatedByUser
   */
  export type CourseInstructor$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CourseInstructor.deletedByUser
   */
  export type CourseInstructor$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CourseInstructor.courseInstructor
   */
  export type CourseInstructor$courseInstructorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * CourseInstructor without action
   */
  export type CourseInstructorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    fee: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    fee: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    imageUrl: string | null
    fee: number | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    imageUrl: string | null
    fee: number | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    description: number
    imageUrl: number
    fee: number
    isActive: number
    createdBy: number
    updatedBy: number
    deletedBy: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    categoryId?: true
    fee?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    categoryId?: true
    fee?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    imageUrl?: true
    fee?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    imageUrl?: true
    fee?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    imageUrl?: true
    fee?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive: boolean
    createdBy: number
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    fee?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Course$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Course$deletedByUserArgs<ExtArgs>
    courseInstructorCourseId?: boolean | Course$courseInstructorCourseIdArgs<ExtArgs>
    courseCompletionCourseId?: boolean | Course$courseCompletionCourseIdArgs<ExtArgs>
    lessonCourseId?: boolean | Course$lessonCourseIdArgs<ExtArgs>
    questionSetCourseId?: boolean | Course$questionSetCourseIdArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    fee?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Course$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Course$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    fee?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Course$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Course$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    fee?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "categoryId" | "name" | "description" | "imageUrl" | "fee" | "isActive" | "createdBy" | "updatedBy" | "deletedBy" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Course$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Course$deletedByUserArgs<ExtArgs>
    courseInstructorCourseId?: boolean | Course$courseInstructorCourseIdArgs<ExtArgs>
    courseCompletionCourseId?: boolean | Course$courseCompletionCourseIdArgs<ExtArgs>
    lessonCourseId?: boolean | Course$lessonCourseIdArgs<ExtArgs>
    questionSetCourseId?: boolean | Course$questionSetCourseIdArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Course$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Course$deletedByUserArgs<ExtArgs>
  }
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Course$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Course$deletedByUserArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      createdByUser: Prisma.$UserPayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      courseInstructorCourseId: Prisma.$CourseInstructorPayload<ExtArgs>[]
      courseCompletionCourseId: Prisma.$CourseCompletionPayload<ExtArgs>[]
      lessonCourseId: Prisma.$LessonPayload<ExtArgs>[]
      questionSetCourseId: Prisma.$QuestionSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      name: string
      description: string
      imageUrl: string
      /**
       * ค่าใช้จ่าย
       */
      fee: number
      isActive: boolean
      createdBy: number
      updatedBy: number | null
      deletedBy: number | null
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends Course$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Course$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends Course$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Course$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    courseInstructorCourseId<T extends Course$courseInstructorCourseIdArgs<ExtArgs> = {}>(args?: Subset<T, Course$courseInstructorCourseIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseCompletionCourseId<T extends Course$courseCompletionCourseIdArgs<ExtArgs> = {}>(args?: Subset<T, Course$courseCompletionCourseIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonCourseId<T extends Course$lessonCourseIdArgs<ExtArgs> = {}>(args?: Subset<T, Course$lessonCourseIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSetCourseId<T extends Course$questionSetCourseIdArgs<ExtArgs> = {}>(args?: Subset<T, Course$questionSetCourseIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly categoryId: FieldRef<"Course", 'Int'>
    readonly name: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly imageUrl: FieldRef<"Course", 'String'>
    readonly fee: FieldRef<"Course", 'Int'>
    readonly isActive: FieldRef<"Course", 'Boolean'>
    readonly createdBy: FieldRef<"Course", 'Int'>
    readonly updatedBy: FieldRef<"Course", 'Int'>
    readonly deletedBy: FieldRef<"Course", 'Int'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
    readonly deletedAt: FieldRef<"Course", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.updatedByUser
   */
  export type Course$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Course.deletedByUser
   */
  export type Course$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Course.courseInstructorCourseId
   */
  export type Course$courseInstructorCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    where?: CourseInstructorWhereInput
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    cursor?: CourseInstructorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * Course.courseCompletionCourseId
   */
  export type Course$courseCompletionCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    where?: CourseCompletionWhereInput
    orderBy?: CourseCompletionOrderByWithRelationInput | CourseCompletionOrderByWithRelationInput[]
    cursor?: CourseCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseCompletionScalarFieldEnum | CourseCompletionScalarFieldEnum[]
  }

  /**
   * Course.lessonCourseId
   */
  export type Course$lessonCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Course.questionSetCourseId
   */
  export type Course$questionSetCourseIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    isActive: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    organizationId: number
    name: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizationId" | "name" | "isActive" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizationId: number
      name: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly organizationId: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'String'>
    readonly isActive: FieldRef<"Department", 'Boolean'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
    readonly deletedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model LessonAttempt
   */

  export type AggregateLessonAttempt = {
    _count: LessonAttemptCountAggregateOutputType | null
    _avg: LessonAttemptAvgAggregateOutputType | null
    _sum: LessonAttemptSumAggregateOutputType | null
    _min: LessonAttemptMinAggregateOutputType | null
    _max: LessonAttemptMaxAggregateOutputType | null
  }

  export type LessonAttemptAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    attemptNo: number | null
  }

  export type LessonAttemptSumAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    attemptNo: number | null
  }

  export type LessonAttemptMinAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    attemptNo: number | null
    completedAt: Date | null
    createdAt: Date | null
  }

  export type LessonAttemptMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    attemptNo: number | null
    completedAt: Date | null
    createdAt: Date | null
  }

  export type LessonAttemptCountAggregateOutputType = {
    id: number
    userId: number
    lessonId: number
    attemptNo: number
    completedAt: number
    createdAt: number
    _all: number
  }


  export type LessonAttemptAvgAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    attemptNo?: true
  }

  export type LessonAttemptSumAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    attemptNo?: true
  }

  export type LessonAttemptMinAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    attemptNo?: true
    completedAt?: true
    createdAt?: true
  }

  export type LessonAttemptMaxAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    attemptNo?: true
    completedAt?: true
    createdAt?: true
  }

  export type LessonAttemptCountAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    attemptNo?: true
    completedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LessonAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonAttempt to aggregate.
     */
    where?: LessonAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonAttempts to fetch.
     */
    orderBy?: LessonAttemptOrderByWithRelationInput | LessonAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LessonAttempts
    **/
    _count?: true | LessonAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonAttemptMaxAggregateInputType
  }

  export type GetLessonAttemptAggregateType<T extends LessonAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateLessonAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessonAttempt[P]>
      : GetScalarType<T[P], AggregateLessonAttempt[P]>
  }




  export type LessonAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonAttemptWhereInput
    orderBy?: LessonAttemptOrderByWithAggregationInput | LessonAttemptOrderByWithAggregationInput[]
    by: LessonAttemptScalarFieldEnum[] | LessonAttemptScalarFieldEnum
    having?: LessonAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonAttemptCountAggregateInputType | true
    _avg?: LessonAttemptAvgAggregateInputType
    _sum?: LessonAttemptSumAggregateInputType
    _min?: LessonAttemptMinAggregateInputType
    _max?: LessonAttemptMaxAggregateInputType
  }

  export type LessonAttemptGroupByOutputType = {
    id: number
    userId: number
    lessonId: number
    attemptNo: number
    completedAt: Date | null
    createdAt: Date
    _count: LessonAttemptCountAggregateOutputType | null
    _avg: LessonAttemptAvgAggregateOutputType | null
    _sum: LessonAttemptSumAggregateOutputType | null
    _min: LessonAttemptMinAggregateOutputType | null
    _max: LessonAttemptMaxAggregateOutputType | null
  }

  type GetLessonAttemptGroupByPayload<T extends LessonAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], LessonAttemptGroupByOutputType[P]>
        }
      >
    >


  export type LessonAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    createdAt?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonAttempt"]>

  export type LessonAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    createdAt?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonAttempt"]>

  export type LessonAttemptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    createdAt?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonAttempt"]>

  export type LessonAttemptSelectScalar = {
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    createdAt?: boolean
  }

  export type LessonAttemptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "lessonId" | "attemptNo" | "completedAt" | "createdAt", ExtArgs["result"]["lessonAttempt"]>
  export type LessonAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }
  export type LessonAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }
  export type LessonAttemptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }

  export type $LessonAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LessonAttempt"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
      lessons: Prisma.$LessonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      lessonId: number
      /**
       * จำนวนรอบที่เรียน
       */
      attemptNo: number
      completedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["lessonAttempt"]>
    composites: {}
  }

  type LessonAttemptGetPayload<S extends boolean | null | undefined | LessonAttemptDefaultArgs> = $Result.GetResult<Prisma.$LessonAttemptPayload, S>

  type LessonAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonAttemptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonAttemptCountAggregateInputType | true
    }

  export interface LessonAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonAttempt'], meta: { name: 'LessonAttempt' } }
    /**
     * Find zero or one LessonAttempt that matches the filter.
     * @param {LessonAttemptFindUniqueArgs} args - Arguments to find a LessonAttempt
     * @example
     * // Get one LessonAttempt
     * const lessonAttempt = await prisma.lessonAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonAttemptFindUniqueArgs>(args: SelectSubset<T, LessonAttemptFindUniqueArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LessonAttempt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonAttemptFindUniqueOrThrowArgs} args - Arguments to find a LessonAttempt
     * @example
     * // Get one LessonAttempt
     * const lessonAttempt = await prisma.lessonAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptFindFirstArgs} args - Arguments to find a LessonAttempt
     * @example
     * // Get one LessonAttempt
     * const lessonAttempt = await prisma.lessonAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonAttemptFindFirstArgs>(args?: SelectSubset<T, LessonAttemptFindFirstArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptFindFirstOrThrowArgs} args - Arguments to find a LessonAttempt
     * @example
     * // Get one LessonAttempt
     * const lessonAttempt = await prisma.lessonAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LessonAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LessonAttempts
     * const lessonAttempts = await prisma.lessonAttempt.findMany()
     * 
     * // Get first 10 LessonAttempts
     * const lessonAttempts = await prisma.lessonAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonAttemptWithIdOnly = await prisma.lessonAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonAttemptFindManyArgs>(args?: SelectSubset<T, LessonAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LessonAttempt.
     * @param {LessonAttemptCreateArgs} args - Arguments to create a LessonAttempt.
     * @example
     * // Create one LessonAttempt
     * const LessonAttempt = await prisma.lessonAttempt.create({
     *   data: {
     *     // ... data to create a LessonAttempt
     *   }
     * })
     * 
     */
    create<T extends LessonAttemptCreateArgs>(args: SelectSubset<T, LessonAttemptCreateArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LessonAttempts.
     * @param {LessonAttemptCreateManyArgs} args - Arguments to create many LessonAttempts.
     * @example
     * // Create many LessonAttempts
     * const lessonAttempt = await prisma.lessonAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonAttemptCreateManyArgs>(args?: SelectSubset<T, LessonAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LessonAttempts and returns the data saved in the database.
     * @param {LessonAttemptCreateManyAndReturnArgs} args - Arguments to create many LessonAttempts.
     * @example
     * // Create many LessonAttempts
     * const lessonAttempt = await prisma.lessonAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LessonAttempts and only return the `id`
     * const lessonAttemptWithIdOnly = await prisma.lessonAttempt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LessonAttempt.
     * @param {LessonAttemptDeleteArgs} args - Arguments to delete one LessonAttempt.
     * @example
     * // Delete one LessonAttempt
     * const LessonAttempt = await prisma.lessonAttempt.delete({
     *   where: {
     *     // ... filter to delete one LessonAttempt
     *   }
     * })
     * 
     */
    delete<T extends LessonAttemptDeleteArgs>(args: SelectSubset<T, LessonAttemptDeleteArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LessonAttempt.
     * @param {LessonAttemptUpdateArgs} args - Arguments to update one LessonAttempt.
     * @example
     * // Update one LessonAttempt
     * const lessonAttempt = await prisma.lessonAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonAttemptUpdateArgs>(args: SelectSubset<T, LessonAttemptUpdateArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LessonAttempts.
     * @param {LessonAttemptDeleteManyArgs} args - Arguments to filter LessonAttempts to delete.
     * @example
     * // Delete a few LessonAttempts
     * const { count } = await prisma.lessonAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonAttemptDeleteManyArgs>(args?: SelectSubset<T, LessonAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LessonAttempts
     * const lessonAttempt = await prisma.lessonAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonAttemptUpdateManyArgs>(args: SelectSubset<T, LessonAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonAttempts and returns the data updated in the database.
     * @param {LessonAttemptUpdateManyAndReturnArgs} args - Arguments to update many LessonAttempts.
     * @example
     * // Update many LessonAttempts
     * const lessonAttempt = await prisma.lessonAttempt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LessonAttempts and only return the `id`
     * const lessonAttemptWithIdOnly = await prisma.lessonAttempt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonAttemptUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonAttemptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LessonAttempt.
     * @param {LessonAttemptUpsertArgs} args - Arguments to update or create a LessonAttempt.
     * @example
     * // Update or create a LessonAttempt
     * const lessonAttempt = await prisma.lessonAttempt.upsert({
     *   create: {
     *     // ... data to create a LessonAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LessonAttempt we want to update
     *   }
     * })
     */
    upsert<T extends LessonAttemptUpsertArgs>(args: SelectSubset<T, LessonAttemptUpsertArgs<ExtArgs>>): Prisma__LessonAttemptClient<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LessonAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptCountArgs} args - Arguments to filter LessonAttempts to count.
     * @example
     * // Count the number of LessonAttempts
     * const count = await prisma.lessonAttempt.count({
     *   where: {
     *     // ... the filter for the LessonAttempts we want to count
     *   }
     * })
    **/
    count<T extends LessonAttemptCountArgs>(
      args?: Subset<T, LessonAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LessonAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonAttemptAggregateArgs>(args: Subset<T, LessonAttemptAggregateArgs>): Prisma.PrismaPromise<GetLessonAttemptAggregateType<T>>

    /**
     * Group by LessonAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonAttemptGroupByArgs['orderBy'] }
        : { orderBy?: LessonAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LessonAttempt model
   */
  readonly fields: LessonAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LessonAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lessons<T extends LessonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonDefaultArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LessonAttempt model
   */
  interface LessonAttemptFieldRefs {
    readonly id: FieldRef<"LessonAttempt", 'Int'>
    readonly userId: FieldRef<"LessonAttempt", 'Int'>
    readonly lessonId: FieldRef<"LessonAttempt", 'Int'>
    readonly attemptNo: FieldRef<"LessonAttempt", 'Int'>
    readonly completedAt: FieldRef<"LessonAttempt", 'DateTime'>
    readonly createdAt: FieldRef<"LessonAttempt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LessonAttempt findUnique
   */
  export type LessonAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LessonAttempt to fetch.
     */
    where: LessonAttemptWhereUniqueInput
  }

  /**
   * LessonAttempt findUniqueOrThrow
   */
  export type LessonAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LessonAttempt to fetch.
     */
    where: LessonAttemptWhereUniqueInput
  }

  /**
   * LessonAttempt findFirst
   */
  export type LessonAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LessonAttempt to fetch.
     */
    where?: LessonAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonAttempts to fetch.
     */
    orderBy?: LessonAttemptOrderByWithRelationInput | LessonAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonAttempts.
     */
    cursor?: LessonAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonAttempts.
     */
    distinct?: LessonAttemptScalarFieldEnum | LessonAttemptScalarFieldEnum[]
  }

  /**
   * LessonAttempt findFirstOrThrow
   */
  export type LessonAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LessonAttempt to fetch.
     */
    where?: LessonAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonAttempts to fetch.
     */
    orderBy?: LessonAttemptOrderByWithRelationInput | LessonAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonAttempts.
     */
    cursor?: LessonAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonAttempts.
     */
    distinct?: LessonAttemptScalarFieldEnum | LessonAttemptScalarFieldEnum[]
  }

  /**
   * LessonAttempt findMany
   */
  export type LessonAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LessonAttempts to fetch.
     */
    where?: LessonAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonAttempts to fetch.
     */
    orderBy?: LessonAttemptOrderByWithRelationInput | LessonAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LessonAttempts.
     */
    cursor?: LessonAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonAttempts.
     */
    skip?: number
    distinct?: LessonAttemptScalarFieldEnum | LessonAttemptScalarFieldEnum[]
  }

  /**
   * LessonAttempt create
   */
  export type LessonAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a LessonAttempt.
     */
    data: XOR<LessonAttemptCreateInput, LessonAttemptUncheckedCreateInput>
  }

  /**
   * LessonAttempt createMany
   */
  export type LessonAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LessonAttempts.
     */
    data: LessonAttemptCreateManyInput | LessonAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonAttempt createManyAndReturn
   */
  export type LessonAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * The data used to create many LessonAttempts.
     */
    data: LessonAttemptCreateManyInput | LessonAttemptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonAttempt update
   */
  export type LessonAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a LessonAttempt.
     */
    data: XOR<LessonAttemptUpdateInput, LessonAttemptUncheckedUpdateInput>
    /**
     * Choose, which LessonAttempt to update.
     */
    where: LessonAttemptWhereUniqueInput
  }

  /**
   * LessonAttempt updateMany
   */
  export type LessonAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LessonAttempts.
     */
    data: XOR<LessonAttemptUpdateManyMutationInput, LessonAttemptUncheckedUpdateManyInput>
    /**
     * Filter which LessonAttempts to update
     */
    where?: LessonAttemptWhereInput
    /**
     * Limit how many LessonAttempts to update.
     */
    limit?: number
  }

  /**
   * LessonAttempt updateManyAndReturn
   */
  export type LessonAttemptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * The data used to update LessonAttempts.
     */
    data: XOR<LessonAttemptUpdateManyMutationInput, LessonAttemptUncheckedUpdateManyInput>
    /**
     * Filter which LessonAttempts to update
     */
    where?: LessonAttemptWhereInput
    /**
     * Limit how many LessonAttempts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonAttempt upsert
   */
  export type LessonAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the LessonAttempt to update in case it exists.
     */
    where: LessonAttemptWhereUniqueInput
    /**
     * In case the LessonAttempt found by the `where` argument doesn't exist, create a new LessonAttempt with this data.
     */
    create: XOR<LessonAttemptCreateInput, LessonAttemptUncheckedCreateInput>
    /**
     * In case the LessonAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonAttemptUpdateInput, LessonAttemptUncheckedUpdateInput>
  }

  /**
   * LessonAttempt delete
   */
  export type LessonAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    /**
     * Filter which LessonAttempt to delete.
     */
    where: LessonAttemptWhereUniqueInput
  }

  /**
   * LessonAttempt deleteMany
   */
  export type LessonAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonAttempts to delete
     */
    where?: LessonAttemptWhereInput
    /**
     * Limit how many LessonAttempts to delete.
     */
    limit?: number
  }

  /**
   * LessonAttempt without action
   */
  export type LessonAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
  }


  /**
   * Model LessonContentType
   */

  export type AggregateLessonContentType = {
    _count: LessonContentTypeCountAggregateOutputType | null
    _avg: LessonContentTypeAvgAggregateOutputType | null
    _sum: LessonContentTypeSumAggregateOutputType | null
    _min: LessonContentTypeMinAggregateOutputType | null
    _max: LessonContentTypeMaxAggregateOutputType | null
  }

  export type LessonContentTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type LessonContentTypeSumAggregateOutputType = {
    id: number | null
  }

  export type LessonContentTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LessonContentTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LessonContentTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type LessonContentTypeAvgAggregateInputType = {
    id?: true
  }

  export type LessonContentTypeSumAggregateInputType = {
    id?: true
  }

  export type LessonContentTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type LessonContentTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type LessonContentTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type LessonContentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonContentType to aggregate.
     */
    where?: LessonContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContentTypes to fetch.
     */
    orderBy?: LessonContentTypeOrderByWithRelationInput | LessonContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LessonContentTypes
    **/
    _count?: true | LessonContentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonContentTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonContentTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonContentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonContentTypeMaxAggregateInputType
  }

  export type GetLessonContentTypeAggregateType<T extends LessonContentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLessonContentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessonContentType[P]>
      : GetScalarType<T[P], AggregateLessonContentType[P]>
  }




  export type LessonContentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonContentTypeWhereInput
    orderBy?: LessonContentTypeOrderByWithAggregationInput | LessonContentTypeOrderByWithAggregationInput[]
    by: LessonContentTypeScalarFieldEnum[] | LessonContentTypeScalarFieldEnum
    having?: LessonContentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonContentTypeCountAggregateInputType | true
    _avg?: LessonContentTypeAvgAggregateInputType
    _sum?: LessonContentTypeSumAggregateInputType
    _min?: LessonContentTypeMinAggregateInputType
    _max?: LessonContentTypeMaxAggregateInputType
  }

  export type LessonContentTypeGroupByOutputType = {
    id: number
    name: string
    _count: LessonContentTypeCountAggregateOutputType | null
    _avg: LessonContentTypeAvgAggregateOutputType | null
    _sum: LessonContentTypeSumAggregateOutputType | null
    _min: LessonContentTypeMinAggregateOutputType | null
    _max: LessonContentTypeMaxAggregateOutputType | null
  }

  type GetLessonContentTypeGroupByPayload<T extends LessonContentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonContentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonContentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonContentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LessonContentTypeGroupByOutputType[P]>
        }
      >
    >


  export type LessonContentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lessonContent?: boolean | LessonContentType$lessonContentArgs<ExtArgs>
    _count?: boolean | LessonContentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonContentType"]>

  export type LessonContentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["lessonContentType"]>

  export type LessonContentTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["lessonContentType"]>

  export type LessonContentTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type LessonContentTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["lessonContentType"]>
  export type LessonContentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessonContent?: boolean | LessonContentType$lessonContentArgs<ExtArgs>
    _count?: boolean | LessonContentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LessonContentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LessonContentTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LessonContentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LessonContentType"
    objects: {
      lessonContent: Prisma.$LessonContentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["lessonContentType"]>
    composites: {}
  }

  type LessonContentTypeGetPayload<S extends boolean | null | undefined | LessonContentTypeDefaultArgs> = $Result.GetResult<Prisma.$LessonContentTypePayload, S>

  type LessonContentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonContentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonContentTypeCountAggregateInputType | true
    }

  export interface LessonContentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonContentType'], meta: { name: 'LessonContentType' } }
    /**
     * Find zero or one LessonContentType that matches the filter.
     * @param {LessonContentTypeFindUniqueArgs} args - Arguments to find a LessonContentType
     * @example
     * // Get one LessonContentType
     * const lessonContentType = await prisma.lessonContentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonContentTypeFindUniqueArgs>(args: SelectSubset<T, LessonContentTypeFindUniqueArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LessonContentType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonContentTypeFindUniqueOrThrowArgs} args - Arguments to find a LessonContentType
     * @example
     * // Get one LessonContentType
     * const lessonContentType = await prisma.lessonContentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonContentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonContentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonContentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeFindFirstArgs} args - Arguments to find a LessonContentType
     * @example
     * // Get one LessonContentType
     * const lessonContentType = await prisma.lessonContentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonContentTypeFindFirstArgs>(args?: SelectSubset<T, LessonContentTypeFindFirstArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonContentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeFindFirstOrThrowArgs} args - Arguments to find a LessonContentType
     * @example
     * // Get one LessonContentType
     * const lessonContentType = await prisma.lessonContentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonContentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonContentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LessonContentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LessonContentTypes
     * const lessonContentTypes = await prisma.lessonContentType.findMany()
     * 
     * // Get first 10 LessonContentTypes
     * const lessonContentTypes = await prisma.lessonContentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonContentTypeWithIdOnly = await prisma.lessonContentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonContentTypeFindManyArgs>(args?: SelectSubset<T, LessonContentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LessonContentType.
     * @param {LessonContentTypeCreateArgs} args - Arguments to create a LessonContentType.
     * @example
     * // Create one LessonContentType
     * const LessonContentType = await prisma.lessonContentType.create({
     *   data: {
     *     // ... data to create a LessonContentType
     *   }
     * })
     * 
     */
    create<T extends LessonContentTypeCreateArgs>(args: SelectSubset<T, LessonContentTypeCreateArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LessonContentTypes.
     * @param {LessonContentTypeCreateManyArgs} args - Arguments to create many LessonContentTypes.
     * @example
     * // Create many LessonContentTypes
     * const lessonContentType = await prisma.lessonContentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonContentTypeCreateManyArgs>(args?: SelectSubset<T, LessonContentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LessonContentTypes and returns the data saved in the database.
     * @param {LessonContentTypeCreateManyAndReturnArgs} args - Arguments to create many LessonContentTypes.
     * @example
     * // Create many LessonContentTypes
     * const lessonContentType = await prisma.lessonContentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LessonContentTypes and only return the `id`
     * const lessonContentTypeWithIdOnly = await prisma.lessonContentType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonContentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonContentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LessonContentType.
     * @param {LessonContentTypeDeleteArgs} args - Arguments to delete one LessonContentType.
     * @example
     * // Delete one LessonContentType
     * const LessonContentType = await prisma.lessonContentType.delete({
     *   where: {
     *     // ... filter to delete one LessonContentType
     *   }
     * })
     * 
     */
    delete<T extends LessonContentTypeDeleteArgs>(args: SelectSubset<T, LessonContentTypeDeleteArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LessonContentType.
     * @param {LessonContentTypeUpdateArgs} args - Arguments to update one LessonContentType.
     * @example
     * // Update one LessonContentType
     * const lessonContentType = await prisma.lessonContentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonContentTypeUpdateArgs>(args: SelectSubset<T, LessonContentTypeUpdateArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LessonContentTypes.
     * @param {LessonContentTypeDeleteManyArgs} args - Arguments to filter LessonContentTypes to delete.
     * @example
     * // Delete a few LessonContentTypes
     * const { count } = await prisma.lessonContentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonContentTypeDeleteManyArgs>(args?: SelectSubset<T, LessonContentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonContentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LessonContentTypes
     * const lessonContentType = await prisma.lessonContentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonContentTypeUpdateManyArgs>(args: SelectSubset<T, LessonContentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonContentTypes and returns the data updated in the database.
     * @param {LessonContentTypeUpdateManyAndReturnArgs} args - Arguments to update many LessonContentTypes.
     * @example
     * // Update many LessonContentTypes
     * const lessonContentType = await prisma.lessonContentType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LessonContentTypes and only return the `id`
     * const lessonContentTypeWithIdOnly = await prisma.lessonContentType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonContentTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonContentTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LessonContentType.
     * @param {LessonContentTypeUpsertArgs} args - Arguments to update or create a LessonContentType.
     * @example
     * // Update or create a LessonContentType
     * const lessonContentType = await prisma.lessonContentType.upsert({
     *   create: {
     *     // ... data to create a LessonContentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LessonContentType we want to update
     *   }
     * })
     */
    upsert<T extends LessonContentTypeUpsertArgs>(args: SelectSubset<T, LessonContentTypeUpsertArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LessonContentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeCountArgs} args - Arguments to filter LessonContentTypes to count.
     * @example
     * // Count the number of LessonContentTypes
     * const count = await prisma.lessonContentType.count({
     *   where: {
     *     // ... the filter for the LessonContentTypes we want to count
     *   }
     * })
    **/
    count<T extends LessonContentTypeCountArgs>(
      args?: Subset<T, LessonContentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonContentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LessonContentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonContentTypeAggregateArgs>(args: Subset<T, LessonContentTypeAggregateArgs>): Prisma.PrismaPromise<GetLessonContentTypeAggregateType<T>>

    /**
     * Group by LessonContentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonContentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonContentTypeGroupByArgs['orderBy'] }
        : { orderBy?: LessonContentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonContentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonContentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LessonContentType model
   */
  readonly fields: LessonContentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LessonContentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonContentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lessonContent<T extends LessonContentType$lessonContentArgs<ExtArgs> = {}>(args?: Subset<T, LessonContentType$lessonContentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LessonContentType model
   */
  interface LessonContentTypeFieldRefs {
    readonly id: FieldRef<"LessonContentType", 'Int'>
    readonly name: FieldRef<"LessonContentType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LessonContentType findUnique
   */
  export type LessonContentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonContentType to fetch.
     */
    where: LessonContentTypeWhereUniqueInput
  }

  /**
   * LessonContentType findUniqueOrThrow
   */
  export type LessonContentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonContentType to fetch.
     */
    where: LessonContentTypeWhereUniqueInput
  }

  /**
   * LessonContentType findFirst
   */
  export type LessonContentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonContentType to fetch.
     */
    where?: LessonContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContentTypes to fetch.
     */
    orderBy?: LessonContentTypeOrderByWithRelationInput | LessonContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonContentTypes.
     */
    cursor?: LessonContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonContentTypes.
     */
    distinct?: LessonContentTypeScalarFieldEnum | LessonContentTypeScalarFieldEnum[]
  }

  /**
   * LessonContentType findFirstOrThrow
   */
  export type LessonContentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonContentType to fetch.
     */
    where?: LessonContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContentTypes to fetch.
     */
    orderBy?: LessonContentTypeOrderByWithRelationInput | LessonContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonContentTypes.
     */
    cursor?: LessonContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonContentTypes.
     */
    distinct?: LessonContentTypeScalarFieldEnum | LessonContentTypeScalarFieldEnum[]
  }

  /**
   * LessonContentType findMany
   */
  export type LessonContentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonContentTypes to fetch.
     */
    where?: LessonContentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContentTypes to fetch.
     */
    orderBy?: LessonContentTypeOrderByWithRelationInput | LessonContentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LessonContentTypes.
     */
    cursor?: LessonContentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContentTypes.
     */
    skip?: number
    distinct?: LessonContentTypeScalarFieldEnum | LessonContentTypeScalarFieldEnum[]
  }

  /**
   * LessonContentType create
   */
  export type LessonContentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a LessonContentType.
     */
    data: XOR<LessonContentTypeCreateInput, LessonContentTypeUncheckedCreateInput>
  }

  /**
   * LessonContentType createMany
   */
  export type LessonContentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LessonContentTypes.
     */
    data: LessonContentTypeCreateManyInput | LessonContentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonContentType createManyAndReturn
   */
  export type LessonContentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * The data used to create many LessonContentTypes.
     */
    data: LessonContentTypeCreateManyInput | LessonContentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonContentType update
   */
  export type LessonContentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a LessonContentType.
     */
    data: XOR<LessonContentTypeUpdateInput, LessonContentTypeUncheckedUpdateInput>
    /**
     * Choose, which LessonContentType to update.
     */
    where: LessonContentTypeWhereUniqueInput
  }

  /**
   * LessonContentType updateMany
   */
  export type LessonContentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LessonContentTypes.
     */
    data: XOR<LessonContentTypeUpdateManyMutationInput, LessonContentTypeUncheckedUpdateManyInput>
    /**
     * Filter which LessonContentTypes to update
     */
    where?: LessonContentTypeWhereInput
    /**
     * Limit how many LessonContentTypes to update.
     */
    limit?: number
  }

  /**
   * LessonContentType updateManyAndReturn
   */
  export type LessonContentTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * The data used to update LessonContentTypes.
     */
    data: XOR<LessonContentTypeUpdateManyMutationInput, LessonContentTypeUncheckedUpdateManyInput>
    /**
     * Filter which LessonContentTypes to update
     */
    where?: LessonContentTypeWhereInput
    /**
     * Limit how many LessonContentTypes to update.
     */
    limit?: number
  }

  /**
   * LessonContentType upsert
   */
  export type LessonContentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the LessonContentType to update in case it exists.
     */
    where: LessonContentTypeWhereUniqueInput
    /**
     * In case the LessonContentType found by the `where` argument doesn't exist, create a new LessonContentType with this data.
     */
    create: XOR<LessonContentTypeCreateInput, LessonContentTypeUncheckedCreateInput>
    /**
     * In case the LessonContentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonContentTypeUpdateInput, LessonContentTypeUncheckedUpdateInput>
  }

  /**
   * LessonContentType delete
   */
  export type LessonContentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
    /**
     * Filter which LessonContentType to delete.
     */
    where: LessonContentTypeWhereUniqueInput
  }

  /**
   * LessonContentType deleteMany
   */
  export type LessonContentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonContentTypes to delete
     */
    where?: LessonContentTypeWhereInput
    /**
     * Limit how many LessonContentTypes to delete.
     */
    limit?: number
  }

  /**
   * LessonContentType.lessonContent
   */
  export type LessonContentType$lessonContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    where?: LessonContentWhereInput
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    cursor?: LessonContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * LessonContentType without action
   */
  export type LessonContentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContentType
     */
    select?: LessonContentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContentType
     */
    omit?: LessonContentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentTypeInclude<ExtArgs> | null
  }


  /**
   * Model LessonContent
   */

  export type AggregateLessonContent = {
    _count: LessonContentCountAggregateOutputType | null
    _avg: LessonContentAvgAggregateOutputType | null
    _sum: LessonContentSumAggregateOutputType | null
    _min: LessonContentMinAggregateOutputType | null
    _max: LessonContentMaxAggregateOutputType | null
  }

  export type LessonContentAvgAggregateOutputType = {
    id: number | null
    lessonId: number | null
    contentTypeId: number | null
    duration: number | null
    pages: number | null
    sortOrder: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type LessonContentSumAggregateOutputType = {
    id: number | null
    lessonId: number | null
    contentTypeId: number | null
    duration: number | null
    pages: number | null
    sortOrder: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type LessonContentMinAggregateOutputType = {
    id: number | null
    lessonId: number | null
    contentTypeId: number | null
    contentUrl: string | null
    duration: number | null
    pages: number | null
    sortOrder: number | null
    isActive: boolean | null
    updatedBy: number | null
    deletedBy: number | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LessonContentMaxAggregateOutputType = {
    id: number | null
    lessonId: number | null
    contentTypeId: number | null
    contentUrl: string | null
    duration: number | null
    pages: number | null
    sortOrder: number | null
    isActive: boolean | null
    updatedBy: number | null
    deletedBy: number | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LessonContentCountAggregateOutputType = {
    id: number
    lessonId: number
    contentTypeId: number
    contentUrl: number
    duration: number
    pages: number
    sortOrder: number
    isActive: number
    updatedBy: number
    deletedBy: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type LessonContentAvgAggregateInputType = {
    id?: true
    lessonId?: true
    contentTypeId?: true
    duration?: true
    pages?: true
    sortOrder?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type LessonContentSumAggregateInputType = {
    id?: true
    lessonId?: true
    contentTypeId?: true
    duration?: true
    pages?: true
    sortOrder?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type LessonContentMinAggregateInputType = {
    id?: true
    lessonId?: true
    contentTypeId?: true
    contentUrl?: true
    duration?: true
    pages?: true
    sortOrder?: true
    isActive?: true
    updatedBy?: true
    deletedBy?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LessonContentMaxAggregateInputType = {
    id?: true
    lessonId?: true
    contentTypeId?: true
    contentUrl?: true
    duration?: true
    pages?: true
    sortOrder?: true
    isActive?: true
    updatedBy?: true
    deletedBy?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LessonContentCountAggregateInputType = {
    id?: true
    lessonId?: true
    contentTypeId?: true
    contentUrl?: true
    duration?: true
    pages?: true
    sortOrder?: true
    isActive?: true
    updatedBy?: true
    deletedBy?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LessonContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonContent to aggregate.
     */
    where?: LessonContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContents to fetch.
     */
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LessonContents
    **/
    _count?: true | LessonContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonContentMaxAggregateInputType
  }

  export type GetLessonContentAggregateType<T extends LessonContentAggregateArgs> = {
        [P in keyof T & keyof AggregateLessonContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessonContent[P]>
      : GetScalarType<T[P], AggregateLessonContent[P]>
  }




  export type LessonContentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonContentWhereInput
    orderBy?: LessonContentOrderByWithAggregationInput | LessonContentOrderByWithAggregationInput[]
    by: LessonContentScalarFieldEnum[] | LessonContentScalarFieldEnum
    having?: LessonContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonContentCountAggregateInputType | true
    _avg?: LessonContentAvgAggregateInputType
    _sum?: LessonContentSumAggregateInputType
    _min?: LessonContentMinAggregateInputType
    _max?: LessonContentMaxAggregateInputType
  }

  export type LessonContentGroupByOutputType = {
    id: number
    lessonId: number
    contentTypeId: number
    contentUrl: string | null
    duration: number | null
    pages: number | null
    sortOrder: number
    isActive: boolean
    updatedBy: number | null
    deletedBy: number | null
    updatedAt: Date | null
    deletedAt: Date | null
    _count: LessonContentCountAggregateOutputType | null
    _avg: LessonContentAvgAggregateOutputType | null
    _sum: LessonContentSumAggregateOutputType | null
    _min: LessonContentMinAggregateOutputType | null
    _max: LessonContentMaxAggregateOutputType | null
  }

  type GetLessonContentGroupByPayload<T extends LessonContentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonContentGroupByOutputType[P]>
            : GetScalarType<T[P], LessonContentGroupByOutputType[P]>
        }
      >
    >


  export type LessonContentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonId?: boolean
    contentTypeId?: boolean
    contentUrl?: boolean
    duration?: boolean
    pages?: boolean
    sortOrder?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    lessonContentType?: boolean | LessonContentTypeDefaultArgs<ExtArgs>
    updatedByUser?: boolean | LessonContent$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | LessonContent$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["lessonContent"]>

  export type LessonContentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonId?: boolean
    contentTypeId?: boolean
    contentUrl?: boolean
    duration?: boolean
    pages?: boolean
    sortOrder?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    lessonContentType?: boolean | LessonContentTypeDefaultArgs<ExtArgs>
    updatedByUser?: boolean | LessonContent$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | LessonContent$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["lessonContent"]>

  export type LessonContentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonId?: boolean
    contentTypeId?: boolean
    contentUrl?: boolean
    duration?: boolean
    pages?: boolean
    sortOrder?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    lessonContentType?: boolean | LessonContentTypeDefaultArgs<ExtArgs>
    updatedByUser?: boolean | LessonContent$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | LessonContent$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["lessonContent"]>

  export type LessonContentSelectScalar = {
    id?: boolean
    lessonId?: boolean
    contentTypeId?: boolean
    contentUrl?: boolean
    duration?: boolean
    pages?: boolean
    sortOrder?: boolean
    isActive?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type LessonContentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lessonId" | "contentTypeId" | "contentUrl" | "duration" | "pages" | "sortOrder" | "isActive" | "updatedBy" | "deletedBy" | "updatedAt" | "deletedAt", ExtArgs["result"]["lessonContent"]>
  export type LessonContentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    lessonContentType?: boolean | LessonContentTypeDefaultArgs<ExtArgs>
    updatedByUser?: boolean | LessonContent$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | LessonContent$deletedByUserArgs<ExtArgs>
  }
  export type LessonContentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    lessonContentType?: boolean | LessonContentTypeDefaultArgs<ExtArgs>
    updatedByUser?: boolean | LessonContent$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | LessonContent$deletedByUserArgs<ExtArgs>
  }
  export type LessonContentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    lessonContentType?: boolean | LessonContentTypeDefaultArgs<ExtArgs>
    updatedByUser?: boolean | LessonContent$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | LessonContent$deletedByUserArgs<ExtArgs>
  }

  export type $LessonContentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LessonContent"
    objects: {
      lesson: Prisma.$LessonPayload<ExtArgs>
      lessonContentType: Prisma.$LessonContentTypePayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lessonId: number
      contentTypeId: number
      contentUrl: string | null
      /**
       * เวลาวิดีโอ (วินาที)
       */
      duration: number | null
      /**
       * จำนวนหน้า
       */
      pages: number | null
      sortOrder: number
      isActive: boolean
      updatedBy: number | null
      deletedBy: number | null
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["lessonContent"]>
    composites: {}
  }

  type LessonContentGetPayload<S extends boolean | null | undefined | LessonContentDefaultArgs> = $Result.GetResult<Prisma.$LessonContentPayload, S>

  type LessonContentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonContentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonContentCountAggregateInputType | true
    }

  export interface LessonContentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonContent'], meta: { name: 'LessonContent' } }
    /**
     * Find zero or one LessonContent that matches the filter.
     * @param {LessonContentFindUniqueArgs} args - Arguments to find a LessonContent
     * @example
     * // Get one LessonContent
     * const lessonContent = await prisma.lessonContent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonContentFindUniqueArgs>(args: SelectSubset<T, LessonContentFindUniqueArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LessonContent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonContentFindUniqueOrThrowArgs} args - Arguments to find a LessonContent
     * @example
     * // Get one LessonContent
     * const lessonContent = await prisma.lessonContent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonContentFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonContentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonContent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentFindFirstArgs} args - Arguments to find a LessonContent
     * @example
     * // Get one LessonContent
     * const lessonContent = await prisma.lessonContent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonContentFindFirstArgs>(args?: SelectSubset<T, LessonContentFindFirstArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonContent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentFindFirstOrThrowArgs} args - Arguments to find a LessonContent
     * @example
     * // Get one LessonContent
     * const lessonContent = await prisma.lessonContent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonContentFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonContentFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LessonContents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LessonContents
     * const lessonContents = await prisma.lessonContent.findMany()
     * 
     * // Get first 10 LessonContents
     * const lessonContents = await prisma.lessonContent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonContentWithIdOnly = await prisma.lessonContent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonContentFindManyArgs>(args?: SelectSubset<T, LessonContentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LessonContent.
     * @param {LessonContentCreateArgs} args - Arguments to create a LessonContent.
     * @example
     * // Create one LessonContent
     * const LessonContent = await prisma.lessonContent.create({
     *   data: {
     *     // ... data to create a LessonContent
     *   }
     * })
     * 
     */
    create<T extends LessonContentCreateArgs>(args: SelectSubset<T, LessonContentCreateArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LessonContents.
     * @param {LessonContentCreateManyArgs} args - Arguments to create many LessonContents.
     * @example
     * // Create many LessonContents
     * const lessonContent = await prisma.lessonContent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonContentCreateManyArgs>(args?: SelectSubset<T, LessonContentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LessonContents and returns the data saved in the database.
     * @param {LessonContentCreateManyAndReturnArgs} args - Arguments to create many LessonContents.
     * @example
     * // Create many LessonContents
     * const lessonContent = await prisma.lessonContent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LessonContents and only return the `id`
     * const lessonContentWithIdOnly = await prisma.lessonContent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonContentCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonContentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LessonContent.
     * @param {LessonContentDeleteArgs} args - Arguments to delete one LessonContent.
     * @example
     * // Delete one LessonContent
     * const LessonContent = await prisma.lessonContent.delete({
     *   where: {
     *     // ... filter to delete one LessonContent
     *   }
     * })
     * 
     */
    delete<T extends LessonContentDeleteArgs>(args: SelectSubset<T, LessonContentDeleteArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LessonContent.
     * @param {LessonContentUpdateArgs} args - Arguments to update one LessonContent.
     * @example
     * // Update one LessonContent
     * const lessonContent = await prisma.lessonContent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonContentUpdateArgs>(args: SelectSubset<T, LessonContentUpdateArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LessonContents.
     * @param {LessonContentDeleteManyArgs} args - Arguments to filter LessonContents to delete.
     * @example
     * // Delete a few LessonContents
     * const { count } = await prisma.lessonContent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonContentDeleteManyArgs>(args?: SelectSubset<T, LessonContentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LessonContents
     * const lessonContent = await prisma.lessonContent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonContentUpdateManyArgs>(args: SelectSubset<T, LessonContentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonContents and returns the data updated in the database.
     * @param {LessonContentUpdateManyAndReturnArgs} args - Arguments to update many LessonContents.
     * @example
     * // Update many LessonContents
     * const lessonContent = await prisma.lessonContent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LessonContents and only return the `id`
     * const lessonContentWithIdOnly = await prisma.lessonContent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonContentUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonContentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LessonContent.
     * @param {LessonContentUpsertArgs} args - Arguments to update or create a LessonContent.
     * @example
     * // Update or create a LessonContent
     * const lessonContent = await prisma.lessonContent.upsert({
     *   create: {
     *     // ... data to create a LessonContent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LessonContent we want to update
     *   }
     * })
     */
    upsert<T extends LessonContentUpsertArgs>(args: SelectSubset<T, LessonContentUpsertArgs<ExtArgs>>): Prisma__LessonContentClient<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LessonContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentCountArgs} args - Arguments to filter LessonContents to count.
     * @example
     * // Count the number of LessonContents
     * const count = await prisma.lessonContent.count({
     *   where: {
     *     // ... the filter for the LessonContents we want to count
     *   }
     * })
    **/
    count<T extends LessonContentCountArgs>(
      args?: Subset<T, LessonContentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LessonContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonContentAggregateArgs>(args: Subset<T, LessonContentAggregateArgs>): Prisma.PrismaPromise<GetLessonContentAggregateType<T>>

    /**
     * Group by LessonContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonContentGroupByArgs['orderBy'] }
        : { orderBy?: LessonContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LessonContent model
   */
  readonly fields: LessonContentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LessonContent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonContentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lesson<T extends LessonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonDefaultArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lessonContentType<T extends LessonContentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonContentTypeDefaultArgs<ExtArgs>>): Prisma__LessonContentTypeClient<$Result.GetResult<Prisma.$LessonContentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends LessonContent$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, LessonContent$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends LessonContent$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, LessonContent$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LessonContent model
   */
  interface LessonContentFieldRefs {
    readonly id: FieldRef<"LessonContent", 'Int'>
    readonly lessonId: FieldRef<"LessonContent", 'Int'>
    readonly contentTypeId: FieldRef<"LessonContent", 'Int'>
    readonly contentUrl: FieldRef<"LessonContent", 'String'>
    readonly duration: FieldRef<"LessonContent", 'Int'>
    readonly pages: FieldRef<"LessonContent", 'Int'>
    readonly sortOrder: FieldRef<"LessonContent", 'Int'>
    readonly isActive: FieldRef<"LessonContent", 'Boolean'>
    readonly updatedBy: FieldRef<"LessonContent", 'Int'>
    readonly deletedBy: FieldRef<"LessonContent", 'Int'>
    readonly updatedAt: FieldRef<"LessonContent", 'DateTime'>
    readonly deletedAt: FieldRef<"LessonContent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LessonContent findUnique
   */
  export type LessonContentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * Filter, which LessonContent to fetch.
     */
    where: LessonContentWhereUniqueInput
  }

  /**
   * LessonContent findUniqueOrThrow
   */
  export type LessonContentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * Filter, which LessonContent to fetch.
     */
    where: LessonContentWhereUniqueInput
  }

  /**
   * LessonContent findFirst
   */
  export type LessonContentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * Filter, which LessonContent to fetch.
     */
    where?: LessonContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContents to fetch.
     */
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonContents.
     */
    cursor?: LessonContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonContents.
     */
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * LessonContent findFirstOrThrow
   */
  export type LessonContentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * Filter, which LessonContent to fetch.
     */
    where?: LessonContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContents to fetch.
     */
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonContents.
     */
    cursor?: LessonContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonContents.
     */
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * LessonContent findMany
   */
  export type LessonContentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * Filter, which LessonContents to fetch.
     */
    where?: LessonContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonContents to fetch.
     */
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LessonContents.
     */
    cursor?: LessonContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonContents.
     */
    skip?: number
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * LessonContent create
   */
  export type LessonContentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * The data needed to create a LessonContent.
     */
    data: XOR<LessonContentCreateInput, LessonContentUncheckedCreateInput>
  }

  /**
   * LessonContent createMany
   */
  export type LessonContentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LessonContents.
     */
    data: LessonContentCreateManyInput | LessonContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonContent createManyAndReturn
   */
  export type LessonContentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * The data used to create many LessonContents.
     */
    data: LessonContentCreateManyInput | LessonContentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonContent update
   */
  export type LessonContentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * The data needed to update a LessonContent.
     */
    data: XOR<LessonContentUpdateInput, LessonContentUncheckedUpdateInput>
    /**
     * Choose, which LessonContent to update.
     */
    where: LessonContentWhereUniqueInput
  }

  /**
   * LessonContent updateMany
   */
  export type LessonContentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LessonContents.
     */
    data: XOR<LessonContentUpdateManyMutationInput, LessonContentUncheckedUpdateManyInput>
    /**
     * Filter which LessonContents to update
     */
    where?: LessonContentWhereInput
    /**
     * Limit how many LessonContents to update.
     */
    limit?: number
  }

  /**
   * LessonContent updateManyAndReturn
   */
  export type LessonContentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * The data used to update LessonContents.
     */
    data: XOR<LessonContentUpdateManyMutationInput, LessonContentUncheckedUpdateManyInput>
    /**
     * Filter which LessonContents to update
     */
    where?: LessonContentWhereInput
    /**
     * Limit how many LessonContents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonContent upsert
   */
  export type LessonContentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * The filter to search for the LessonContent to update in case it exists.
     */
    where: LessonContentWhereUniqueInput
    /**
     * In case the LessonContent found by the `where` argument doesn't exist, create a new LessonContent with this data.
     */
    create: XOR<LessonContentCreateInput, LessonContentUncheckedCreateInput>
    /**
     * In case the LessonContent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonContentUpdateInput, LessonContentUncheckedUpdateInput>
  }

  /**
   * LessonContent delete
   */
  export type LessonContentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    /**
     * Filter which LessonContent to delete.
     */
    where: LessonContentWhereUniqueInput
  }

  /**
   * LessonContent deleteMany
   */
  export type LessonContentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonContents to delete
     */
    where?: LessonContentWhereInput
    /**
     * Limit how many LessonContents to delete.
     */
    limit?: number
  }

  /**
   * LessonContent.updatedByUser
   */
  export type LessonContent$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LessonContent.deletedByUser
   */
  export type LessonContent$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LessonContent without action
   */
  export type LessonContentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
  }


  /**
   * Model LessonPrerequisite
   */

  export type AggregateLessonPrerequisite = {
    _count: LessonPrerequisiteCountAggregateOutputType | null
    _avg: LessonPrerequisiteAvgAggregateOutputType | null
    _sum: LessonPrerequisiteSumAggregateOutputType | null
    _min: LessonPrerequisiteMinAggregateOutputType | null
    _max: LessonPrerequisiteMaxAggregateOutputType | null
  }

  export type LessonPrerequisiteAvgAggregateOutputType = {
    id: number | null
    lessonId: number | null
    requiredLessonId: number | null
  }

  export type LessonPrerequisiteSumAggregateOutputType = {
    id: number | null
    lessonId: number | null
    requiredLessonId: number | null
  }

  export type LessonPrerequisiteMinAggregateOutputType = {
    id: number | null
    lessonId: number | null
    requiredLessonId: number | null
  }

  export type LessonPrerequisiteMaxAggregateOutputType = {
    id: number | null
    lessonId: number | null
    requiredLessonId: number | null
  }

  export type LessonPrerequisiteCountAggregateOutputType = {
    id: number
    lessonId: number
    requiredLessonId: number
    _all: number
  }


  export type LessonPrerequisiteAvgAggregateInputType = {
    id?: true
    lessonId?: true
    requiredLessonId?: true
  }

  export type LessonPrerequisiteSumAggregateInputType = {
    id?: true
    lessonId?: true
    requiredLessonId?: true
  }

  export type LessonPrerequisiteMinAggregateInputType = {
    id?: true
    lessonId?: true
    requiredLessonId?: true
  }

  export type LessonPrerequisiteMaxAggregateInputType = {
    id?: true
    lessonId?: true
    requiredLessonId?: true
  }

  export type LessonPrerequisiteCountAggregateInputType = {
    id?: true
    lessonId?: true
    requiredLessonId?: true
    _all?: true
  }

  export type LessonPrerequisiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonPrerequisite to aggregate.
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonPrerequisites to fetch.
     */
    orderBy?: LessonPrerequisiteOrderByWithRelationInput | LessonPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonPrerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LessonPrerequisites
    **/
    _count?: true | LessonPrerequisiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonPrerequisiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonPrerequisiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonPrerequisiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonPrerequisiteMaxAggregateInputType
  }

  export type GetLessonPrerequisiteAggregateType<T extends LessonPrerequisiteAggregateArgs> = {
        [P in keyof T & keyof AggregateLessonPrerequisite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessonPrerequisite[P]>
      : GetScalarType<T[P], AggregateLessonPrerequisite[P]>
  }




  export type LessonPrerequisiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonPrerequisiteWhereInput
    orderBy?: LessonPrerequisiteOrderByWithAggregationInput | LessonPrerequisiteOrderByWithAggregationInput[]
    by: LessonPrerequisiteScalarFieldEnum[] | LessonPrerequisiteScalarFieldEnum
    having?: LessonPrerequisiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonPrerequisiteCountAggregateInputType | true
    _avg?: LessonPrerequisiteAvgAggregateInputType
    _sum?: LessonPrerequisiteSumAggregateInputType
    _min?: LessonPrerequisiteMinAggregateInputType
    _max?: LessonPrerequisiteMaxAggregateInputType
  }

  export type LessonPrerequisiteGroupByOutputType = {
    id: number
    lessonId: number
    requiredLessonId: number
    _count: LessonPrerequisiteCountAggregateOutputType | null
    _avg: LessonPrerequisiteAvgAggregateOutputType | null
    _sum: LessonPrerequisiteSumAggregateOutputType | null
    _min: LessonPrerequisiteMinAggregateOutputType | null
    _max: LessonPrerequisiteMaxAggregateOutputType | null
  }

  type GetLessonPrerequisiteGroupByPayload<T extends LessonPrerequisiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonPrerequisiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonPrerequisiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonPrerequisiteGroupByOutputType[P]>
            : GetScalarType<T[P], LessonPrerequisiteGroupByOutputType[P]>
        }
      >
    >


  export type LessonPrerequisiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonId?: boolean
    requiredLessonId?: boolean
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
    requiredLesson?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonPrerequisite"]>

  export type LessonPrerequisiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonId?: boolean
    requiredLessonId?: boolean
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
    requiredLesson?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonPrerequisite"]>

  export type LessonPrerequisiteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonId?: boolean
    requiredLessonId?: boolean
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
    requiredLesson?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonPrerequisite"]>

  export type LessonPrerequisiteSelectScalar = {
    id?: boolean
    lessonId?: boolean
    requiredLessonId?: boolean
  }

  export type LessonPrerequisiteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lessonId" | "requiredLessonId", ExtArgs["result"]["lessonPrerequisite"]>
  export type LessonPrerequisiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
    requiredLesson?: boolean | LessonDefaultArgs<ExtArgs>
  }
  export type LessonPrerequisiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
    requiredLesson?: boolean | LessonDefaultArgs<ExtArgs>
  }
  export type LessonPrerequisiteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
    requiredLesson?: boolean | LessonDefaultArgs<ExtArgs>
  }

  export type $LessonPrerequisitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LessonPrerequisite"
    objects: {
      lessons: Prisma.$LessonPayload<ExtArgs>
      requiredLesson: Prisma.$LessonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      /**
       * บทเรียนหลักที่ต้องการกำหนดเงื่อนไข
       */
      lessonId: number
      /**
       * บทเรียนที่ต้องเรียนจบก่อน
       */
      requiredLessonId: number
    }, ExtArgs["result"]["lessonPrerequisite"]>
    composites: {}
  }

  type LessonPrerequisiteGetPayload<S extends boolean | null | undefined | LessonPrerequisiteDefaultArgs> = $Result.GetResult<Prisma.$LessonPrerequisitePayload, S>

  type LessonPrerequisiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonPrerequisiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonPrerequisiteCountAggregateInputType | true
    }

  export interface LessonPrerequisiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonPrerequisite'], meta: { name: 'LessonPrerequisite' } }
    /**
     * Find zero or one LessonPrerequisite that matches the filter.
     * @param {LessonPrerequisiteFindUniqueArgs} args - Arguments to find a LessonPrerequisite
     * @example
     * // Get one LessonPrerequisite
     * const lessonPrerequisite = await prisma.lessonPrerequisite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonPrerequisiteFindUniqueArgs>(args: SelectSubset<T, LessonPrerequisiteFindUniqueArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LessonPrerequisite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonPrerequisiteFindUniqueOrThrowArgs} args - Arguments to find a LessonPrerequisite
     * @example
     * // Get one LessonPrerequisite
     * const lessonPrerequisite = await prisma.lessonPrerequisite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonPrerequisiteFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonPrerequisiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonPrerequisite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteFindFirstArgs} args - Arguments to find a LessonPrerequisite
     * @example
     * // Get one LessonPrerequisite
     * const lessonPrerequisite = await prisma.lessonPrerequisite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonPrerequisiteFindFirstArgs>(args?: SelectSubset<T, LessonPrerequisiteFindFirstArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonPrerequisite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteFindFirstOrThrowArgs} args - Arguments to find a LessonPrerequisite
     * @example
     * // Get one LessonPrerequisite
     * const lessonPrerequisite = await prisma.lessonPrerequisite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonPrerequisiteFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonPrerequisiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LessonPrerequisites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LessonPrerequisites
     * const lessonPrerequisites = await prisma.lessonPrerequisite.findMany()
     * 
     * // Get first 10 LessonPrerequisites
     * const lessonPrerequisites = await prisma.lessonPrerequisite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonPrerequisiteWithIdOnly = await prisma.lessonPrerequisite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonPrerequisiteFindManyArgs>(args?: SelectSubset<T, LessonPrerequisiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LessonPrerequisite.
     * @param {LessonPrerequisiteCreateArgs} args - Arguments to create a LessonPrerequisite.
     * @example
     * // Create one LessonPrerequisite
     * const LessonPrerequisite = await prisma.lessonPrerequisite.create({
     *   data: {
     *     // ... data to create a LessonPrerequisite
     *   }
     * })
     * 
     */
    create<T extends LessonPrerequisiteCreateArgs>(args: SelectSubset<T, LessonPrerequisiteCreateArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LessonPrerequisites.
     * @param {LessonPrerequisiteCreateManyArgs} args - Arguments to create many LessonPrerequisites.
     * @example
     * // Create many LessonPrerequisites
     * const lessonPrerequisite = await prisma.lessonPrerequisite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonPrerequisiteCreateManyArgs>(args?: SelectSubset<T, LessonPrerequisiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LessonPrerequisites and returns the data saved in the database.
     * @param {LessonPrerequisiteCreateManyAndReturnArgs} args - Arguments to create many LessonPrerequisites.
     * @example
     * // Create many LessonPrerequisites
     * const lessonPrerequisite = await prisma.lessonPrerequisite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LessonPrerequisites and only return the `id`
     * const lessonPrerequisiteWithIdOnly = await prisma.lessonPrerequisite.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonPrerequisiteCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonPrerequisiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LessonPrerequisite.
     * @param {LessonPrerequisiteDeleteArgs} args - Arguments to delete one LessonPrerequisite.
     * @example
     * // Delete one LessonPrerequisite
     * const LessonPrerequisite = await prisma.lessonPrerequisite.delete({
     *   where: {
     *     // ... filter to delete one LessonPrerequisite
     *   }
     * })
     * 
     */
    delete<T extends LessonPrerequisiteDeleteArgs>(args: SelectSubset<T, LessonPrerequisiteDeleteArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LessonPrerequisite.
     * @param {LessonPrerequisiteUpdateArgs} args - Arguments to update one LessonPrerequisite.
     * @example
     * // Update one LessonPrerequisite
     * const lessonPrerequisite = await prisma.lessonPrerequisite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonPrerequisiteUpdateArgs>(args: SelectSubset<T, LessonPrerequisiteUpdateArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LessonPrerequisites.
     * @param {LessonPrerequisiteDeleteManyArgs} args - Arguments to filter LessonPrerequisites to delete.
     * @example
     * // Delete a few LessonPrerequisites
     * const { count } = await prisma.lessonPrerequisite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonPrerequisiteDeleteManyArgs>(args?: SelectSubset<T, LessonPrerequisiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonPrerequisites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LessonPrerequisites
     * const lessonPrerequisite = await prisma.lessonPrerequisite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonPrerequisiteUpdateManyArgs>(args: SelectSubset<T, LessonPrerequisiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonPrerequisites and returns the data updated in the database.
     * @param {LessonPrerequisiteUpdateManyAndReturnArgs} args - Arguments to update many LessonPrerequisites.
     * @example
     * // Update many LessonPrerequisites
     * const lessonPrerequisite = await prisma.lessonPrerequisite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LessonPrerequisites and only return the `id`
     * const lessonPrerequisiteWithIdOnly = await prisma.lessonPrerequisite.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonPrerequisiteUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonPrerequisiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LessonPrerequisite.
     * @param {LessonPrerequisiteUpsertArgs} args - Arguments to update or create a LessonPrerequisite.
     * @example
     * // Update or create a LessonPrerequisite
     * const lessonPrerequisite = await prisma.lessonPrerequisite.upsert({
     *   create: {
     *     // ... data to create a LessonPrerequisite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LessonPrerequisite we want to update
     *   }
     * })
     */
    upsert<T extends LessonPrerequisiteUpsertArgs>(args: SelectSubset<T, LessonPrerequisiteUpsertArgs<ExtArgs>>): Prisma__LessonPrerequisiteClient<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LessonPrerequisites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteCountArgs} args - Arguments to filter LessonPrerequisites to count.
     * @example
     * // Count the number of LessonPrerequisites
     * const count = await prisma.lessonPrerequisite.count({
     *   where: {
     *     // ... the filter for the LessonPrerequisites we want to count
     *   }
     * })
    **/
    count<T extends LessonPrerequisiteCountArgs>(
      args?: Subset<T, LessonPrerequisiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonPrerequisiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LessonPrerequisite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonPrerequisiteAggregateArgs>(args: Subset<T, LessonPrerequisiteAggregateArgs>): Prisma.PrismaPromise<GetLessonPrerequisiteAggregateType<T>>

    /**
     * Group by LessonPrerequisite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonPrerequisiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonPrerequisiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonPrerequisiteGroupByArgs['orderBy'] }
        : { orderBy?: LessonPrerequisiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonPrerequisiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonPrerequisiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LessonPrerequisite model
   */
  readonly fields: LessonPrerequisiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LessonPrerequisite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonPrerequisiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lessons<T extends LessonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonDefaultArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requiredLesson<T extends LessonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonDefaultArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LessonPrerequisite model
   */
  interface LessonPrerequisiteFieldRefs {
    readonly id: FieldRef<"LessonPrerequisite", 'Int'>
    readonly lessonId: FieldRef<"LessonPrerequisite", 'Int'>
    readonly requiredLessonId: FieldRef<"LessonPrerequisite", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LessonPrerequisite findUnique
   */
  export type LessonPrerequisiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which LessonPrerequisite to fetch.
     */
    where: LessonPrerequisiteWhereUniqueInput
  }

  /**
   * LessonPrerequisite findUniqueOrThrow
   */
  export type LessonPrerequisiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which LessonPrerequisite to fetch.
     */
    where: LessonPrerequisiteWhereUniqueInput
  }

  /**
   * LessonPrerequisite findFirst
   */
  export type LessonPrerequisiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which LessonPrerequisite to fetch.
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonPrerequisites to fetch.
     */
    orderBy?: LessonPrerequisiteOrderByWithRelationInput | LessonPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonPrerequisites.
     */
    cursor?: LessonPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonPrerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonPrerequisites.
     */
    distinct?: LessonPrerequisiteScalarFieldEnum | LessonPrerequisiteScalarFieldEnum[]
  }

  /**
   * LessonPrerequisite findFirstOrThrow
   */
  export type LessonPrerequisiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which LessonPrerequisite to fetch.
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonPrerequisites to fetch.
     */
    orderBy?: LessonPrerequisiteOrderByWithRelationInput | LessonPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonPrerequisites.
     */
    cursor?: LessonPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonPrerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonPrerequisites.
     */
    distinct?: LessonPrerequisiteScalarFieldEnum | LessonPrerequisiteScalarFieldEnum[]
  }

  /**
   * LessonPrerequisite findMany
   */
  export type LessonPrerequisiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which LessonPrerequisites to fetch.
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonPrerequisites to fetch.
     */
    orderBy?: LessonPrerequisiteOrderByWithRelationInput | LessonPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LessonPrerequisites.
     */
    cursor?: LessonPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonPrerequisites.
     */
    skip?: number
    distinct?: LessonPrerequisiteScalarFieldEnum | LessonPrerequisiteScalarFieldEnum[]
  }

  /**
   * LessonPrerequisite create
   */
  export type LessonPrerequisiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * The data needed to create a LessonPrerequisite.
     */
    data: XOR<LessonPrerequisiteCreateInput, LessonPrerequisiteUncheckedCreateInput>
  }

  /**
   * LessonPrerequisite createMany
   */
  export type LessonPrerequisiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LessonPrerequisites.
     */
    data: LessonPrerequisiteCreateManyInput | LessonPrerequisiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonPrerequisite createManyAndReturn
   */
  export type LessonPrerequisiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * The data used to create many LessonPrerequisites.
     */
    data: LessonPrerequisiteCreateManyInput | LessonPrerequisiteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonPrerequisite update
   */
  export type LessonPrerequisiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * The data needed to update a LessonPrerequisite.
     */
    data: XOR<LessonPrerequisiteUpdateInput, LessonPrerequisiteUncheckedUpdateInput>
    /**
     * Choose, which LessonPrerequisite to update.
     */
    where: LessonPrerequisiteWhereUniqueInput
  }

  /**
   * LessonPrerequisite updateMany
   */
  export type LessonPrerequisiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LessonPrerequisites.
     */
    data: XOR<LessonPrerequisiteUpdateManyMutationInput, LessonPrerequisiteUncheckedUpdateManyInput>
    /**
     * Filter which LessonPrerequisites to update
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * Limit how many LessonPrerequisites to update.
     */
    limit?: number
  }

  /**
   * LessonPrerequisite updateManyAndReturn
   */
  export type LessonPrerequisiteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * The data used to update LessonPrerequisites.
     */
    data: XOR<LessonPrerequisiteUpdateManyMutationInput, LessonPrerequisiteUncheckedUpdateManyInput>
    /**
     * Filter which LessonPrerequisites to update
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * Limit how many LessonPrerequisites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonPrerequisite upsert
   */
  export type LessonPrerequisiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * The filter to search for the LessonPrerequisite to update in case it exists.
     */
    where: LessonPrerequisiteWhereUniqueInput
    /**
     * In case the LessonPrerequisite found by the `where` argument doesn't exist, create a new LessonPrerequisite with this data.
     */
    create: XOR<LessonPrerequisiteCreateInput, LessonPrerequisiteUncheckedCreateInput>
    /**
     * In case the LessonPrerequisite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonPrerequisiteUpdateInput, LessonPrerequisiteUncheckedUpdateInput>
  }

  /**
   * LessonPrerequisite delete
   */
  export type LessonPrerequisiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter which LessonPrerequisite to delete.
     */
    where: LessonPrerequisiteWhereUniqueInput
  }

  /**
   * LessonPrerequisite deleteMany
   */
  export type LessonPrerequisiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonPrerequisites to delete
     */
    where?: LessonPrerequisiteWhereInput
    /**
     * Limit how many LessonPrerequisites to delete.
     */
    limit?: number
  }

  /**
   * LessonPrerequisite without action
   */
  export type LessonPrerequisiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
  }


  /**
   * Model LessonType
   */

  export type AggregateLessonType = {
    _count: LessonTypeCountAggregateOutputType | null
    _avg: LessonTypeAvgAggregateOutputType | null
    _sum: LessonTypeSumAggregateOutputType | null
    _min: LessonTypeMinAggregateOutputType | null
    _max: LessonTypeMaxAggregateOutputType | null
  }

  export type LessonTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type LessonTypeSumAggregateOutputType = {
    id: number | null
  }

  export type LessonTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LessonTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type LessonTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type LessonTypeAvgAggregateInputType = {
    id?: true
  }

  export type LessonTypeSumAggregateInputType = {
    id?: true
  }

  export type LessonTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type LessonTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type LessonTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type LessonTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonType to aggregate.
     */
    where?: LessonTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonTypes to fetch.
     */
    orderBy?: LessonTypeOrderByWithRelationInput | LessonTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LessonTypes
    **/
    _count?: true | LessonTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonTypeMaxAggregateInputType
  }

  export type GetLessonTypeAggregateType<T extends LessonTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLessonType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessonType[P]>
      : GetScalarType<T[P], AggregateLessonType[P]>
  }




  export type LessonTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonTypeWhereInput
    orderBy?: LessonTypeOrderByWithAggregationInput | LessonTypeOrderByWithAggregationInput[]
    by: LessonTypeScalarFieldEnum[] | LessonTypeScalarFieldEnum
    having?: LessonTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonTypeCountAggregateInputType | true
    _avg?: LessonTypeAvgAggregateInputType
    _sum?: LessonTypeSumAggregateInputType
    _min?: LessonTypeMinAggregateInputType
    _max?: LessonTypeMaxAggregateInputType
  }

  export type LessonTypeGroupByOutputType = {
    id: number
    name: string
    _count: LessonTypeCountAggregateOutputType | null
    _avg: LessonTypeAvgAggregateOutputType | null
    _sum: LessonTypeSumAggregateOutputType | null
    _min: LessonTypeMinAggregateOutputType | null
    _max: LessonTypeMaxAggregateOutputType | null
  }

  type GetLessonTypeGroupByPayload<T extends LessonTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LessonTypeGroupByOutputType[P]>
        }
      >
    >


  export type LessonTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lessonTypeId?: boolean | LessonType$lessonTypeIdArgs<ExtArgs>
    _count?: boolean | LessonTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonType"]>

  export type LessonTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["lessonType"]>

  export type LessonTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["lessonType"]>

  export type LessonTypeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type LessonTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["lessonType"]>
  export type LessonTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessonTypeId?: boolean | LessonType$lessonTypeIdArgs<ExtArgs>
    _count?: boolean | LessonTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LessonTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LessonTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LessonTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LessonType"
    objects: {
      lessonTypeId: Prisma.$LessonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["lessonType"]>
    composites: {}
  }

  type LessonTypeGetPayload<S extends boolean | null | undefined | LessonTypeDefaultArgs> = $Result.GetResult<Prisma.$LessonTypePayload, S>

  type LessonTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonTypeCountAggregateInputType | true
    }

  export interface LessonTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonType'], meta: { name: 'LessonType' } }
    /**
     * Find zero or one LessonType that matches the filter.
     * @param {LessonTypeFindUniqueArgs} args - Arguments to find a LessonType
     * @example
     * // Get one LessonType
     * const lessonType = await prisma.lessonType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonTypeFindUniqueArgs>(args: SelectSubset<T, LessonTypeFindUniqueArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LessonType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonTypeFindUniqueOrThrowArgs} args - Arguments to find a LessonType
     * @example
     * // Get one LessonType
     * const lessonType = await prisma.lessonType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeFindFirstArgs} args - Arguments to find a LessonType
     * @example
     * // Get one LessonType
     * const lessonType = await prisma.lessonType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonTypeFindFirstArgs>(args?: SelectSubset<T, LessonTypeFindFirstArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeFindFirstOrThrowArgs} args - Arguments to find a LessonType
     * @example
     * // Get one LessonType
     * const lessonType = await prisma.lessonType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LessonTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LessonTypes
     * const lessonTypes = await prisma.lessonType.findMany()
     * 
     * // Get first 10 LessonTypes
     * const lessonTypes = await prisma.lessonType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonTypeWithIdOnly = await prisma.lessonType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonTypeFindManyArgs>(args?: SelectSubset<T, LessonTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LessonType.
     * @param {LessonTypeCreateArgs} args - Arguments to create a LessonType.
     * @example
     * // Create one LessonType
     * const LessonType = await prisma.lessonType.create({
     *   data: {
     *     // ... data to create a LessonType
     *   }
     * })
     * 
     */
    create<T extends LessonTypeCreateArgs>(args: SelectSubset<T, LessonTypeCreateArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LessonTypes.
     * @param {LessonTypeCreateManyArgs} args - Arguments to create many LessonTypes.
     * @example
     * // Create many LessonTypes
     * const lessonType = await prisma.lessonType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonTypeCreateManyArgs>(args?: SelectSubset<T, LessonTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LessonTypes and returns the data saved in the database.
     * @param {LessonTypeCreateManyAndReturnArgs} args - Arguments to create many LessonTypes.
     * @example
     * // Create many LessonTypes
     * const lessonType = await prisma.lessonType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LessonTypes and only return the `id`
     * const lessonTypeWithIdOnly = await prisma.lessonType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LessonType.
     * @param {LessonTypeDeleteArgs} args - Arguments to delete one LessonType.
     * @example
     * // Delete one LessonType
     * const LessonType = await prisma.lessonType.delete({
     *   where: {
     *     // ... filter to delete one LessonType
     *   }
     * })
     * 
     */
    delete<T extends LessonTypeDeleteArgs>(args: SelectSubset<T, LessonTypeDeleteArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LessonType.
     * @param {LessonTypeUpdateArgs} args - Arguments to update one LessonType.
     * @example
     * // Update one LessonType
     * const lessonType = await prisma.lessonType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonTypeUpdateArgs>(args: SelectSubset<T, LessonTypeUpdateArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LessonTypes.
     * @param {LessonTypeDeleteManyArgs} args - Arguments to filter LessonTypes to delete.
     * @example
     * // Delete a few LessonTypes
     * const { count } = await prisma.lessonType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonTypeDeleteManyArgs>(args?: SelectSubset<T, LessonTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LessonTypes
     * const lessonType = await prisma.lessonType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonTypeUpdateManyArgs>(args: SelectSubset<T, LessonTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonTypes and returns the data updated in the database.
     * @param {LessonTypeUpdateManyAndReturnArgs} args - Arguments to update many LessonTypes.
     * @example
     * // Update many LessonTypes
     * const lessonType = await prisma.lessonType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LessonTypes and only return the `id`
     * const lessonTypeWithIdOnly = await prisma.lessonType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LessonType.
     * @param {LessonTypeUpsertArgs} args - Arguments to update or create a LessonType.
     * @example
     * // Update or create a LessonType
     * const lessonType = await prisma.lessonType.upsert({
     *   create: {
     *     // ... data to create a LessonType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LessonType we want to update
     *   }
     * })
     */
    upsert<T extends LessonTypeUpsertArgs>(args: SelectSubset<T, LessonTypeUpsertArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LessonTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeCountArgs} args - Arguments to filter LessonTypes to count.
     * @example
     * // Count the number of LessonTypes
     * const count = await prisma.lessonType.count({
     *   where: {
     *     // ... the filter for the LessonTypes we want to count
     *   }
     * })
    **/
    count<T extends LessonTypeCountArgs>(
      args?: Subset<T, LessonTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LessonType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonTypeAggregateArgs>(args: Subset<T, LessonTypeAggregateArgs>): Prisma.PrismaPromise<GetLessonTypeAggregateType<T>>

    /**
     * Group by LessonType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonTypeGroupByArgs['orderBy'] }
        : { orderBy?: LessonTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LessonType model
   */
  readonly fields: LessonTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LessonType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lessonTypeId<T extends LessonType$lessonTypeIdArgs<ExtArgs> = {}>(args?: Subset<T, LessonType$lessonTypeIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LessonType model
   */
  interface LessonTypeFieldRefs {
    readonly id: FieldRef<"LessonType", 'Int'>
    readonly name: FieldRef<"LessonType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LessonType findUnique
   */
  export type LessonTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonType to fetch.
     */
    where: LessonTypeWhereUniqueInput
  }

  /**
   * LessonType findUniqueOrThrow
   */
  export type LessonTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonType to fetch.
     */
    where: LessonTypeWhereUniqueInput
  }

  /**
   * LessonType findFirst
   */
  export type LessonTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonType to fetch.
     */
    where?: LessonTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonTypes to fetch.
     */
    orderBy?: LessonTypeOrderByWithRelationInput | LessonTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonTypes.
     */
    cursor?: LessonTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonTypes.
     */
    distinct?: LessonTypeScalarFieldEnum | LessonTypeScalarFieldEnum[]
  }

  /**
   * LessonType findFirstOrThrow
   */
  export type LessonTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonType to fetch.
     */
    where?: LessonTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonTypes to fetch.
     */
    orderBy?: LessonTypeOrderByWithRelationInput | LessonTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonTypes.
     */
    cursor?: LessonTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonTypes.
     */
    distinct?: LessonTypeScalarFieldEnum | LessonTypeScalarFieldEnum[]
  }

  /**
   * LessonType findMany
   */
  export type LessonTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * Filter, which LessonTypes to fetch.
     */
    where?: LessonTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonTypes to fetch.
     */
    orderBy?: LessonTypeOrderByWithRelationInput | LessonTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LessonTypes.
     */
    cursor?: LessonTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonTypes.
     */
    skip?: number
    distinct?: LessonTypeScalarFieldEnum | LessonTypeScalarFieldEnum[]
  }

  /**
   * LessonType create
   */
  export type LessonTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a LessonType.
     */
    data: XOR<LessonTypeCreateInput, LessonTypeUncheckedCreateInput>
  }

  /**
   * LessonType createMany
   */
  export type LessonTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LessonTypes.
     */
    data: LessonTypeCreateManyInput | LessonTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonType createManyAndReturn
   */
  export type LessonTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * The data used to create many LessonTypes.
     */
    data: LessonTypeCreateManyInput | LessonTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonType update
   */
  export type LessonTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a LessonType.
     */
    data: XOR<LessonTypeUpdateInput, LessonTypeUncheckedUpdateInput>
    /**
     * Choose, which LessonType to update.
     */
    where: LessonTypeWhereUniqueInput
  }

  /**
   * LessonType updateMany
   */
  export type LessonTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LessonTypes.
     */
    data: XOR<LessonTypeUpdateManyMutationInput, LessonTypeUncheckedUpdateManyInput>
    /**
     * Filter which LessonTypes to update
     */
    where?: LessonTypeWhereInput
    /**
     * Limit how many LessonTypes to update.
     */
    limit?: number
  }

  /**
   * LessonType updateManyAndReturn
   */
  export type LessonTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * The data used to update LessonTypes.
     */
    data: XOR<LessonTypeUpdateManyMutationInput, LessonTypeUncheckedUpdateManyInput>
    /**
     * Filter which LessonTypes to update
     */
    where?: LessonTypeWhereInput
    /**
     * Limit how many LessonTypes to update.
     */
    limit?: number
  }

  /**
   * LessonType upsert
   */
  export type LessonTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the LessonType to update in case it exists.
     */
    where: LessonTypeWhereUniqueInput
    /**
     * In case the LessonType found by the `where` argument doesn't exist, create a new LessonType with this data.
     */
    create: XOR<LessonTypeCreateInput, LessonTypeUncheckedCreateInput>
    /**
     * In case the LessonType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonTypeUpdateInput, LessonTypeUncheckedUpdateInput>
  }

  /**
   * LessonType delete
   */
  export type LessonTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
    /**
     * Filter which LessonType to delete.
     */
    where: LessonTypeWhereUniqueInput
  }

  /**
   * LessonType deleteMany
   */
  export type LessonTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonTypes to delete
     */
    where?: LessonTypeWhereInput
    /**
     * Limit how many LessonTypes to delete.
     */
    limit?: number
  }

  /**
   * LessonType.lessonTypeId
   */
  export type LessonType$lessonTypeIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * LessonType without action
   */
  export type LessonTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonType
     */
    select?: LessonTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonType
     */
    omit?: LessonTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonTypeInclude<ExtArgs> | null
  }


  /**
   * Model LessonView
   */

  export type AggregateLessonView = {
    _count: LessonViewCountAggregateOutputType | null
    _avg: LessonViewAvgAggregateOutputType | null
    _sum: LessonViewSumAggregateOutputType | null
    _min: LessonViewMinAggregateOutputType | null
    _max: LessonViewMaxAggregateOutputType | null
  }

  export type LessonViewAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    watchedTime: number | null
    readPages: number | null
  }

  export type LessonViewSumAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    watchedTime: number | null
    readPages: number | null
  }

  export type LessonViewMinAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    completed: boolean | null
    watchedTime: number | null
    readPages: number | null
    completedAt: Date | null
    createdAt: Date | null
  }

  export type LessonViewMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    lessonId: number | null
    completed: boolean | null
    watchedTime: number | null
    readPages: number | null
    completedAt: Date | null
    createdAt: Date | null
  }

  export type LessonViewCountAggregateOutputType = {
    id: number
    userId: number
    lessonId: number
    completed: number
    watchedTime: number
    readPages: number
    completedAt: number
    createdAt: number
    _all: number
  }


  export type LessonViewAvgAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    watchedTime?: true
    readPages?: true
  }

  export type LessonViewSumAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    watchedTime?: true
    readPages?: true
  }

  export type LessonViewMinAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    completed?: true
    watchedTime?: true
    readPages?: true
    completedAt?: true
    createdAt?: true
  }

  export type LessonViewMaxAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    completed?: true
    watchedTime?: true
    readPages?: true
    completedAt?: true
    createdAt?: true
  }

  export type LessonViewCountAggregateInputType = {
    id?: true
    userId?: true
    lessonId?: true
    completed?: true
    watchedTime?: true
    readPages?: true
    completedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LessonViewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonView to aggregate.
     */
    where?: LessonViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonViews to fetch.
     */
    orderBy?: LessonViewOrderByWithRelationInput | LessonViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LessonViews
    **/
    _count?: true | LessonViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonViewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonViewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonViewMaxAggregateInputType
  }

  export type GetLessonViewAggregateType<T extends LessonViewAggregateArgs> = {
        [P in keyof T & keyof AggregateLessonView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessonView[P]>
      : GetScalarType<T[P], AggregateLessonView[P]>
  }




  export type LessonViewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonViewWhereInput
    orderBy?: LessonViewOrderByWithAggregationInput | LessonViewOrderByWithAggregationInput[]
    by: LessonViewScalarFieldEnum[] | LessonViewScalarFieldEnum
    having?: LessonViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonViewCountAggregateInputType | true
    _avg?: LessonViewAvgAggregateInputType
    _sum?: LessonViewSumAggregateInputType
    _min?: LessonViewMinAggregateInputType
    _max?: LessonViewMaxAggregateInputType
  }

  export type LessonViewGroupByOutputType = {
    id: number
    userId: number
    lessonId: number
    completed: boolean
    watchedTime: number
    readPages: number
    completedAt: Date | null
    createdAt: Date
    _count: LessonViewCountAggregateOutputType | null
    _avg: LessonViewAvgAggregateOutputType | null
    _sum: LessonViewSumAggregateOutputType | null
    _min: LessonViewMinAggregateOutputType | null
    _max: LessonViewMaxAggregateOutputType | null
  }

  type GetLessonViewGroupByPayload<T extends LessonViewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonViewGroupByOutputType[P]>
            : GetScalarType<T[P], LessonViewGroupByOutputType[P]>
        }
      >
    >


  export type LessonViewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    completed?: boolean
    watchedTime?: boolean
    readPages?: boolean
    completedAt?: boolean
    createdAt?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonView"]>

  export type LessonViewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    completed?: boolean
    watchedTime?: boolean
    readPages?: boolean
    completedAt?: boolean
    createdAt?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonView"]>

  export type LessonViewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    completed?: boolean
    watchedTime?: boolean
    readPages?: boolean
    completedAt?: boolean
    createdAt?: boolean
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessonView"]>

  export type LessonViewSelectScalar = {
    id?: boolean
    userId?: boolean
    lessonId?: boolean
    completed?: boolean
    watchedTime?: boolean
    readPages?: boolean
    completedAt?: boolean
    createdAt?: boolean
  }

  export type LessonViewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "lessonId" | "completed" | "watchedTime" | "readPages" | "completedAt" | "createdAt", ExtArgs["result"]["lessonView"]>
  export type LessonViewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }
  export type LessonViewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }
  export type LessonViewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserDefaultArgs<ExtArgs>
    lessons?: boolean | LessonDefaultArgs<ExtArgs>
  }

  export type $LessonViewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LessonView"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>
      lessons: Prisma.$LessonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      lessonId: number
      completed: boolean
      /**
       * เวลาดูวิดิโอ
       */
      watchedTime: number
      /**
       * จำนวนหน้าที่อ่าน
       */
      readPages: number
      /**
       * วันที่เรียนสำเร็จ
       */
      completedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["lessonView"]>
    composites: {}
  }

  type LessonViewGetPayload<S extends boolean | null | undefined | LessonViewDefaultArgs> = $Result.GetResult<Prisma.$LessonViewPayload, S>

  type LessonViewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonViewCountAggregateInputType | true
    }

  export interface LessonViewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonView'], meta: { name: 'LessonView' } }
    /**
     * Find zero or one LessonView that matches the filter.
     * @param {LessonViewFindUniqueArgs} args - Arguments to find a LessonView
     * @example
     * // Get one LessonView
     * const lessonView = await prisma.lessonView.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonViewFindUniqueArgs>(args: SelectSubset<T, LessonViewFindUniqueArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LessonView that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonViewFindUniqueOrThrowArgs} args - Arguments to find a LessonView
     * @example
     * // Get one LessonView
     * const lessonView = await prisma.lessonView.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonViewFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonView that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewFindFirstArgs} args - Arguments to find a LessonView
     * @example
     * // Get one LessonView
     * const lessonView = await prisma.lessonView.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonViewFindFirstArgs>(args?: SelectSubset<T, LessonViewFindFirstArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LessonView that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewFindFirstOrThrowArgs} args - Arguments to find a LessonView
     * @example
     * // Get one LessonView
     * const lessonView = await prisma.lessonView.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonViewFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonViewFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LessonViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LessonViews
     * const lessonViews = await prisma.lessonView.findMany()
     * 
     * // Get first 10 LessonViews
     * const lessonViews = await prisma.lessonView.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonViewWithIdOnly = await prisma.lessonView.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonViewFindManyArgs>(args?: SelectSubset<T, LessonViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LessonView.
     * @param {LessonViewCreateArgs} args - Arguments to create a LessonView.
     * @example
     * // Create one LessonView
     * const LessonView = await prisma.lessonView.create({
     *   data: {
     *     // ... data to create a LessonView
     *   }
     * })
     * 
     */
    create<T extends LessonViewCreateArgs>(args: SelectSubset<T, LessonViewCreateArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LessonViews.
     * @param {LessonViewCreateManyArgs} args - Arguments to create many LessonViews.
     * @example
     * // Create many LessonViews
     * const lessonView = await prisma.lessonView.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonViewCreateManyArgs>(args?: SelectSubset<T, LessonViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LessonViews and returns the data saved in the database.
     * @param {LessonViewCreateManyAndReturnArgs} args - Arguments to create many LessonViews.
     * @example
     * // Create many LessonViews
     * const lessonView = await prisma.lessonView.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LessonViews and only return the `id`
     * const lessonViewWithIdOnly = await prisma.lessonView.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonViewCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LessonView.
     * @param {LessonViewDeleteArgs} args - Arguments to delete one LessonView.
     * @example
     * // Delete one LessonView
     * const LessonView = await prisma.lessonView.delete({
     *   where: {
     *     // ... filter to delete one LessonView
     *   }
     * })
     * 
     */
    delete<T extends LessonViewDeleteArgs>(args: SelectSubset<T, LessonViewDeleteArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LessonView.
     * @param {LessonViewUpdateArgs} args - Arguments to update one LessonView.
     * @example
     * // Update one LessonView
     * const lessonView = await prisma.lessonView.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonViewUpdateArgs>(args: SelectSubset<T, LessonViewUpdateArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LessonViews.
     * @param {LessonViewDeleteManyArgs} args - Arguments to filter LessonViews to delete.
     * @example
     * // Delete a few LessonViews
     * const { count } = await prisma.lessonView.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonViewDeleteManyArgs>(args?: SelectSubset<T, LessonViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LessonViews
     * const lessonView = await prisma.lessonView.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonViewUpdateManyArgs>(args: SelectSubset<T, LessonViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LessonViews and returns the data updated in the database.
     * @param {LessonViewUpdateManyAndReturnArgs} args - Arguments to update many LessonViews.
     * @example
     * // Update many LessonViews
     * const lessonView = await prisma.lessonView.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LessonViews and only return the `id`
     * const lessonViewWithIdOnly = await prisma.lessonView.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonViewUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LessonView.
     * @param {LessonViewUpsertArgs} args - Arguments to update or create a LessonView.
     * @example
     * // Update or create a LessonView
     * const lessonView = await prisma.lessonView.upsert({
     *   create: {
     *     // ... data to create a LessonView
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LessonView we want to update
     *   }
     * })
     */
    upsert<T extends LessonViewUpsertArgs>(args: SelectSubset<T, LessonViewUpsertArgs<ExtArgs>>): Prisma__LessonViewClient<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LessonViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewCountArgs} args - Arguments to filter LessonViews to count.
     * @example
     * // Count the number of LessonViews
     * const count = await prisma.lessonView.count({
     *   where: {
     *     // ... the filter for the LessonViews we want to count
     *   }
     * })
    **/
    count<T extends LessonViewCountArgs>(
      args?: Subset<T, LessonViewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LessonView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonViewAggregateArgs>(args: Subset<T, LessonViewAggregateArgs>): Prisma.PrismaPromise<GetLessonViewAggregateType<T>>

    /**
     * Group by LessonView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonViewGroupByArgs['orderBy'] }
        : { orderBy?: LessonViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LessonView model
   */
  readonly fields: LessonViewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LessonView.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonViewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lessons<T extends LessonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonDefaultArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LessonView model
   */
  interface LessonViewFieldRefs {
    readonly id: FieldRef<"LessonView", 'Int'>
    readonly userId: FieldRef<"LessonView", 'Int'>
    readonly lessonId: FieldRef<"LessonView", 'Int'>
    readonly completed: FieldRef<"LessonView", 'Boolean'>
    readonly watchedTime: FieldRef<"LessonView", 'Int'>
    readonly readPages: FieldRef<"LessonView", 'Int'>
    readonly completedAt: FieldRef<"LessonView", 'DateTime'>
    readonly createdAt: FieldRef<"LessonView", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LessonView findUnique
   */
  export type LessonViewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * Filter, which LessonView to fetch.
     */
    where: LessonViewWhereUniqueInput
  }

  /**
   * LessonView findUniqueOrThrow
   */
  export type LessonViewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * Filter, which LessonView to fetch.
     */
    where: LessonViewWhereUniqueInput
  }

  /**
   * LessonView findFirst
   */
  export type LessonViewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * Filter, which LessonView to fetch.
     */
    where?: LessonViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonViews to fetch.
     */
    orderBy?: LessonViewOrderByWithRelationInput | LessonViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonViews.
     */
    cursor?: LessonViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonViews.
     */
    distinct?: LessonViewScalarFieldEnum | LessonViewScalarFieldEnum[]
  }

  /**
   * LessonView findFirstOrThrow
   */
  export type LessonViewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * Filter, which LessonView to fetch.
     */
    where?: LessonViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonViews to fetch.
     */
    orderBy?: LessonViewOrderByWithRelationInput | LessonViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LessonViews.
     */
    cursor?: LessonViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LessonViews.
     */
    distinct?: LessonViewScalarFieldEnum | LessonViewScalarFieldEnum[]
  }

  /**
   * LessonView findMany
   */
  export type LessonViewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * Filter, which LessonViews to fetch.
     */
    where?: LessonViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LessonViews to fetch.
     */
    orderBy?: LessonViewOrderByWithRelationInput | LessonViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LessonViews.
     */
    cursor?: LessonViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LessonViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LessonViews.
     */
    skip?: number
    distinct?: LessonViewScalarFieldEnum | LessonViewScalarFieldEnum[]
  }

  /**
   * LessonView create
   */
  export type LessonViewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * The data needed to create a LessonView.
     */
    data: XOR<LessonViewCreateInput, LessonViewUncheckedCreateInput>
  }

  /**
   * LessonView createMany
   */
  export type LessonViewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LessonViews.
     */
    data: LessonViewCreateManyInput | LessonViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LessonView createManyAndReturn
   */
  export type LessonViewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * The data used to create many LessonViews.
     */
    data: LessonViewCreateManyInput | LessonViewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonView update
   */
  export type LessonViewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * The data needed to update a LessonView.
     */
    data: XOR<LessonViewUpdateInput, LessonViewUncheckedUpdateInput>
    /**
     * Choose, which LessonView to update.
     */
    where: LessonViewWhereUniqueInput
  }

  /**
   * LessonView updateMany
   */
  export type LessonViewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LessonViews.
     */
    data: XOR<LessonViewUpdateManyMutationInput, LessonViewUncheckedUpdateManyInput>
    /**
     * Filter which LessonViews to update
     */
    where?: LessonViewWhereInput
    /**
     * Limit how many LessonViews to update.
     */
    limit?: number
  }

  /**
   * LessonView updateManyAndReturn
   */
  export type LessonViewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * The data used to update LessonViews.
     */
    data: XOR<LessonViewUpdateManyMutationInput, LessonViewUncheckedUpdateManyInput>
    /**
     * Filter which LessonViews to update
     */
    where?: LessonViewWhereInput
    /**
     * Limit how many LessonViews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LessonView upsert
   */
  export type LessonViewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * The filter to search for the LessonView to update in case it exists.
     */
    where: LessonViewWhereUniqueInput
    /**
     * In case the LessonView found by the `where` argument doesn't exist, create a new LessonView with this data.
     */
    create: XOR<LessonViewCreateInput, LessonViewUncheckedCreateInput>
    /**
     * In case the LessonView was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonViewUpdateInput, LessonViewUncheckedUpdateInput>
  }

  /**
   * LessonView delete
   */
  export type LessonViewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    /**
     * Filter which LessonView to delete.
     */
    where: LessonViewWhereUniqueInput
  }

  /**
   * LessonView deleteMany
   */
  export type LessonViewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LessonViews to delete
     */
    where?: LessonViewWhereInput
    /**
     * Limit how many LessonViews to delete.
     */
    limit?: number
  }

  /**
   * LessonView without action
   */
  export type LessonViewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
  }


  /**
   * Model Lesson
   */

  export type AggregateLesson = {
    _count: LessonCountAggregateOutputType | null
    _avg: LessonAvgAggregateOutputType | null
    _sum: LessonSumAggregateOutputType | null
    _min: LessonMinAggregateOutputType | null
    _max: LessonMaxAggregateOutputType | null
  }

  export type LessonAvgAggregateOutputType = {
    id: number | null
    lessonTypeId: number | null
    courseId: number | null
    courseInstructorId: number | null
    sortOrder: number | null
    parentId: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type LessonSumAggregateOutputType = {
    id: number | null
    lessonTypeId: number | null
    courseId: number | null
    courseInstructorId: number | null
    sortOrder: number | null
    parentId: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type LessonMinAggregateOutputType = {
    id: number | null
    lessonTypeId: number | null
    courseId: number | null
    courseInstructorId: number | null
    name: string | null
    description: string | null
    imageUrl: string | null
    sortOrder: number | null
    parentId: number | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LessonMaxAggregateOutputType = {
    id: number | null
    lessonTypeId: number | null
    courseId: number | null
    courseInstructorId: number | null
    name: string | null
    description: string | null
    imageUrl: string | null
    sortOrder: number | null
    parentId: number | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type LessonCountAggregateOutputType = {
    id: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: number
    description: number
    imageUrl: number
    sortOrder: number
    parentId: number
    isActive: number
    createdBy: number
    updatedBy: number
    deletedBy: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type LessonAvgAggregateInputType = {
    id?: true
    lessonTypeId?: true
    courseId?: true
    courseInstructorId?: true
    sortOrder?: true
    parentId?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type LessonSumAggregateInputType = {
    id?: true
    lessonTypeId?: true
    courseId?: true
    courseInstructorId?: true
    sortOrder?: true
    parentId?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type LessonMinAggregateInputType = {
    id?: true
    lessonTypeId?: true
    courseId?: true
    courseInstructorId?: true
    name?: true
    description?: true
    imageUrl?: true
    sortOrder?: true
    parentId?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LessonMaxAggregateInputType = {
    id?: true
    lessonTypeId?: true
    courseId?: true
    courseInstructorId?: true
    name?: true
    description?: true
    imageUrl?: true
    sortOrder?: true
    parentId?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LessonCountAggregateInputType = {
    id?: true
    lessonTypeId?: true
    courseId?: true
    courseInstructorId?: true
    name?: true
    description?: true
    imageUrl?: true
    sortOrder?: true
    parentId?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type LessonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lesson to aggregate.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lessons
    **/
    _count?: true | LessonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonMaxAggregateInputType
  }

  export type GetLessonAggregateType<T extends LessonAggregateArgs> = {
        [P in keyof T & keyof AggregateLesson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLesson[P]>
      : GetScalarType<T[P], AggregateLesson[P]>
  }




  export type LessonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithAggregationInput | LessonOrderByWithAggregationInput[]
    by: LessonScalarFieldEnum[] | LessonScalarFieldEnum
    having?: LessonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonCountAggregateInputType | true
    _avg?: LessonAvgAggregateInputType
    _sum?: LessonSumAggregateInputType
    _min?: LessonMinAggregateInputType
    _max?: LessonMaxAggregateInputType
  }

  export type LessonGroupByOutputType = {
    id: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description: string | null
    imageUrl: string | null
    sortOrder: number
    parentId: number | null
    isActive: boolean
    createdBy: number
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: LessonCountAggregateOutputType | null
    _avg: LessonAvgAggregateOutputType | null
    _sum: LessonSumAggregateOutputType | null
    _min: LessonMinAggregateOutputType | null
    _max: LessonMaxAggregateOutputType | null
  }

  type GetLessonGroupByPayload<T extends LessonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonGroupByOutputType[P]>
            : GetScalarType<T[P], LessonGroupByOutputType[P]>
        }
      >
    >


  export type LessonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonTypeId?: boolean
    courseId?: boolean
    courseInstructorId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    parentId?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    parent?: boolean | Lesson$parentArgs<ExtArgs>
    children?: boolean | Lesson$childrenArgs<ExtArgs>
    lessonType?: boolean | LessonTypeDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructorDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Lesson$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Lesson$deletedByUserArgs<ExtArgs>
    lessonContent?: boolean | Lesson$lessonContentArgs<ExtArgs>
    lessonViewLessonId?: boolean | Lesson$lessonViewLessonIdArgs<ExtArgs>
    lessonAttemptLessonId?: boolean | Lesson$lessonAttemptLessonIdArgs<ExtArgs>
    lessonPrerequisiteLessonId?: boolean | Lesson$lessonPrerequisiteLessonIdArgs<ExtArgs>
    lessonPrerequisiteRequiredLessonId?: boolean | Lesson$lessonPrerequisiteRequiredLessonIdArgs<ExtArgs>
    questionSetLessonId?: boolean | Lesson$questionSetLessonIdArgs<ExtArgs>
    _count?: boolean | LessonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>

  export type LessonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonTypeId?: boolean
    courseId?: boolean
    courseInstructorId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    parentId?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    parent?: boolean | Lesson$parentArgs<ExtArgs>
    lessonType?: boolean | LessonTypeDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructorDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Lesson$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Lesson$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>

  export type LessonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lessonTypeId?: boolean
    courseId?: boolean
    courseInstructorId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    parentId?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    parent?: boolean | Lesson$parentArgs<ExtArgs>
    lessonType?: boolean | LessonTypeDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructorDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Lesson$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Lesson$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["lesson"]>

  export type LessonSelectScalar = {
    id?: boolean
    lessonTypeId?: boolean
    courseId?: boolean
    courseInstructorId?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    sortOrder?: boolean
    parentId?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type LessonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lessonTypeId" | "courseId" | "courseInstructorId" | "name" | "description" | "imageUrl" | "sortOrder" | "parentId" | "isActive" | "createdBy" | "updatedBy" | "deletedBy" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["lesson"]>
  export type LessonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Lesson$parentArgs<ExtArgs>
    children?: boolean | Lesson$childrenArgs<ExtArgs>
    lessonType?: boolean | LessonTypeDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructorDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Lesson$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Lesson$deletedByUserArgs<ExtArgs>
    lessonContent?: boolean | Lesson$lessonContentArgs<ExtArgs>
    lessonViewLessonId?: boolean | Lesson$lessonViewLessonIdArgs<ExtArgs>
    lessonAttemptLessonId?: boolean | Lesson$lessonAttemptLessonIdArgs<ExtArgs>
    lessonPrerequisiteLessonId?: boolean | Lesson$lessonPrerequisiteLessonIdArgs<ExtArgs>
    lessonPrerequisiteRequiredLessonId?: boolean | Lesson$lessonPrerequisiteRequiredLessonIdArgs<ExtArgs>
    questionSetLessonId?: boolean | Lesson$questionSetLessonIdArgs<ExtArgs>
    _count?: boolean | LessonCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LessonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Lesson$parentArgs<ExtArgs>
    lessonType?: boolean | LessonTypeDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructorDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Lesson$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Lesson$deletedByUserArgs<ExtArgs>
  }
  export type LessonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Lesson$parentArgs<ExtArgs>
    lessonType?: boolean | LessonTypeDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    courseInstructor?: boolean | CourseInstructorDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Lesson$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Lesson$deletedByUserArgs<ExtArgs>
  }

  export type $LessonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lesson"
    objects: {
      parent: Prisma.$LessonPayload<ExtArgs> | null
      children: Prisma.$LessonPayload<ExtArgs>[]
      lessonType: Prisma.$LessonTypePayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
      courseInstructor: Prisma.$CourseInstructorPayload<ExtArgs>
      createdByUser: Prisma.$UserPayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      lessonContent: Prisma.$LessonContentPayload<ExtArgs>[]
      lessonViewLessonId: Prisma.$LessonViewPayload<ExtArgs>[]
      lessonAttemptLessonId: Prisma.$LessonAttemptPayload<ExtArgs>[]
      lessonPrerequisiteLessonId: Prisma.$LessonPrerequisitePayload<ExtArgs>[]
      lessonPrerequisiteRequiredLessonId: Prisma.$LessonPrerequisitePayload<ExtArgs>[]
      questionSetLessonId: Prisma.$QuestionSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lessonTypeId: number
      courseId: number
      courseInstructorId: number
      name: string
      description: string | null
      imageUrl: string | null
      sortOrder: number
      /**
       * บทเรียนย่อย อ้างอิง lessonId
       */
      parentId: number | null
      isActive: boolean
      createdBy: number
      updatedBy: number | null
      deletedBy: number | null
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["lesson"]>
    composites: {}
  }

  type LessonGetPayload<S extends boolean | null | undefined | LessonDefaultArgs> = $Result.GetResult<Prisma.$LessonPayload, S>

  type LessonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonCountAggregateInputType | true
    }

  export interface LessonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lesson'], meta: { name: 'Lesson' } }
    /**
     * Find zero or one Lesson that matches the filter.
     * @param {LessonFindUniqueArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonFindUniqueArgs>(args: SelectSubset<T, LessonFindUniqueArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lesson that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonFindUniqueOrThrowArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lesson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonFindFirstArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonFindFirstArgs>(args?: SelectSubset<T, LessonFindFirstArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lesson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonFindFirstOrThrowArgs} args - Arguments to find a Lesson
     * @example
     * // Get one Lesson
     * const lesson = await prisma.lesson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lesson.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lesson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonWithIdOnly = await prisma.lesson.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonFindManyArgs>(args?: SelectSubset<T, LessonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lesson.
     * @param {LessonCreateArgs} args - Arguments to create a Lesson.
     * @example
     * // Create one Lesson
     * const Lesson = await prisma.lesson.create({
     *   data: {
     *     // ... data to create a Lesson
     *   }
     * })
     * 
     */
    create<T extends LessonCreateArgs>(args: SelectSubset<T, LessonCreateArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lessons.
     * @param {LessonCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lesson = await prisma.lesson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonCreateManyArgs>(args?: SelectSubset<T, LessonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lessons and returns the data saved in the database.
     * @param {LessonCreateManyAndReturnArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lesson = await prisma.lesson.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lessons and only return the `id`
     * const lessonWithIdOnly = await prisma.lesson.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lesson.
     * @param {LessonDeleteArgs} args - Arguments to delete one Lesson.
     * @example
     * // Delete one Lesson
     * const Lesson = await prisma.lesson.delete({
     *   where: {
     *     // ... filter to delete one Lesson
     *   }
     * })
     * 
     */
    delete<T extends LessonDeleteArgs>(args: SelectSubset<T, LessonDeleteArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lesson.
     * @param {LessonUpdateArgs} args - Arguments to update one Lesson.
     * @example
     * // Update one Lesson
     * const lesson = await prisma.lesson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonUpdateArgs>(args: SelectSubset<T, LessonUpdateArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lessons.
     * @param {LessonDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lesson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonDeleteManyArgs>(args?: SelectSubset<T, LessonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lesson = await prisma.lesson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonUpdateManyArgs>(args: SelectSubset<T, LessonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons and returns the data updated in the database.
     * @param {LessonUpdateManyAndReturnArgs} args - Arguments to update many Lessons.
     * @example
     * // Update many Lessons
     * const lesson = await prisma.lesson.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lessons and only return the `id`
     * const lessonWithIdOnly = await prisma.lesson.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lesson.
     * @param {LessonUpsertArgs} args - Arguments to update or create a Lesson.
     * @example
     * // Update or create a Lesson
     * const lesson = await prisma.lesson.upsert({
     *   create: {
     *     // ... data to create a Lesson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lesson we want to update
     *   }
     * })
     */
    upsert<T extends LessonUpsertArgs>(args: SelectSubset<T, LessonUpsertArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lesson.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends LessonCountArgs>(
      args?: Subset<T, LessonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonAggregateArgs>(args: Subset<T, LessonAggregateArgs>): Prisma.PrismaPromise<GetLessonAggregateType<T>>

    /**
     * Group by Lesson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonGroupByArgs['orderBy'] }
        : { orderBy?: LessonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lesson model
   */
  readonly fields: LessonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lesson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Lesson$parentArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$parentArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Lesson$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonType<T extends LessonTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonTypeDefaultArgs<ExtArgs>>): Prisma__LessonTypeClient<$Result.GetResult<Prisma.$LessonTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    courseInstructor<T extends CourseInstructorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseInstructorDefaultArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends Lesson$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends Lesson$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    lessonContent<T extends Lesson$lessonContentArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$lessonContentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonViewLessonId<T extends Lesson$lessonViewLessonIdArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$lessonViewLessonIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonAttemptLessonId<T extends Lesson$lessonAttemptLessonIdArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$lessonAttemptLessonIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonPrerequisiteLessonId<T extends Lesson$lessonPrerequisiteLessonIdArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$lessonPrerequisiteLessonIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonPrerequisiteRequiredLessonId<T extends Lesson$lessonPrerequisiteRequiredLessonIdArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$lessonPrerequisiteRequiredLessonIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSetLessonId<T extends Lesson$questionSetLessonIdArgs<ExtArgs> = {}>(args?: Subset<T, Lesson$questionSetLessonIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lesson model
   */
  interface LessonFieldRefs {
    readonly id: FieldRef<"Lesson", 'Int'>
    readonly lessonTypeId: FieldRef<"Lesson", 'Int'>
    readonly courseId: FieldRef<"Lesson", 'Int'>
    readonly courseInstructorId: FieldRef<"Lesson", 'Int'>
    readonly name: FieldRef<"Lesson", 'String'>
    readonly description: FieldRef<"Lesson", 'String'>
    readonly imageUrl: FieldRef<"Lesson", 'String'>
    readonly sortOrder: FieldRef<"Lesson", 'Int'>
    readonly parentId: FieldRef<"Lesson", 'Int'>
    readonly isActive: FieldRef<"Lesson", 'Boolean'>
    readonly createdBy: FieldRef<"Lesson", 'Int'>
    readonly updatedBy: FieldRef<"Lesson", 'Int'>
    readonly deletedBy: FieldRef<"Lesson", 'Int'>
    readonly createdAt: FieldRef<"Lesson", 'DateTime'>
    readonly updatedAt: FieldRef<"Lesson", 'DateTime'>
    readonly deletedAt: FieldRef<"Lesson", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Lesson findUnique
   */
  export type LessonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson findUniqueOrThrow
   */
  export type LessonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson findFirst
   */
  export type LessonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson findFirstOrThrow
   */
  export type LessonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lesson to fetch.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson findMany
   */
  export type LessonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lessons.
     */
    cursor?: LessonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson create
   */
  export type LessonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * The data needed to create a Lesson.
     */
    data: XOR<LessonCreateInput, LessonUncheckedCreateInput>
  }

  /**
   * Lesson createMany
   */
  export type LessonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lessons.
     */
    data: LessonCreateManyInput | LessonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lesson createManyAndReturn
   */
  export type LessonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * The data used to create many Lessons.
     */
    data: LessonCreateManyInput | LessonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lesson update
   */
  export type LessonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * The data needed to update a Lesson.
     */
    data: XOR<LessonUpdateInput, LessonUncheckedUpdateInput>
    /**
     * Choose, which Lesson to update.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson updateMany
   */
  export type LessonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonWhereInput
    /**
     * Limit how many Lessons to update.
     */
    limit?: number
  }

  /**
   * Lesson updateManyAndReturn
   */
  export type LessonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonWhereInput
    /**
     * Limit how many Lessons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lesson upsert
   */
  export type LessonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * The filter to search for the Lesson to update in case it exists.
     */
    where: LessonWhereUniqueInput
    /**
     * In case the Lesson found by the `where` argument doesn't exist, create a new Lesson with this data.
     */
    create: XOR<LessonCreateInput, LessonUncheckedCreateInput>
    /**
     * In case the Lesson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonUpdateInput, LessonUncheckedUpdateInput>
  }

  /**
   * Lesson delete
   */
  export type LessonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    /**
     * Filter which Lesson to delete.
     */
    where: LessonWhereUniqueInput
  }

  /**
   * Lesson deleteMany
   */
  export type LessonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to delete
     */
    where?: LessonWhereInput
    /**
     * Limit how many Lessons to delete.
     */
    limit?: number
  }

  /**
   * Lesson.parent
   */
  export type Lesson$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
  }

  /**
   * Lesson.children
   */
  export type Lesson$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * Lesson.updatedByUser
   */
  export type Lesson$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Lesson.deletedByUser
   */
  export type Lesson$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Lesson.lessonContent
   */
  export type Lesson$lessonContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    where?: LessonContentWhereInput
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    cursor?: LessonContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * Lesson.lessonViewLessonId
   */
  export type Lesson$lessonViewLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    where?: LessonViewWhereInput
    orderBy?: LessonViewOrderByWithRelationInput | LessonViewOrderByWithRelationInput[]
    cursor?: LessonViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonViewScalarFieldEnum | LessonViewScalarFieldEnum[]
  }

  /**
   * Lesson.lessonAttemptLessonId
   */
  export type Lesson$lessonAttemptLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    where?: LessonAttemptWhereInput
    orderBy?: LessonAttemptOrderByWithRelationInput | LessonAttemptOrderByWithRelationInput[]
    cursor?: LessonAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonAttemptScalarFieldEnum | LessonAttemptScalarFieldEnum[]
  }

  /**
   * Lesson.lessonPrerequisiteLessonId
   */
  export type Lesson$lessonPrerequisiteLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    where?: LessonPrerequisiteWhereInput
    orderBy?: LessonPrerequisiteOrderByWithRelationInput | LessonPrerequisiteOrderByWithRelationInput[]
    cursor?: LessonPrerequisiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonPrerequisiteScalarFieldEnum | LessonPrerequisiteScalarFieldEnum[]
  }

  /**
   * Lesson.lessonPrerequisiteRequiredLessonId
   */
  export type Lesson$lessonPrerequisiteRequiredLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonPrerequisite
     */
    select?: LessonPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonPrerequisite
     */
    omit?: LessonPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonPrerequisiteInclude<ExtArgs> | null
    where?: LessonPrerequisiteWhereInput
    orderBy?: LessonPrerequisiteOrderByWithRelationInput | LessonPrerequisiteOrderByWithRelationInput[]
    cursor?: LessonPrerequisiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonPrerequisiteScalarFieldEnum | LessonPrerequisiteScalarFieldEnum[]
  }

  /**
   * Lesson.questionSetLessonId
   */
  export type Lesson$questionSetLessonIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * Lesson without action
   */
  export type LessonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    createdBy: number
    updatedBy: number
    deletedBy: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: number
    name: string
    isActive: boolean
    createdBy: number
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Organization$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Organization$deletedByUserArgs<ExtArgs>
    departments?: boolean | Organization$departmentsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Organization$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Organization$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Organization$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Organization$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isActive" | "createdBy" | "updatedBy" | "deletedBy" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Organization$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Organization$deletedByUserArgs<ExtArgs>
    departments?: boolean | Organization$departmentsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Organization$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Organization$deletedByUserArgs<ExtArgs>
  }
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | Organization$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | Organization$deletedByUserArgs<ExtArgs>
  }

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      createdByUser: Prisma.$UserPayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isActive: boolean
      createdBy: number
      updatedBy: number | null
      deletedBy: number | null
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends Organization$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Organization$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends Organization$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, Organization$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    departments<T extends Organization$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'Int'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly isActive: FieldRef<"Organization", 'Boolean'>
    readonly createdBy: FieldRef<"Organization", 'Int'>
    readonly updatedBy: FieldRef<"Organization", 'Int'>
    readonly deletedBy: FieldRef<"Organization", 'Int'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
    readonly deletedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.updatedByUser
   */
  export type Organization$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Organization.deletedByUser
   */
  export type Organization$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Organization.departments
   */
  export type Organization$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model QuestionBank
   */

  export type AggregateQuestionBank = {
    _count: QuestionBankCountAggregateOutputType | null
    _avg: QuestionBankAvgAggregateOutputType | null
    _sum: QuestionBankSumAggregateOutputType | null
    _min: QuestionBankMinAggregateOutputType | null
    _max: QuestionBankMaxAggregateOutputType | null
  }

  export type QuestionBankAvgAggregateOutputType = {
    id: number | null
    questionTypeId: number | null
    questionLevelId: number | null
    questionSetId: number | null
    score: number | null
    sortOrder: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type QuestionBankSumAggregateOutputType = {
    id: number | null
    questionTypeId: number | null
    questionLevelId: number | null
    questionSetId: number | null
    score: number | null
    sortOrder: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type QuestionBankMinAggregateOutputType = {
    id: number | null
    questionTypeId: number | null
    questionLevelId: number | null
    questionSetId: number | null
    questionText: string | null
    score: number | null
    imageUrl: string | null
    explanation: string | null
    versioning: string | null
    creationMethod: $Enums.CreationMethod | null
    sortOrder: number | null
    randomize: boolean | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type QuestionBankMaxAggregateOutputType = {
    id: number | null
    questionTypeId: number | null
    questionLevelId: number | null
    questionSetId: number | null
    questionText: string | null
    score: number | null
    imageUrl: string | null
    explanation: string | null
    versioning: string | null
    creationMethod: $Enums.CreationMethod | null
    sortOrder: number | null
    randomize: boolean | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type QuestionBankCountAggregateOutputType = {
    id: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: number
    score: number
    imageUrl: number
    answerData: number
    explanation: number
    versioning: number
    creationMethod: number
    sortOrder: number
    randomize: number
    isActive: number
    createdBy: number
    updatedBy: number
    deletedBy: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type QuestionBankAvgAggregateInputType = {
    id?: true
    questionTypeId?: true
    questionLevelId?: true
    questionSetId?: true
    score?: true
    sortOrder?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type QuestionBankSumAggregateInputType = {
    id?: true
    questionTypeId?: true
    questionLevelId?: true
    questionSetId?: true
    score?: true
    sortOrder?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type QuestionBankMinAggregateInputType = {
    id?: true
    questionTypeId?: true
    questionLevelId?: true
    questionSetId?: true
    questionText?: true
    score?: true
    imageUrl?: true
    explanation?: true
    versioning?: true
    creationMethod?: true
    sortOrder?: true
    randomize?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type QuestionBankMaxAggregateInputType = {
    id?: true
    questionTypeId?: true
    questionLevelId?: true
    questionSetId?: true
    questionText?: true
    score?: true
    imageUrl?: true
    explanation?: true
    versioning?: true
    creationMethod?: true
    sortOrder?: true
    randomize?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type QuestionBankCountAggregateInputType = {
    id?: true
    questionTypeId?: true
    questionLevelId?: true
    questionSetId?: true
    questionText?: true
    score?: true
    imageUrl?: true
    answerData?: true
    explanation?: true
    versioning?: true
    creationMethod?: true
    sortOrder?: true
    randomize?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type QuestionBankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionBank to aggregate.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionBanks
    **/
    _count?: true | QuestionBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionBankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionBankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionBankMaxAggregateInputType
  }

  export type GetQuestionBankAggregateType<T extends QuestionBankAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionBank[P]>
      : GetScalarType<T[P], AggregateQuestionBank[P]>
  }




  export type QuestionBankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithAggregationInput | QuestionBankOrderByWithAggregationInput[]
    by: QuestionBankScalarFieldEnum[] | QuestionBankScalarFieldEnum
    having?: QuestionBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionBankCountAggregateInputType | true
    _avg?: QuestionBankAvgAggregateInputType
    _sum?: QuestionBankSumAggregateInputType
    _min?: QuestionBankMinAggregateInputType
    _max?: QuestionBankMaxAggregateInputType
  }

  export type QuestionBankGroupByOutputType = {
    id: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl: string | null
    answerData: JsonValue
    explanation: string | null
    versioning: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize: boolean
    isActive: boolean
    createdBy: number
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: QuestionBankCountAggregateOutputType | null
    _avg: QuestionBankAvgAggregateOutputType | null
    _sum: QuestionBankSumAggregateOutputType | null
    _min: QuestionBankMinAggregateOutputType | null
    _max: QuestionBankMaxAggregateOutputType | null
  }

  type GetQuestionBankGroupByPayload<T extends QuestionBankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionBankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionBankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionBankGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionBankGroupByOutputType[P]>
        }
      >
    >


  export type QuestionBankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionTypeId?: boolean
    questionLevelId?: boolean
    questionSetId?: boolean
    questionText?: boolean
    score?: boolean
    imageUrl?: boolean
    answerData?: boolean
    explanation?: boolean
    versioning?: boolean
    creationMethod?: boolean
    sortOrder?: boolean
    randomize?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    questionType?: boolean | QuestionTypeDefaultArgs<ExtArgs>
    questionLevel?: boolean | QuestionLevelDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionBank$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionBank$deletedByUserArgs<ExtArgs>
    answerSubmission?: boolean | QuestionBank$answerSubmissionArgs<ExtArgs>
    _count?: boolean | QuestionBankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionBank"]>

  export type QuestionBankSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionTypeId?: boolean
    questionLevelId?: boolean
    questionSetId?: boolean
    questionText?: boolean
    score?: boolean
    imageUrl?: boolean
    answerData?: boolean
    explanation?: boolean
    versioning?: boolean
    creationMethod?: boolean
    sortOrder?: boolean
    randomize?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    questionType?: boolean | QuestionTypeDefaultArgs<ExtArgs>
    questionLevel?: boolean | QuestionLevelDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionBank$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionBank$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["questionBank"]>

  export type QuestionBankSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionTypeId?: boolean
    questionLevelId?: boolean
    questionSetId?: boolean
    questionText?: boolean
    score?: boolean
    imageUrl?: boolean
    answerData?: boolean
    explanation?: boolean
    versioning?: boolean
    creationMethod?: boolean
    sortOrder?: boolean
    randomize?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    questionType?: boolean | QuestionTypeDefaultArgs<ExtArgs>
    questionLevel?: boolean | QuestionLevelDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionBank$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionBank$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["questionBank"]>

  export type QuestionBankSelectScalar = {
    id?: boolean
    questionTypeId?: boolean
    questionLevelId?: boolean
    questionSetId?: boolean
    questionText?: boolean
    score?: boolean
    imageUrl?: boolean
    answerData?: boolean
    explanation?: boolean
    versioning?: boolean
    creationMethod?: boolean
    sortOrder?: boolean
    randomize?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type QuestionBankOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionTypeId" | "questionLevelId" | "questionSetId" | "questionText" | "score" | "imageUrl" | "answerData" | "explanation" | "versioning" | "creationMethod" | "sortOrder" | "randomize" | "isActive" | "createdBy" | "updatedBy" | "deletedBy" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["questionBank"]>
  export type QuestionBankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionType?: boolean | QuestionTypeDefaultArgs<ExtArgs>
    questionLevel?: boolean | QuestionLevelDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionBank$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionBank$deletedByUserArgs<ExtArgs>
    answerSubmission?: boolean | QuestionBank$answerSubmissionArgs<ExtArgs>
    _count?: boolean | QuestionBankCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionBankIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionType?: boolean | QuestionTypeDefaultArgs<ExtArgs>
    questionLevel?: boolean | QuestionLevelDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionBank$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionBank$deletedByUserArgs<ExtArgs>
  }
  export type QuestionBankIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionType?: boolean | QuestionTypeDefaultArgs<ExtArgs>
    questionLevel?: boolean | QuestionLevelDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionBank$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionBank$deletedByUserArgs<ExtArgs>
  }

  export type $QuestionBankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionBank"
    objects: {
      questionType: Prisma.$QuestionTypePayload<ExtArgs>
      questionLevel: Prisma.$QuestionLevelPayload<ExtArgs>
      questionSet: Prisma.$QuestionSetPayload<ExtArgs>
      createdByUser: Prisma.$UserPayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      answerSubmission: Prisma.$AnswerSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      questionTypeId: number
      questionLevelId: number
      questionSetId: number
      questionText: string
      score: number
      imageUrl: string | null
      /**
       * ตัวเลือกและคำตอบที่ถูกต้อง
       */
      answerData: Prisma.JsonValue
      /**
       * คำอธิบายเฉลย
       */
      explanation: string | null
      versioning: string | null
      creationMethod: $Enums.CreationMethod
      sortOrder: number
      /**
       * ใช้สุ่มหรือไม่
       */
      randomize: boolean
      isActive: boolean
      createdBy: number
      updatedBy: number | null
      deletedBy: number | null
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["questionBank"]>
    composites: {}
  }

  type QuestionBankGetPayload<S extends boolean | null | undefined | QuestionBankDefaultArgs> = $Result.GetResult<Prisma.$QuestionBankPayload, S>

  type QuestionBankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionBankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionBankCountAggregateInputType | true
    }

  export interface QuestionBankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionBank'], meta: { name: 'QuestionBank' } }
    /**
     * Find zero or one QuestionBank that matches the filter.
     * @param {QuestionBankFindUniqueArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionBankFindUniqueArgs>(args: SelectSubset<T, QuestionBankFindUniqueArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionBank that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionBankFindUniqueOrThrowArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionBankFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionBankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankFindFirstArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionBankFindFirstArgs>(args?: SelectSubset<T, QuestionBankFindFirstArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionBank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankFindFirstOrThrowArgs} args - Arguments to find a QuestionBank
     * @example
     * // Get one QuestionBank
     * const questionBank = await prisma.questionBank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionBankFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionBankFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionBanks
     * const questionBanks = await prisma.questionBank.findMany()
     * 
     * // Get first 10 QuestionBanks
     * const questionBanks = await prisma.questionBank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionBankWithIdOnly = await prisma.questionBank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionBankFindManyArgs>(args?: SelectSubset<T, QuestionBankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionBank.
     * @param {QuestionBankCreateArgs} args - Arguments to create a QuestionBank.
     * @example
     * // Create one QuestionBank
     * const QuestionBank = await prisma.questionBank.create({
     *   data: {
     *     // ... data to create a QuestionBank
     *   }
     * })
     * 
     */
    create<T extends QuestionBankCreateArgs>(args: SelectSubset<T, QuestionBankCreateArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionBanks.
     * @param {QuestionBankCreateManyArgs} args - Arguments to create many QuestionBanks.
     * @example
     * // Create many QuestionBanks
     * const questionBank = await prisma.questionBank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionBankCreateManyArgs>(args?: SelectSubset<T, QuestionBankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionBanks and returns the data saved in the database.
     * @param {QuestionBankCreateManyAndReturnArgs} args - Arguments to create many QuestionBanks.
     * @example
     * // Create many QuestionBanks
     * const questionBank = await prisma.questionBank.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionBanks and only return the `id`
     * const questionBankWithIdOnly = await prisma.questionBank.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionBankCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionBankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionBank.
     * @param {QuestionBankDeleteArgs} args - Arguments to delete one QuestionBank.
     * @example
     * // Delete one QuestionBank
     * const QuestionBank = await prisma.questionBank.delete({
     *   where: {
     *     // ... filter to delete one QuestionBank
     *   }
     * })
     * 
     */
    delete<T extends QuestionBankDeleteArgs>(args: SelectSubset<T, QuestionBankDeleteArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionBank.
     * @param {QuestionBankUpdateArgs} args - Arguments to update one QuestionBank.
     * @example
     * // Update one QuestionBank
     * const questionBank = await prisma.questionBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionBankUpdateArgs>(args: SelectSubset<T, QuestionBankUpdateArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionBanks.
     * @param {QuestionBankDeleteManyArgs} args - Arguments to filter QuestionBanks to delete.
     * @example
     * // Delete a few QuestionBanks
     * const { count } = await prisma.questionBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionBankDeleteManyArgs>(args?: SelectSubset<T, QuestionBankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionBanks
     * const questionBank = await prisma.questionBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionBankUpdateManyArgs>(args: SelectSubset<T, QuestionBankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionBanks and returns the data updated in the database.
     * @param {QuestionBankUpdateManyAndReturnArgs} args - Arguments to update many QuestionBanks.
     * @example
     * // Update many QuestionBanks
     * const questionBank = await prisma.questionBank.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionBanks and only return the `id`
     * const questionBankWithIdOnly = await prisma.questionBank.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionBankUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionBankUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionBank.
     * @param {QuestionBankUpsertArgs} args - Arguments to update or create a QuestionBank.
     * @example
     * // Update or create a QuestionBank
     * const questionBank = await prisma.questionBank.upsert({
     *   create: {
     *     // ... data to create a QuestionBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionBank we want to update
     *   }
     * })
     */
    upsert<T extends QuestionBankUpsertArgs>(args: SelectSubset<T, QuestionBankUpsertArgs<ExtArgs>>): Prisma__QuestionBankClient<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankCountArgs} args - Arguments to filter QuestionBanks to count.
     * @example
     * // Count the number of QuestionBanks
     * const count = await prisma.questionBank.count({
     *   where: {
     *     // ... the filter for the QuestionBanks we want to count
     *   }
     * })
    **/
    count<T extends QuestionBankCountArgs>(
      args?: Subset<T, QuestionBankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionBankAggregateArgs>(args: Subset<T, QuestionBankAggregateArgs>): Prisma.PrismaPromise<GetQuestionBankAggregateType<T>>

    /**
     * Group by QuestionBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionBankGroupByArgs['orderBy'] }
        : { orderBy?: QuestionBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionBank model
   */
  readonly fields: QuestionBankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionBankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionType<T extends QuestionTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionTypeDefaultArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionLevel<T extends QuestionLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionLevelDefaultArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionSet<T extends QuestionSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSetDefaultArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends QuestionBank$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBank$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends QuestionBank$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBank$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    answerSubmission<T extends QuestionBank$answerSubmissionArgs<ExtArgs> = {}>(args?: Subset<T, QuestionBank$answerSubmissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionBank model
   */
  interface QuestionBankFieldRefs {
    readonly id: FieldRef<"QuestionBank", 'Int'>
    readonly questionTypeId: FieldRef<"QuestionBank", 'Int'>
    readonly questionLevelId: FieldRef<"QuestionBank", 'Int'>
    readonly questionSetId: FieldRef<"QuestionBank", 'Int'>
    readonly questionText: FieldRef<"QuestionBank", 'String'>
    readonly score: FieldRef<"QuestionBank", 'Int'>
    readonly imageUrl: FieldRef<"QuestionBank", 'String'>
    readonly answerData: FieldRef<"QuestionBank", 'Json'>
    readonly explanation: FieldRef<"QuestionBank", 'String'>
    readonly versioning: FieldRef<"QuestionBank", 'String'>
    readonly creationMethod: FieldRef<"QuestionBank", 'CreationMethod'>
    readonly sortOrder: FieldRef<"QuestionBank", 'Int'>
    readonly randomize: FieldRef<"QuestionBank", 'Boolean'>
    readonly isActive: FieldRef<"QuestionBank", 'Boolean'>
    readonly createdBy: FieldRef<"QuestionBank", 'Int'>
    readonly updatedBy: FieldRef<"QuestionBank", 'Int'>
    readonly deletedBy: FieldRef<"QuestionBank", 'Int'>
    readonly createdAt: FieldRef<"QuestionBank", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionBank", 'DateTime'>
    readonly deletedAt: FieldRef<"QuestionBank", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionBank findUnique
   */
  export type QuestionBankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank findUniqueOrThrow
   */
  export type QuestionBankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank findFirst
   */
  export type QuestionBankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionBanks.
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionBanks.
     */
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionBank findFirstOrThrow
   */
  export type QuestionBankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBank to fetch.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionBanks.
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionBanks.
     */
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionBank findMany
   */
  export type QuestionBankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter, which QuestionBanks to fetch.
     */
    where?: QuestionBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionBanks to fetch.
     */
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionBanks.
     */
    cursor?: QuestionBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionBanks.
     */
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionBank create
   */
  export type QuestionBankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionBank.
     */
    data: XOR<QuestionBankCreateInput, QuestionBankUncheckedCreateInput>
  }

  /**
   * QuestionBank createMany
   */
  export type QuestionBankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionBanks.
     */
    data: QuestionBankCreateManyInput | QuestionBankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionBank createManyAndReturn
   */
  export type QuestionBankCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionBanks.
     */
    data: QuestionBankCreateManyInput | QuestionBankCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionBank update
   */
  export type QuestionBankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionBank.
     */
    data: XOR<QuestionBankUpdateInput, QuestionBankUncheckedUpdateInput>
    /**
     * Choose, which QuestionBank to update.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank updateMany
   */
  export type QuestionBankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionBanks.
     */
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyInput>
    /**
     * Filter which QuestionBanks to update
     */
    where?: QuestionBankWhereInput
    /**
     * Limit how many QuestionBanks to update.
     */
    limit?: number
  }

  /**
   * QuestionBank updateManyAndReturn
   */
  export type QuestionBankUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * The data used to update QuestionBanks.
     */
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyInput>
    /**
     * Filter which QuestionBanks to update
     */
    where?: QuestionBankWhereInput
    /**
     * Limit how many QuestionBanks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionBank upsert
   */
  export type QuestionBankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionBank to update in case it exists.
     */
    where: QuestionBankWhereUniqueInput
    /**
     * In case the QuestionBank found by the `where` argument doesn't exist, create a new QuestionBank with this data.
     */
    create: XOR<QuestionBankCreateInput, QuestionBankUncheckedCreateInput>
    /**
     * In case the QuestionBank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionBankUpdateInput, QuestionBankUncheckedUpdateInput>
  }

  /**
   * QuestionBank delete
   */
  export type QuestionBankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    /**
     * Filter which QuestionBank to delete.
     */
    where: QuestionBankWhereUniqueInput
  }

  /**
   * QuestionBank deleteMany
   */
  export type QuestionBankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionBanks to delete
     */
    where?: QuestionBankWhereInput
    /**
     * Limit how many QuestionBanks to delete.
     */
    limit?: number
  }

  /**
   * QuestionBank.updatedByUser
   */
  export type QuestionBank$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QuestionBank.deletedByUser
   */
  export type QuestionBank$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QuestionBank.answerSubmission
   */
  export type QuestionBank$answerSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    where?: AnswerSubmissionWhereInput
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    cursor?: AnswerSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerSubmissionScalarFieldEnum | AnswerSubmissionScalarFieldEnum[]
  }

  /**
   * QuestionBank without action
   */
  export type QuestionBankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
  }


  /**
   * Model QuestionLevel
   */

  export type AggregateQuestionLevel = {
    _count: QuestionLevelCountAggregateOutputType | null
    _avg: QuestionLevelAvgAggregateOutputType | null
    _sum: QuestionLevelSumAggregateOutputType | null
    _min: QuestionLevelMinAggregateOutputType | null
    _max: QuestionLevelMaxAggregateOutputType | null
  }

  export type QuestionLevelAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestionLevelSumAggregateOutputType = {
    id: number | null
  }

  export type QuestionLevelMinAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type QuestionLevelMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type QuestionLevelCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    _all: number
  }


  export type QuestionLevelAvgAggregateInputType = {
    id?: true
  }

  export type QuestionLevelSumAggregateInputType = {
    id?: true
  }

  export type QuestionLevelMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type QuestionLevelMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type QuestionLevelCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    _all?: true
  }

  export type QuestionLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionLevel to aggregate.
     */
    where?: QuestionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionLevels to fetch.
     */
    orderBy?: QuestionLevelOrderByWithRelationInput | QuestionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionLevels
    **/
    _count?: true | QuestionLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionLevelMaxAggregateInputType
  }

  export type GetQuestionLevelAggregateType<T extends QuestionLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionLevel[P]>
      : GetScalarType<T[P], AggregateQuestionLevel[P]>
  }




  export type QuestionLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionLevelWhereInput
    orderBy?: QuestionLevelOrderByWithAggregationInput | QuestionLevelOrderByWithAggregationInput[]
    by: QuestionLevelScalarFieldEnum[] | QuestionLevelScalarFieldEnum
    having?: QuestionLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionLevelCountAggregateInputType | true
    _avg?: QuestionLevelAvgAggregateInputType
    _sum?: QuestionLevelSumAggregateInputType
    _min?: QuestionLevelMinAggregateInputType
    _max?: QuestionLevelMaxAggregateInputType
  }

  export type QuestionLevelGroupByOutputType = {
    id: number
    name: string
    isActive: boolean
    _count: QuestionLevelCountAggregateOutputType | null
    _avg: QuestionLevelAvgAggregateOutputType | null
    _sum: QuestionLevelSumAggregateOutputType | null
    _min: QuestionLevelMinAggregateOutputType | null
    _max: QuestionLevelMaxAggregateOutputType | null
  }

  type GetQuestionLevelGroupByPayload<T extends QuestionLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionLevelGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionLevelGroupByOutputType[P]>
        }
      >
    >


  export type QuestionLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    questionBank?: boolean | QuestionLevel$questionBankArgs<ExtArgs>
    _count?: boolean | QuestionLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionLevel"]>

  export type QuestionLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["questionLevel"]>

  export type QuestionLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["questionLevel"]>

  export type QuestionLevelSelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
  }

  export type QuestionLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isActive", ExtArgs["result"]["questionLevel"]>
  export type QuestionLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionBank?: boolean | QuestionLevel$questionBankArgs<ExtArgs>
    _count?: boolean | QuestionLevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type QuestionLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $QuestionLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionLevel"
    objects: {
      questionBank: Prisma.$QuestionBankPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isActive: boolean
    }, ExtArgs["result"]["questionLevel"]>
    composites: {}
  }

  type QuestionLevelGetPayload<S extends boolean | null | undefined | QuestionLevelDefaultArgs> = $Result.GetResult<Prisma.$QuestionLevelPayload, S>

  type QuestionLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionLevelCountAggregateInputType | true
    }

  export interface QuestionLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionLevel'], meta: { name: 'QuestionLevel' } }
    /**
     * Find zero or one QuestionLevel that matches the filter.
     * @param {QuestionLevelFindUniqueArgs} args - Arguments to find a QuestionLevel
     * @example
     * // Get one QuestionLevel
     * const questionLevel = await prisma.questionLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionLevelFindUniqueArgs>(args: SelectSubset<T, QuestionLevelFindUniqueArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionLevelFindUniqueOrThrowArgs} args - Arguments to find a QuestionLevel
     * @example
     * // Get one QuestionLevel
     * const questionLevel = await prisma.questionLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelFindFirstArgs} args - Arguments to find a QuestionLevel
     * @example
     * // Get one QuestionLevel
     * const questionLevel = await prisma.questionLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionLevelFindFirstArgs>(args?: SelectSubset<T, QuestionLevelFindFirstArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelFindFirstOrThrowArgs} args - Arguments to find a QuestionLevel
     * @example
     * // Get one QuestionLevel
     * const questionLevel = await prisma.questionLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionLevels
     * const questionLevels = await prisma.questionLevel.findMany()
     * 
     * // Get first 10 QuestionLevels
     * const questionLevels = await prisma.questionLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionLevelWithIdOnly = await prisma.questionLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionLevelFindManyArgs>(args?: SelectSubset<T, QuestionLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionLevel.
     * @param {QuestionLevelCreateArgs} args - Arguments to create a QuestionLevel.
     * @example
     * // Create one QuestionLevel
     * const QuestionLevel = await prisma.questionLevel.create({
     *   data: {
     *     // ... data to create a QuestionLevel
     *   }
     * })
     * 
     */
    create<T extends QuestionLevelCreateArgs>(args: SelectSubset<T, QuestionLevelCreateArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionLevels.
     * @param {QuestionLevelCreateManyArgs} args - Arguments to create many QuestionLevels.
     * @example
     * // Create many QuestionLevels
     * const questionLevel = await prisma.questionLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionLevelCreateManyArgs>(args?: SelectSubset<T, QuestionLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionLevels and returns the data saved in the database.
     * @param {QuestionLevelCreateManyAndReturnArgs} args - Arguments to create many QuestionLevels.
     * @example
     * // Create many QuestionLevels
     * const questionLevel = await prisma.questionLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionLevels and only return the `id`
     * const questionLevelWithIdOnly = await prisma.questionLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionLevel.
     * @param {QuestionLevelDeleteArgs} args - Arguments to delete one QuestionLevel.
     * @example
     * // Delete one QuestionLevel
     * const QuestionLevel = await prisma.questionLevel.delete({
     *   where: {
     *     // ... filter to delete one QuestionLevel
     *   }
     * })
     * 
     */
    delete<T extends QuestionLevelDeleteArgs>(args: SelectSubset<T, QuestionLevelDeleteArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionLevel.
     * @param {QuestionLevelUpdateArgs} args - Arguments to update one QuestionLevel.
     * @example
     * // Update one QuestionLevel
     * const questionLevel = await prisma.questionLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionLevelUpdateArgs>(args: SelectSubset<T, QuestionLevelUpdateArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionLevels.
     * @param {QuestionLevelDeleteManyArgs} args - Arguments to filter QuestionLevels to delete.
     * @example
     * // Delete a few QuestionLevels
     * const { count } = await prisma.questionLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionLevelDeleteManyArgs>(args?: SelectSubset<T, QuestionLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionLevels
     * const questionLevel = await prisma.questionLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionLevelUpdateManyArgs>(args: SelectSubset<T, QuestionLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionLevels and returns the data updated in the database.
     * @param {QuestionLevelUpdateManyAndReturnArgs} args - Arguments to update many QuestionLevels.
     * @example
     * // Update many QuestionLevels
     * const questionLevel = await prisma.questionLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionLevels and only return the `id`
     * const questionLevelWithIdOnly = await prisma.questionLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionLevel.
     * @param {QuestionLevelUpsertArgs} args - Arguments to update or create a QuestionLevel.
     * @example
     * // Update or create a QuestionLevel
     * const questionLevel = await prisma.questionLevel.upsert({
     *   create: {
     *     // ... data to create a QuestionLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionLevel we want to update
     *   }
     * })
     */
    upsert<T extends QuestionLevelUpsertArgs>(args: SelectSubset<T, QuestionLevelUpsertArgs<ExtArgs>>): Prisma__QuestionLevelClient<$Result.GetResult<Prisma.$QuestionLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelCountArgs} args - Arguments to filter QuestionLevels to count.
     * @example
     * // Count the number of QuestionLevels
     * const count = await prisma.questionLevel.count({
     *   where: {
     *     // ... the filter for the QuestionLevels we want to count
     *   }
     * })
    **/
    count<T extends QuestionLevelCountArgs>(
      args?: Subset<T, QuestionLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionLevelAggregateArgs>(args: Subset<T, QuestionLevelAggregateArgs>): Prisma.PrismaPromise<GetQuestionLevelAggregateType<T>>

    /**
     * Group by QuestionLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionLevelGroupByArgs['orderBy'] }
        : { orderBy?: QuestionLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionLevel model
   */
  readonly fields: QuestionLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionBank<T extends QuestionLevel$questionBankArgs<ExtArgs> = {}>(args?: Subset<T, QuestionLevel$questionBankArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionLevel model
   */
  interface QuestionLevelFieldRefs {
    readonly id: FieldRef<"QuestionLevel", 'Int'>
    readonly name: FieldRef<"QuestionLevel", 'String'>
    readonly isActive: FieldRef<"QuestionLevel", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * QuestionLevel findUnique
   */
  export type QuestionLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * Filter, which QuestionLevel to fetch.
     */
    where: QuestionLevelWhereUniqueInput
  }

  /**
   * QuestionLevel findUniqueOrThrow
   */
  export type QuestionLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * Filter, which QuestionLevel to fetch.
     */
    where: QuestionLevelWhereUniqueInput
  }

  /**
   * QuestionLevel findFirst
   */
  export type QuestionLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * Filter, which QuestionLevel to fetch.
     */
    where?: QuestionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionLevels to fetch.
     */
    orderBy?: QuestionLevelOrderByWithRelationInput | QuestionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionLevels.
     */
    cursor?: QuestionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionLevels.
     */
    distinct?: QuestionLevelScalarFieldEnum | QuestionLevelScalarFieldEnum[]
  }

  /**
   * QuestionLevel findFirstOrThrow
   */
  export type QuestionLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * Filter, which QuestionLevel to fetch.
     */
    where?: QuestionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionLevels to fetch.
     */
    orderBy?: QuestionLevelOrderByWithRelationInput | QuestionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionLevels.
     */
    cursor?: QuestionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionLevels.
     */
    distinct?: QuestionLevelScalarFieldEnum | QuestionLevelScalarFieldEnum[]
  }

  /**
   * QuestionLevel findMany
   */
  export type QuestionLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * Filter, which QuestionLevels to fetch.
     */
    where?: QuestionLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionLevels to fetch.
     */
    orderBy?: QuestionLevelOrderByWithRelationInput | QuestionLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionLevels.
     */
    cursor?: QuestionLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionLevels.
     */
    skip?: number
    distinct?: QuestionLevelScalarFieldEnum | QuestionLevelScalarFieldEnum[]
  }

  /**
   * QuestionLevel create
   */
  export type QuestionLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionLevel.
     */
    data: XOR<QuestionLevelCreateInput, QuestionLevelUncheckedCreateInput>
  }

  /**
   * QuestionLevel createMany
   */
  export type QuestionLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionLevels.
     */
    data: QuestionLevelCreateManyInput | QuestionLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionLevel createManyAndReturn
   */
  export type QuestionLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionLevels.
     */
    data: QuestionLevelCreateManyInput | QuestionLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionLevel update
   */
  export type QuestionLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionLevel.
     */
    data: XOR<QuestionLevelUpdateInput, QuestionLevelUncheckedUpdateInput>
    /**
     * Choose, which QuestionLevel to update.
     */
    where: QuestionLevelWhereUniqueInput
  }

  /**
   * QuestionLevel updateMany
   */
  export type QuestionLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionLevels.
     */
    data: XOR<QuestionLevelUpdateManyMutationInput, QuestionLevelUncheckedUpdateManyInput>
    /**
     * Filter which QuestionLevels to update
     */
    where?: QuestionLevelWhereInput
    /**
     * Limit how many QuestionLevels to update.
     */
    limit?: number
  }

  /**
   * QuestionLevel updateManyAndReturn
   */
  export type QuestionLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * The data used to update QuestionLevels.
     */
    data: XOR<QuestionLevelUpdateManyMutationInput, QuestionLevelUncheckedUpdateManyInput>
    /**
     * Filter which QuestionLevels to update
     */
    where?: QuestionLevelWhereInput
    /**
     * Limit how many QuestionLevels to update.
     */
    limit?: number
  }

  /**
   * QuestionLevel upsert
   */
  export type QuestionLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionLevel to update in case it exists.
     */
    where: QuestionLevelWhereUniqueInput
    /**
     * In case the QuestionLevel found by the `where` argument doesn't exist, create a new QuestionLevel with this data.
     */
    create: XOR<QuestionLevelCreateInput, QuestionLevelUncheckedCreateInput>
    /**
     * In case the QuestionLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionLevelUpdateInput, QuestionLevelUncheckedUpdateInput>
  }

  /**
   * QuestionLevel delete
   */
  export type QuestionLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
    /**
     * Filter which QuestionLevel to delete.
     */
    where: QuestionLevelWhereUniqueInput
  }

  /**
   * QuestionLevel deleteMany
   */
  export type QuestionLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionLevels to delete
     */
    where?: QuestionLevelWhereInput
    /**
     * Limit how many QuestionLevels to delete.
     */
    limit?: number
  }

  /**
   * QuestionLevel.questionBank
   */
  export type QuestionLevel$questionBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionLevel without action
   */
  export type QuestionLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionLevel
     */
    select?: QuestionLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionLevel
     */
    omit?: QuestionLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionLevelInclude<ExtArgs> | null
  }


  /**
   * Model QuestionSet
   */

  export type AggregateQuestionSet = {
    _count: QuestionSetCountAggregateOutputType | null
    _avg: QuestionSetAvgAggregateOutputType | null
    _sum: QuestionSetSumAggregateOutputType | null
    _min: QuestionSetMinAggregateOutputType | null
    _max: QuestionSetMaxAggregateOutputType | null
  }

  export type QuestionSetAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    lessonId: number | null
    testTypeId: number | null
    passScore: number | null
    attemptLimit: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type QuestionSetSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    lessonId: number | null
    testTypeId: number | null
    passScore: number | null
    attemptLimit: number | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
  }

  export type QuestionSetMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    lessonId: number | null
    testTypeId: number | null
    name: string | null
    description: string | null
    passScore: number | null
    attemptLimit: number | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type QuestionSetMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    lessonId: number | null
    testTypeId: number | null
    name: string | null
    description: string | null
    passScore: number | null
    attemptLimit: number | null
    isActive: boolean | null
    createdBy: number | null
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type QuestionSetCountAggregateOutputType = {
    id: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: number
    description: number
    passScore: number
    attemptLimit: number
    isActive: number
    createdBy: number
    updatedBy: number
    deletedBy: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type QuestionSetAvgAggregateInputType = {
    id?: true
    courseId?: true
    lessonId?: true
    testTypeId?: true
    passScore?: true
    attemptLimit?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type QuestionSetSumAggregateInputType = {
    id?: true
    courseId?: true
    lessonId?: true
    testTypeId?: true
    passScore?: true
    attemptLimit?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
  }

  export type QuestionSetMinAggregateInputType = {
    id?: true
    courseId?: true
    lessonId?: true
    testTypeId?: true
    name?: true
    description?: true
    passScore?: true
    attemptLimit?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type QuestionSetMaxAggregateInputType = {
    id?: true
    courseId?: true
    lessonId?: true
    testTypeId?: true
    name?: true
    description?: true
    passScore?: true
    attemptLimit?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type QuestionSetCountAggregateInputType = {
    id?: true
    courseId?: true
    lessonId?: true
    testTypeId?: true
    name?: true
    description?: true
    passScore?: true
    attemptLimit?: true
    isActive?: true
    createdBy?: true
    updatedBy?: true
    deletedBy?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type QuestionSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSet to aggregate.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionSets
    **/
    _count?: true | QuestionSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionSetMaxAggregateInputType
  }

  export type GetQuestionSetAggregateType<T extends QuestionSetAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionSet[P]>
      : GetScalarType<T[P], AggregateQuestionSet[P]>
  }




  export type QuestionSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithAggregationInput | QuestionSetOrderByWithAggregationInput[]
    by: QuestionSetScalarFieldEnum[] | QuestionSetScalarFieldEnum
    having?: QuestionSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionSetCountAggregateInputType | true
    _avg?: QuestionSetAvgAggregateInputType
    _sum?: QuestionSetSumAggregateInputType
    _min?: QuestionSetMinAggregateInputType
    _max?: QuestionSetMaxAggregateInputType
  }

  export type QuestionSetGroupByOutputType = {
    id: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description: string | null
    passScore: number
    attemptLimit: number
    isActive: boolean
    createdBy: number
    updatedBy: number | null
    deletedBy: number | null
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: QuestionSetCountAggregateOutputType | null
    _avg: QuestionSetAvgAggregateOutputType | null
    _sum: QuestionSetSumAggregateOutputType | null
    _min: QuestionSetMinAggregateOutputType | null
    _max: QuestionSetMaxAggregateOutputType | null
  }

  type GetQuestionSetGroupByPayload<T extends QuestionSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionSetGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionSetGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    lessonId?: boolean
    testTypeId?: boolean
    name?: boolean
    description?: boolean
    passScore?: boolean
    attemptLimit?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionSet$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionSet$deletedByUserArgs<ExtArgs>
    questionBank?: boolean | QuestionSet$questionBankArgs<ExtArgs>
    scoreCriteria?: boolean | QuestionSet$scoreCriteriaArgs<ExtArgs>
    testResult?: boolean | QuestionSet$testResultArgs<ExtArgs>
    answerSubmission?: boolean | QuestionSet$answerSubmissionArgs<ExtArgs>
    _count?: boolean | QuestionSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    lessonId?: boolean
    testTypeId?: boolean
    name?: boolean
    description?: boolean
    passScore?: boolean
    attemptLimit?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionSet$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionSet$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    lessonId?: boolean
    testTypeId?: boolean
    name?: boolean
    description?: boolean
    passScore?: boolean
    attemptLimit?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionSet$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionSet$deletedByUserArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectScalar = {
    id?: boolean
    courseId?: boolean
    lessonId?: boolean
    testTypeId?: boolean
    name?: boolean
    description?: boolean
    passScore?: boolean
    attemptLimit?: boolean
    isActive?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    deletedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type QuestionSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "lessonId" | "testTypeId" | "name" | "description" | "passScore" | "attemptLimit" | "isActive" | "createdBy" | "updatedBy" | "deletedBy" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["questionSet"]>
  export type QuestionSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionSet$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionSet$deletedByUserArgs<ExtArgs>
    questionBank?: boolean | QuestionSet$questionBankArgs<ExtArgs>
    scoreCriteria?: boolean | QuestionSet$scoreCriteriaArgs<ExtArgs>
    testResult?: boolean | QuestionSet$testResultArgs<ExtArgs>
    answerSubmission?: boolean | QuestionSet$answerSubmissionArgs<ExtArgs>
    _count?: boolean | QuestionSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionSet$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionSet$deletedByUserArgs<ExtArgs>
  }
  export type QuestionSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    lesson?: boolean | LessonDefaultArgs<ExtArgs>
    testType?: boolean | TestTypeDefaultArgs<ExtArgs>
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    updatedByUser?: boolean | QuestionSet$updatedByUserArgs<ExtArgs>
    deletedByUser?: boolean | QuestionSet$deletedByUserArgs<ExtArgs>
  }

  export type $QuestionSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionSet"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      lesson: Prisma.$LessonPayload<ExtArgs>
      testType: Prisma.$TestTypePayload<ExtArgs>
      createdByUser: Prisma.$UserPayload<ExtArgs>
      updatedByUser: Prisma.$UserPayload<ExtArgs> | null
      deletedByUser: Prisma.$UserPayload<ExtArgs> | null
      questionBank: Prisma.$QuestionBankPayload<ExtArgs>[]
      scoreCriteria: Prisma.$ScoreCriteriaPayload<ExtArgs>[]
      testResult: Prisma.$TestResultPayload<ExtArgs>[]
      answerSubmission: Prisma.$AnswerSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      lessonId: number
      testTypeId: number
      name: string
      description: string | null
      /**
       * คะแนนที่ผ่าน
       */
      passScore: number
      /**
       * จำนวนครั้งที่ทำได้
       */
      attemptLimit: number
      isActive: boolean
      createdBy: number
      updatedBy: number | null
      deletedBy: number | null
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["questionSet"]>
    composites: {}
  }

  type QuestionSetGetPayload<S extends boolean | null | undefined | QuestionSetDefaultArgs> = $Result.GetResult<Prisma.$QuestionSetPayload, S>

  type QuestionSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionSetCountAggregateInputType | true
    }

  export interface QuestionSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionSet'], meta: { name: 'QuestionSet' } }
    /**
     * Find zero or one QuestionSet that matches the filter.
     * @param {QuestionSetFindUniqueArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionSetFindUniqueArgs>(args: SelectSubset<T, QuestionSetFindUniqueArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionSetFindUniqueOrThrowArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionSetFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindFirstArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionSetFindFirstArgs>(args?: SelectSubset<T, QuestionSetFindFirstArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindFirstOrThrowArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionSetFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionSets
     * const questionSets = await prisma.questionSet.findMany()
     * 
     * // Get first 10 QuestionSets
     * const questionSets = await prisma.questionSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionSetFindManyArgs>(args?: SelectSubset<T, QuestionSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionSet.
     * @param {QuestionSetCreateArgs} args - Arguments to create a QuestionSet.
     * @example
     * // Create one QuestionSet
     * const QuestionSet = await prisma.questionSet.create({
     *   data: {
     *     // ... data to create a QuestionSet
     *   }
     * })
     * 
     */
    create<T extends QuestionSetCreateArgs>(args: SelectSubset<T, QuestionSetCreateArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionSets.
     * @param {QuestionSetCreateManyArgs} args - Arguments to create many QuestionSets.
     * @example
     * // Create many QuestionSets
     * const questionSet = await prisma.questionSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionSetCreateManyArgs>(args?: SelectSubset<T, QuestionSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionSets and returns the data saved in the database.
     * @param {QuestionSetCreateManyAndReturnArgs} args - Arguments to create many QuestionSets.
     * @example
     * // Create many QuestionSets
     * const questionSet = await prisma.questionSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionSets and only return the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionSetCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionSet.
     * @param {QuestionSetDeleteArgs} args - Arguments to delete one QuestionSet.
     * @example
     * // Delete one QuestionSet
     * const QuestionSet = await prisma.questionSet.delete({
     *   where: {
     *     // ... filter to delete one QuestionSet
     *   }
     * })
     * 
     */
    delete<T extends QuestionSetDeleteArgs>(args: SelectSubset<T, QuestionSetDeleteArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionSet.
     * @param {QuestionSetUpdateArgs} args - Arguments to update one QuestionSet.
     * @example
     * // Update one QuestionSet
     * const questionSet = await prisma.questionSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionSetUpdateArgs>(args: SelectSubset<T, QuestionSetUpdateArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionSets.
     * @param {QuestionSetDeleteManyArgs} args - Arguments to filter QuestionSets to delete.
     * @example
     * // Delete a few QuestionSets
     * const { count } = await prisma.questionSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionSetDeleteManyArgs>(args?: SelectSubset<T, QuestionSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionSets
     * const questionSet = await prisma.questionSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionSetUpdateManyArgs>(args: SelectSubset<T, QuestionSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSets and returns the data updated in the database.
     * @param {QuestionSetUpdateManyAndReturnArgs} args - Arguments to update many QuestionSets.
     * @example
     * // Update many QuestionSets
     * const questionSet = await prisma.questionSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionSets and only return the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionSetUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionSet.
     * @param {QuestionSetUpsertArgs} args - Arguments to update or create a QuestionSet.
     * @example
     * // Update or create a QuestionSet
     * const questionSet = await prisma.questionSet.upsert({
     *   create: {
     *     // ... data to create a QuestionSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionSet we want to update
     *   }
     * })
     */
    upsert<T extends QuestionSetUpsertArgs>(args: SelectSubset<T, QuestionSetUpsertArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetCountArgs} args - Arguments to filter QuestionSets to count.
     * @example
     * // Count the number of QuestionSets
     * const count = await prisma.questionSet.count({
     *   where: {
     *     // ... the filter for the QuestionSets we want to count
     *   }
     * })
    **/
    count<T extends QuestionSetCountArgs>(
      args?: Subset<T, QuestionSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionSetAggregateArgs>(args: Subset<T, QuestionSetAggregateArgs>): Prisma.PrismaPromise<GetQuestionSetAggregateType<T>>

    /**
     * Group by QuestionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionSetGroupByArgs['orderBy'] }
        : { orderBy?: QuestionSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionSet model
   */
  readonly fields: QuestionSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lesson<T extends LessonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonDefaultArgs<ExtArgs>>): Prisma__LessonClient<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testType<T extends TestTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestTypeDefaultArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    updatedByUser<T extends QuestionSet$updatedByUserArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$updatedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    deletedByUser<T extends QuestionSet$deletedByUserArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$deletedByUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    questionBank<T extends QuestionSet$questionBankArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$questionBankArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scoreCriteria<T extends QuestionSet$scoreCriteriaArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$scoreCriteriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testResult<T extends QuestionSet$testResultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$testResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    answerSubmission<T extends QuestionSet$answerSubmissionArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$answerSubmissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionSet model
   */
  interface QuestionSetFieldRefs {
    readonly id: FieldRef<"QuestionSet", 'Int'>
    readonly courseId: FieldRef<"QuestionSet", 'Int'>
    readonly lessonId: FieldRef<"QuestionSet", 'Int'>
    readonly testTypeId: FieldRef<"QuestionSet", 'Int'>
    readonly name: FieldRef<"QuestionSet", 'String'>
    readonly description: FieldRef<"QuestionSet", 'String'>
    readonly passScore: FieldRef<"QuestionSet", 'Int'>
    readonly attemptLimit: FieldRef<"QuestionSet", 'Int'>
    readonly isActive: FieldRef<"QuestionSet", 'Boolean'>
    readonly createdBy: FieldRef<"QuestionSet", 'Int'>
    readonly updatedBy: FieldRef<"QuestionSet", 'Int'>
    readonly deletedBy: FieldRef<"QuestionSet", 'Int'>
    readonly createdAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly deletedAt: FieldRef<"QuestionSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionSet findUnique
   */
  export type QuestionSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet findUniqueOrThrow
   */
  export type QuestionSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet findFirst
   */
  export type QuestionSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSets.
     */
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet findFirstOrThrow
   */
  export type QuestionSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSets.
     */
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet findMany
   */
  export type QuestionSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSets to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet create
   */
  export type QuestionSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionSet.
     */
    data: XOR<QuestionSetCreateInput, QuestionSetUncheckedCreateInput>
  }

  /**
   * QuestionSet createMany
   */
  export type QuestionSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionSets.
     */
    data: QuestionSetCreateManyInput | QuestionSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionSet createManyAndReturn
   */
  export type QuestionSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionSets.
     */
    data: QuestionSetCreateManyInput | QuestionSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSet update
   */
  export type QuestionSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionSet.
     */
    data: XOR<QuestionSetUpdateInput, QuestionSetUncheckedUpdateInput>
    /**
     * Choose, which QuestionSet to update.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet updateMany
   */
  export type QuestionSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionSets.
     */
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSets to update
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to update.
     */
    limit?: number
  }

  /**
   * QuestionSet updateManyAndReturn
   */
  export type QuestionSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * The data used to update QuestionSets.
     */
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSets to update
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSet upsert
   */
  export type QuestionSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionSet to update in case it exists.
     */
    where: QuestionSetWhereUniqueInput
    /**
     * In case the QuestionSet found by the `where` argument doesn't exist, create a new QuestionSet with this data.
     */
    create: XOR<QuestionSetCreateInput, QuestionSetUncheckedCreateInput>
    /**
     * In case the QuestionSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionSetUpdateInput, QuestionSetUncheckedUpdateInput>
  }

  /**
   * QuestionSet delete
   */
  export type QuestionSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter which QuestionSet to delete.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet deleteMany
   */
  export type QuestionSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSets to delete
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to delete.
     */
    limit?: number
  }

  /**
   * QuestionSet.updatedByUser
   */
  export type QuestionSet$updatedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QuestionSet.deletedByUser
   */
  export type QuestionSet$deletedByUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QuestionSet.questionBank
   */
  export type QuestionSet$questionBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionSet.scoreCriteria
   */
  export type QuestionSet$scoreCriteriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    where?: ScoreCriteriaWhereInput
    orderBy?: ScoreCriteriaOrderByWithRelationInput | ScoreCriteriaOrderByWithRelationInput[]
    cursor?: ScoreCriteriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreCriteriaScalarFieldEnum | ScoreCriteriaScalarFieldEnum[]
  }

  /**
   * QuestionSet.testResult
   */
  export type QuestionSet$testResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    where?: TestResultWhereInput
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    cursor?: TestResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestResultScalarFieldEnum | TestResultScalarFieldEnum[]
  }

  /**
   * QuestionSet.answerSubmission
   */
  export type QuestionSet$answerSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    where?: AnswerSubmissionWhereInput
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    cursor?: AnswerSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerSubmissionScalarFieldEnum | AnswerSubmissionScalarFieldEnum[]
  }

  /**
   * QuestionSet without action
   */
  export type QuestionSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
  }


  /**
   * Model QuestionType
   */

  export type AggregateQuestionType = {
    _count: QuestionTypeCountAggregateOutputType | null
    _avg: QuestionTypeAvgAggregateOutputType | null
    _sum: QuestionTypeSumAggregateOutputType | null
    _min: QuestionTypeMinAggregateOutputType | null
    _max: QuestionTypeMaxAggregateOutputType | null
  }

  export type QuestionTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestionTypeSumAggregateOutputType = {
    id: number | null
  }

  export type QuestionTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type QuestionTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type QuestionTypeCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    _all: number
  }


  export type QuestionTypeAvgAggregateInputType = {
    id?: true
  }

  export type QuestionTypeSumAggregateInputType = {
    id?: true
  }

  export type QuestionTypeMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type QuestionTypeMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type QuestionTypeCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    _all?: true
  }

  export type QuestionTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionType to aggregate.
     */
    where?: QuestionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTypes to fetch.
     */
    orderBy?: QuestionTypeOrderByWithRelationInput | QuestionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionTypes
    **/
    _count?: true | QuestionTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionTypeMaxAggregateInputType
  }

  export type GetQuestionTypeAggregateType<T extends QuestionTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionType[P]>
      : GetScalarType<T[P], AggregateQuestionType[P]>
  }




  export type QuestionTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionTypeWhereInput
    orderBy?: QuestionTypeOrderByWithAggregationInput | QuestionTypeOrderByWithAggregationInput[]
    by: QuestionTypeScalarFieldEnum[] | QuestionTypeScalarFieldEnum
    having?: QuestionTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionTypeCountAggregateInputType | true
    _avg?: QuestionTypeAvgAggregateInputType
    _sum?: QuestionTypeSumAggregateInputType
    _min?: QuestionTypeMinAggregateInputType
    _max?: QuestionTypeMaxAggregateInputType
  }

  export type QuestionTypeGroupByOutputType = {
    id: number
    name: string
    isActive: boolean
    _count: QuestionTypeCountAggregateOutputType | null
    _avg: QuestionTypeAvgAggregateOutputType | null
    _sum: QuestionTypeSumAggregateOutputType | null
    _min: QuestionTypeMinAggregateOutputType | null
    _max: QuestionTypeMaxAggregateOutputType | null
  }

  type GetQuestionTypeGroupByPayload<T extends QuestionTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionTypeGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionTypeGroupByOutputType[P]>
        }
      >
    >


  export type QuestionTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    questionBank?: boolean | QuestionType$questionBankArgs<ExtArgs>
    _count?: boolean | QuestionTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionType"]>

  export type QuestionTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["questionType"]>

  export type QuestionTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["questionType"]>

  export type QuestionTypeSelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
  }

  export type QuestionTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isActive", ExtArgs["result"]["questionType"]>
  export type QuestionTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionBank?: boolean | QuestionType$questionBankArgs<ExtArgs>
    _count?: boolean | QuestionTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type QuestionTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $QuestionTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionType"
    objects: {
      questionBank: Prisma.$QuestionBankPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isActive: boolean
    }, ExtArgs["result"]["questionType"]>
    composites: {}
  }

  type QuestionTypeGetPayload<S extends boolean | null | undefined | QuestionTypeDefaultArgs> = $Result.GetResult<Prisma.$QuestionTypePayload, S>

  type QuestionTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionTypeCountAggregateInputType | true
    }

  export interface QuestionTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionType'], meta: { name: 'QuestionType' } }
    /**
     * Find zero or one QuestionType that matches the filter.
     * @param {QuestionTypeFindUniqueArgs} args - Arguments to find a QuestionType
     * @example
     * // Get one QuestionType
     * const questionType = await prisma.questionType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionTypeFindUniqueArgs>(args: SelectSubset<T, QuestionTypeFindUniqueArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionTypeFindUniqueOrThrowArgs} args - Arguments to find a QuestionType
     * @example
     * // Get one QuestionType
     * const questionType = await prisma.questionType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeFindFirstArgs} args - Arguments to find a QuestionType
     * @example
     * // Get one QuestionType
     * const questionType = await prisma.questionType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionTypeFindFirstArgs>(args?: SelectSubset<T, QuestionTypeFindFirstArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeFindFirstOrThrowArgs} args - Arguments to find a QuestionType
     * @example
     * // Get one QuestionType
     * const questionType = await prisma.questionType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionTypes
     * const questionTypes = await prisma.questionType.findMany()
     * 
     * // Get first 10 QuestionTypes
     * const questionTypes = await prisma.questionType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionTypeWithIdOnly = await prisma.questionType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionTypeFindManyArgs>(args?: SelectSubset<T, QuestionTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionType.
     * @param {QuestionTypeCreateArgs} args - Arguments to create a QuestionType.
     * @example
     * // Create one QuestionType
     * const QuestionType = await prisma.questionType.create({
     *   data: {
     *     // ... data to create a QuestionType
     *   }
     * })
     * 
     */
    create<T extends QuestionTypeCreateArgs>(args: SelectSubset<T, QuestionTypeCreateArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionTypes.
     * @param {QuestionTypeCreateManyArgs} args - Arguments to create many QuestionTypes.
     * @example
     * // Create many QuestionTypes
     * const questionType = await prisma.questionType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionTypeCreateManyArgs>(args?: SelectSubset<T, QuestionTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionTypes and returns the data saved in the database.
     * @param {QuestionTypeCreateManyAndReturnArgs} args - Arguments to create many QuestionTypes.
     * @example
     * // Create many QuestionTypes
     * const questionType = await prisma.questionType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionTypes and only return the `id`
     * const questionTypeWithIdOnly = await prisma.questionType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionType.
     * @param {QuestionTypeDeleteArgs} args - Arguments to delete one QuestionType.
     * @example
     * // Delete one QuestionType
     * const QuestionType = await prisma.questionType.delete({
     *   where: {
     *     // ... filter to delete one QuestionType
     *   }
     * })
     * 
     */
    delete<T extends QuestionTypeDeleteArgs>(args: SelectSubset<T, QuestionTypeDeleteArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionType.
     * @param {QuestionTypeUpdateArgs} args - Arguments to update one QuestionType.
     * @example
     * // Update one QuestionType
     * const questionType = await prisma.questionType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionTypeUpdateArgs>(args: SelectSubset<T, QuestionTypeUpdateArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionTypes.
     * @param {QuestionTypeDeleteManyArgs} args - Arguments to filter QuestionTypes to delete.
     * @example
     * // Delete a few QuestionTypes
     * const { count } = await prisma.questionType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionTypeDeleteManyArgs>(args?: SelectSubset<T, QuestionTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionTypes
     * const questionType = await prisma.questionType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionTypeUpdateManyArgs>(args: SelectSubset<T, QuestionTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionTypes and returns the data updated in the database.
     * @param {QuestionTypeUpdateManyAndReturnArgs} args - Arguments to update many QuestionTypes.
     * @example
     * // Update many QuestionTypes
     * const questionType = await prisma.questionType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionTypes and only return the `id`
     * const questionTypeWithIdOnly = await prisma.questionType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionType.
     * @param {QuestionTypeUpsertArgs} args - Arguments to update or create a QuestionType.
     * @example
     * // Update or create a QuestionType
     * const questionType = await prisma.questionType.upsert({
     *   create: {
     *     // ... data to create a QuestionType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionType we want to update
     *   }
     * })
     */
    upsert<T extends QuestionTypeUpsertArgs>(args: SelectSubset<T, QuestionTypeUpsertArgs<ExtArgs>>): Prisma__QuestionTypeClient<$Result.GetResult<Prisma.$QuestionTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeCountArgs} args - Arguments to filter QuestionTypes to count.
     * @example
     * // Count the number of QuestionTypes
     * const count = await prisma.questionType.count({
     *   where: {
     *     // ... the filter for the QuestionTypes we want to count
     *   }
     * })
    **/
    count<T extends QuestionTypeCountArgs>(
      args?: Subset<T, QuestionTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionTypeAggregateArgs>(args: Subset<T, QuestionTypeAggregateArgs>): Prisma.PrismaPromise<GetQuestionTypeAggregateType<T>>

    /**
     * Group by QuestionType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionTypeGroupByArgs['orderBy'] }
        : { orderBy?: QuestionTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionType model
   */
  readonly fields: QuestionTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionBank<T extends QuestionType$questionBankArgs<ExtArgs> = {}>(args?: Subset<T, QuestionType$questionBankArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionType model
   */
  interface QuestionTypeFieldRefs {
    readonly id: FieldRef<"QuestionType", 'Int'>
    readonly name: FieldRef<"QuestionType", 'String'>
    readonly isActive: FieldRef<"QuestionType", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * QuestionType findUnique
   */
  export type QuestionTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * Filter, which QuestionType to fetch.
     */
    where: QuestionTypeWhereUniqueInput
  }

  /**
   * QuestionType findUniqueOrThrow
   */
  export type QuestionTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * Filter, which QuestionType to fetch.
     */
    where: QuestionTypeWhereUniqueInput
  }

  /**
   * QuestionType findFirst
   */
  export type QuestionTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * Filter, which QuestionType to fetch.
     */
    where?: QuestionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTypes to fetch.
     */
    orderBy?: QuestionTypeOrderByWithRelationInput | QuestionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionTypes.
     */
    cursor?: QuestionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionTypes.
     */
    distinct?: QuestionTypeScalarFieldEnum | QuestionTypeScalarFieldEnum[]
  }

  /**
   * QuestionType findFirstOrThrow
   */
  export type QuestionTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * Filter, which QuestionType to fetch.
     */
    where?: QuestionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTypes to fetch.
     */
    orderBy?: QuestionTypeOrderByWithRelationInput | QuestionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionTypes.
     */
    cursor?: QuestionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionTypes.
     */
    distinct?: QuestionTypeScalarFieldEnum | QuestionTypeScalarFieldEnum[]
  }

  /**
   * QuestionType findMany
   */
  export type QuestionTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * Filter, which QuestionTypes to fetch.
     */
    where?: QuestionTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionTypes to fetch.
     */
    orderBy?: QuestionTypeOrderByWithRelationInput | QuestionTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionTypes.
     */
    cursor?: QuestionTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionTypes.
     */
    skip?: number
    distinct?: QuestionTypeScalarFieldEnum | QuestionTypeScalarFieldEnum[]
  }

  /**
   * QuestionType create
   */
  export type QuestionTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionType.
     */
    data: XOR<QuestionTypeCreateInput, QuestionTypeUncheckedCreateInput>
  }

  /**
   * QuestionType createMany
   */
  export type QuestionTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionTypes.
     */
    data: QuestionTypeCreateManyInput | QuestionTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionType createManyAndReturn
   */
  export type QuestionTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionTypes.
     */
    data: QuestionTypeCreateManyInput | QuestionTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionType update
   */
  export type QuestionTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionType.
     */
    data: XOR<QuestionTypeUpdateInput, QuestionTypeUncheckedUpdateInput>
    /**
     * Choose, which QuestionType to update.
     */
    where: QuestionTypeWhereUniqueInput
  }

  /**
   * QuestionType updateMany
   */
  export type QuestionTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionTypes.
     */
    data: XOR<QuestionTypeUpdateManyMutationInput, QuestionTypeUncheckedUpdateManyInput>
    /**
     * Filter which QuestionTypes to update
     */
    where?: QuestionTypeWhereInput
    /**
     * Limit how many QuestionTypes to update.
     */
    limit?: number
  }

  /**
   * QuestionType updateManyAndReturn
   */
  export type QuestionTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * The data used to update QuestionTypes.
     */
    data: XOR<QuestionTypeUpdateManyMutationInput, QuestionTypeUncheckedUpdateManyInput>
    /**
     * Filter which QuestionTypes to update
     */
    where?: QuestionTypeWhereInput
    /**
     * Limit how many QuestionTypes to update.
     */
    limit?: number
  }

  /**
   * QuestionType upsert
   */
  export type QuestionTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionType to update in case it exists.
     */
    where: QuestionTypeWhereUniqueInput
    /**
     * In case the QuestionType found by the `where` argument doesn't exist, create a new QuestionType with this data.
     */
    create: XOR<QuestionTypeCreateInput, QuestionTypeUncheckedCreateInput>
    /**
     * In case the QuestionType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionTypeUpdateInput, QuestionTypeUncheckedUpdateInput>
  }

  /**
   * QuestionType delete
   */
  export type QuestionTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
    /**
     * Filter which QuestionType to delete.
     */
    where: QuestionTypeWhereUniqueInput
  }

  /**
   * QuestionType deleteMany
   */
  export type QuestionTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionTypes to delete
     */
    where?: QuestionTypeWhereInput
    /**
     * Limit how many QuestionTypes to delete.
     */
    limit?: number
  }

  /**
   * QuestionType.questionBank
   */
  export type QuestionType$questionBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * QuestionType without action
   */
  export type QuestionTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionType
     */
    select?: QuestionTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionType
     */
    omit?: QuestionTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionTypeInclude<ExtArgs> | null
  }


  /**
   * Model ResultLevel
   */

  export type AggregateResultLevel = {
    _count: ResultLevelCountAggregateOutputType | null
    _avg: ResultLevelAvgAggregateOutputType | null
    _sum: ResultLevelSumAggregateOutputType | null
    _min: ResultLevelMinAggregateOutputType | null
    _max: ResultLevelMaxAggregateOutputType | null
  }

  export type ResultLevelAvgAggregateOutputType = {
    id: number | null
  }

  export type ResultLevelSumAggregateOutputType = {
    id: number | null
  }

  export type ResultLevelMinAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type ResultLevelMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type ResultLevelCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    _all: number
  }


  export type ResultLevelAvgAggregateInputType = {
    id?: true
  }

  export type ResultLevelSumAggregateInputType = {
    id?: true
  }

  export type ResultLevelMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type ResultLevelMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type ResultLevelCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    _all?: true
  }

  export type ResultLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResultLevel to aggregate.
     */
    where?: ResultLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResultLevels to fetch.
     */
    orderBy?: ResultLevelOrderByWithRelationInput | ResultLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResultLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResultLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResultLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResultLevels
    **/
    _count?: true | ResultLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResultLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResultLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultLevelMaxAggregateInputType
  }

  export type GetResultLevelAggregateType<T extends ResultLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateResultLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResultLevel[P]>
      : GetScalarType<T[P], AggregateResultLevel[P]>
  }




  export type ResultLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultLevelWhereInput
    orderBy?: ResultLevelOrderByWithAggregationInput | ResultLevelOrderByWithAggregationInput[]
    by: ResultLevelScalarFieldEnum[] | ResultLevelScalarFieldEnum
    having?: ResultLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultLevelCountAggregateInputType | true
    _avg?: ResultLevelAvgAggregateInputType
    _sum?: ResultLevelSumAggregateInputType
    _min?: ResultLevelMinAggregateInputType
    _max?: ResultLevelMaxAggregateInputType
  }

  export type ResultLevelGroupByOutputType = {
    id: number
    name: string
    isActive: boolean
    _count: ResultLevelCountAggregateOutputType | null
    _avg: ResultLevelAvgAggregateOutputType | null
    _sum: ResultLevelSumAggregateOutputType | null
    _min: ResultLevelMinAggregateOutputType | null
    _max: ResultLevelMaxAggregateOutputType | null
  }

  type GetResultLevelGroupByPayload<T extends ResultLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResultLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultLevelGroupByOutputType[P]>
            : GetScalarType<T[P], ResultLevelGroupByOutputType[P]>
        }
      >
    >


  export type ResultLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    scoreCriteria?: boolean | ResultLevel$scoreCriteriaArgs<ExtArgs>
    testResult?: boolean | ResultLevel$testResultArgs<ExtArgs>
    _count?: boolean | ResultLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resultLevel"]>

  export type ResultLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["resultLevel"]>

  export type ResultLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["resultLevel"]>

  export type ResultLevelSelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
  }

  export type ResultLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isActive", ExtArgs["result"]["resultLevel"]>
  export type ResultLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreCriteria?: boolean | ResultLevel$scoreCriteriaArgs<ExtArgs>
    testResult?: boolean | ResultLevel$testResultArgs<ExtArgs>
    _count?: boolean | ResultLevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResultLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ResultLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ResultLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResultLevel"
    objects: {
      scoreCriteria: Prisma.$ScoreCriteriaPayload<ExtArgs>[]
      testResult: Prisma.$TestResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isActive: boolean
    }, ExtArgs["result"]["resultLevel"]>
    composites: {}
  }

  type ResultLevelGetPayload<S extends boolean | null | undefined | ResultLevelDefaultArgs> = $Result.GetResult<Prisma.$ResultLevelPayload, S>

  type ResultLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResultLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResultLevelCountAggregateInputType | true
    }

  export interface ResultLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResultLevel'], meta: { name: 'ResultLevel' } }
    /**
     * Find zero or one ResultLevel that matches the filter.
     * @param {ResultLevelFindUniqueArgs} args - Arguments to find a ResultLevel
     * @example
     * // Get one ResultLevel
     * const resultLevel = await prisma.resultLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResultLevelFindUniqueArgs>(args: SelectSubset<T, ResultLevelFindUniqueArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResultLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResultLevelFindUniqueOrThrowArgs} args - Arguments to find a ResultLevel
     * @example
     * // Get one ResultLevel
     * const resultLevel = await prisma.resultLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResultLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, ResultLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResultLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelFindFirstArgs} args - Arguments to find a ResultLevel
     * @example
     * // Get one ResultLevel
     * const resultLevel = await prisma.resultLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResultLevelFindFirstArgs>(args?: SelectSubset<T, ResultLevelFindFirstArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResultLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelFindFirstOrThrowArgs} args - Arguments to find a ResultLevel
     * @example
     * // Get one ResultLevel
     * const resultLevel = await prisma.resultLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResultLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, ResultLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResultLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResultLevels
     * const resultLevels = await prisma.resultLevel.findMany()
     * 
     * // Get first 10 ResultLevels
     * const resultLevels = await prisma.resultLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resultLevelWithIdOnly = await prisma.resultLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResultLevelFindManyArgs>(args?: SelectSubset<T, ResultLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResultLevel.
     * @param {ResultLevelCreateArgs} args - Arguments to create a ResultLevel.
     * @example
     * // Create one ResultLevel
     * const ResultLevel = await prisma.resultLevel.create({
     *   data: {
     *     // ... data to create a ResultLevel
     *   }
     * })
     * 
     */
    create<T extends ResultLevelCreateArgs>(args: SelectSubset<T, ResultLevelCreateArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResultLevels.
     * @param {ResultLevelCreateManyArgs} args - Arguments to create many ResultLevels.
     * @example
     * // Create many ResultLevels
     * const resultLevel = await prisma.resultLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResultLevelCreateManyArgs>(args?: SelectSubset<T, ResultLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResultLevels and returns the data saved in the database.
     * @param {ResultLevelCreateManyAndReturnArgs} args - Arguments to create many ResultLevels.
     * @example
     * // Create many ResultLevels
     * const resultLevel = await prisma.resultLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResultLevels and only return the `id`
     * const resultLevelWithIdOnly = await prisma.resultLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResultLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, ResultLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResultLevel.
     * @param {ResultLevelDeleteArgs} args - Arguments to delete one ResultLevel.
     * @example
     * // Delete one ResultLevel
     * const ResultLevel = await prisma.resultLevel.delete({
     *   where: {
     *     // ... filter to delete one ResultLevel
     *   }
     * })
     * 
     */
    delete<T extends ResultLevelDeleteArgs>(args: SelectSubset<T, ResultLevelDeleteArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResultLevel.
     * @param {ResultLevelUpdateArgs} args - Arguments to update one ResultLevel.
     * @example
     * // Update one ResultLevel
     * const resultLevel = await prisma.resultLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResultLevelUpdateArgs>(args: SelectSubset<T, ResultLevelUpdateArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResultLevels.
     * @param {ResultLevelDeleteManyArgs} args - Arguments to filter ResultLevels to delete.
     * @example
     * // Delete a few ResultLevels
     * const { count } = await prisma.resultLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResultLevelDeleteManyArgs>(args?: SelectSubset<T, ResultLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResultLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResultLevels
     * const resultLevel = await prisma.resultLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResultLevelUpdateManyArgs>(args: SelectSubset<T, ResultLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResultLevels and returns the data updated in the database.
     * @param {ResultLevelUpdateManyAndReturnArgs} args - Arguments to update many ResultLevels.
     * @example
     * // Update many ResultLevels
     * const resultLevel = await prisma.resultLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResultLevels and only return the `id`
     * const resultLevelWithIdOnly = await prisma.resultLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResultLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, ResultLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResultLevel.
     * @param {ResultLevelUpsertArgs} args - Arguments to update or create a ResultLevel.
     * @example
     * // Update or create a ResultLevel
     * const resultLevel = await prisma.resultLevel.upsert({
     *   create: {
     *     // ... data to create a ResultLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResultLevel we want to update
     *   }
     * })
     */
    upsert<T extends ResultLevelUpsertArgs>(args: SelectSubset<T, ResultLevelUpsertArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResultLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelCountArgs} args - Arguments to filter ResultLevels to count.
     * @example
     * // Count the number of ResultLevels
     * const count = await prisma.resultLevel.count({
     *   where: {
     *     // ... the filter for the ResultLevels we want to count
     *   }
     * })
    **/
    count<T extends ResultLevelCountArgs>(
      args?: Subset<T, ResultLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResultLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultLevelAggregateArgs>(args: Subset<T, ResultLevelAggregateArgs>): Prisma.PrismaPromise<GetResultLevelAggregateType<T>>

    /**
     * Group by ResultLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResultLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResultLevelGroupByArgs['orderBy'] }
        : { orderBy?: ResultLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResultLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResultLevel model
   */
  readonly fields: ResultLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResultLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResultLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scoreCriteria<T extends ResultLevel$scoreCriteriaArgs<ExtArgs> = {}>(args?: Subset<T, ResultLevel$scoreCriteriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testResult<T extends ResultLevel$testResultArgs<ExtArgs> = {}>(args?: Subset<T, ResultLevel$testResultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResultLevel model
   */
  interface ResultLevelFieldRefs {
    readonly id: FieldRef<"ResultLevel", 'Int'>
    readonly name: FieldRef<"ResultLevel", 'String'>
    readonly isActive: FieldRef<"ResultLevel", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ResultLevel findUnique
   */
  export type ResultLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * Filter, which ResultLevel to fetch.
     */
    where: ResultLevelWhereUniqueInput
  }

  /**
   * ResultLevel findUniqueOrThrow
   */
  export type ResultLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * Filter, which ResultLevel to fetch.
     */
    where: ResultLevelWhereUniqueInput
  }

  /**
   * ResultLevel findFirst
   */
  export type ResultLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * Filter, which ResultLevel to fetch.
     */
    where?: ResultLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResultLevels to fetch.
     */
    orderBy?: ResultLevelOrderByWithRelationInput | ResultLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResultLevels.
     */
    cursor?: ResultLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResultLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResultLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResultLevels.
     */
    distinct?: ResultLevelScalarFieldEnum | ResultLevelScalarFieldEnum[]
  }

  /**
   * ResultLevel findFirstOrThrow
   */
  export type ResultLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * Filter, which ResultLevel to fetch.
     */
    where?: ResultLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResultLevels to fetch.
     */
    orderBy?: ResultLevelOrderByWithRelationInput | ResultLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResultLevels.
     */
    cursor?: ResultLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResultLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResultLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResultLevels.
     */
    distinct?: ResultLevelScalarFieldEnum | ResultLevelScalarFieldEnum[]
  }

  /**
   * ResultLevel findMany
   */
  export type ResultLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * Filter, which ResultLevels to fetch.
     */
    where?: ResultLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResultLevels to fetch.
     */
    orderBy?: ResultLevelOrderByWithRelationInput | ResultLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResultLevels.
     */
    cursor?: ResultLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResultLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResultLevels.
     */
    skip?: number
    distinct?: ResultLevelScalarFieldEnum | ResultLevelScalarFieldEnum[]
  }

  /**
   * ResultLevel create
   */
  export type ResultLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a ResultLevel.
     */
    data: XOR<ResultLevelCreateInput, ResultLevelUncheckedCreateInput>
  }

  /**
   * ResultLevel createMany
   */
  export type ResultLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResultLevels.
     */
    data: ResultLevelCreateManyInput | ResultLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResultLevel createManyAndReturn
   */
  export type ResultLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * The data used to create many ResultLevels.
     */
    data: ResultLevelCreateManyInput | ResultLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResultLevel update
   */
  export type ResultLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a ResultLevel.
     */
    data: XOR<ResultLevelUpdateInput, ResultLevelUncheckedUpdateInput>
    /**
     * Choose, which ResultLevel to update.
     */
    where: ResultLevelWhereUniqueInput
  }

  /**
   * ResultLevel updateMany
   */
  export type ResultLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResultLevels.
     */
    data: XOR<ResultLevelUpdateManyMutationInput, ResultLevelUncheckedUpdateManyInput>
    /**
     * Filter which ResultLevels to update
     */
    where?: ResultLevelWhereInput
    /**
     * Limit how many ResultLevels to update.
     */
    limit?: number
  }

  /**
   * ResultLevel updateManyAndReturn
   */
  export type ResultLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * The data used to update ResultLevels.
     */
    data: XOR<ResultLevelUpdateManyMutationInput, ResultLevelUncheckedUpdateManyInput>
    /**
     * Filter which ResultLevels to update
     */
    where?: ResultLevelWhereInput
    /**
     * Limit how many ResultLevels to update.
     */
    limit?: number
  }

  /**
   * ResultLevel upsert
   */
  export type ResultLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the ResultLevel to update in case it exists.
     */
    where: ResultLevelWhereUniqueInput
    /**
     * In case the ResultLevel found by the `where` argument doesn't exist, create a new ResultLevel with this data.
     */
    create: XOR<ResultLevelCreateInput, ResultLevelUncheckedCreateInput>
    /**
     * In case the ResultLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResultLevelUpdateInput, ResultLevelUncheckedUpdateInput>
  }

  /**
   * ResultLevel delete
   */
  export type ResultLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
    /**
     * Filter which ResultLevel to delete.
     */
    where: ResultLevelWhereUniqueInput
  }

  /**
   * ResultLevel deleteMany
   */
  export type ResultLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResultLevels to delete
     */
    where?: ResultLevelWhereInput
    /**
     * Limit how many ResultLevels to delete.
     */
    limit?: number
  }

  /**
   * ResultLevel.scoreCriteria
   */
  export type ResultLevel$scoreCriteriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    where?: ScoreCriteriaWhereInput
    orderBy?: ScoreCriteriaOrderByWithRelationInput | ScoreCriteriaOrderByWithRelationInput[]
    cursor?: ScoreCriteriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreCriteriaScalarFieldEnum | ScoreCriteriaScalarFieldEnum[]
  }

  /**
   * ResultLevel.testResult
   */
  export type ResultLevel$testResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    where?: TestResultWhereInput
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    cursor?: TestResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestResultScalarFieldEnum | TestResultScalarFieldEnum[]
  }

  /**
   * ResultLevel without action
   */
  export type ResultLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultLevel
     */
    select?: ResultLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResultLevel
     */
    omit?: ResultLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultLevelInclude<ExtArgs> | null
  }


  /**
   * Model ScoreCriteria
   */

  export type AggregateScoreCriteria = {
    _count: ScoreCriteriaCountAggregateOutputType | null
    _avg: ScoreCriteriaAvgAggregateOutputType | null
    _sum: ScoreCriteriaSumAggregateOutputType | null
    _min: ScoreCriteriaMinAggregateOutputType | null
    _max: ScoreCriteriaMaxAggregateOutputType | null
  }

  export type ScoreCriteriaAvgAggregateOutputType = {
    id: number | null
    questionSetId: number | null
    resultLevelId: number | null
    minScore: number | null
    maxScore: number | null
  }

  export type ScoreCriteriaSumAggregateOutputType = {
    id: number | null
    questionSetId: number | null
    resultLevelId: number | null
    minScore: number | null
    maxScore: number | null
  }

  export type ScoreCriteriaMinAggregateOutputType = {
    id: number | null
    questionSetId: number | null
    resultLevelId: number | null
    minScore: number | null
    maxScore: number | null
    description: string | null
    updatedAt: Date | null
  }

  export type ScoreCriteriaMaxAggregateOutputType = {
    id: number | null
    questionSetId: number | null
    resultLevelId: number | null
    minScore: number | null
    maxScore: number | null
    description: string | null
    updatedAt: Date | null
  }

  export type ScoreCriteriaCountAggregateOutputType = {
    id: number
    questionSetId: number
    resultLevelId: number
    minScore: number
    maxScore: number
    description: number
    updatedAt: number
    _all: number
  }


  export type ScoreCriteriaAvgAggregateInputType = {
    id?: true
    questionSetId?: true
    resultLevelId?: true
    minScore?: true
    maxScore?: true
  }

  export type ScoreCriteriaSumAggregateInputType = {
    id?: true
    questionSetId?: true
    resultLevelId?: true
    minScore?: true
    maxScore?: true
  }

  export type ScoreCriteriaMinAggregateInputType = {
    id?: true
    questionSetId?: true
    resultLevelId?: true
    minScore?: true
    maxScore?: true
    description?: true
    updatedAt?: true
  }

  export type ScoreCriteriaMaxAggregateInputType = {
    id?: true
    questionSetId?: true
    resultLevelId?: true
    minScore?: true
    maxScore?: true
    description?: true
    updatedAt?: true
  }

  export type ScoreCriteriaCountAggregateInputType = {
    id?: true
    questionSetId?: true
    resultLevelId?: true
    minScore?: true
    maxScore?: true
    description?: true
    updatedAt?: true
    _all?: true
  }

  export type ScoreCriteriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreCriteria to aggregate.
     */
    where?: ScoreCriteriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCriteria to fetch.
     */
    orderBy?: ScoreCriteriaOrderByWithRelationInput | ScoreCriteriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreCriteriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCriteria from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCriteria.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScoreCriteria
    **/
    _count?: true | ScoreCriteriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreCriteriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreCriteriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreCriteriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreCriteriaMaxAggregateInputType
  }

  export type GetScoreCriteriaAggregateType<T extends ScoreCriteriaAggregateArgs> = {
        [P in keyof T & keyof AggregateScoreCriteria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScoreCriteria[P]>
      : GetScalarType<T[P], AggregateScoreCriteria[P]>
  }




  export type ScoreCriteriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreCriteriaWhereInput
    orderBy?: ScoreCriteriaOrderByWithAggregationInput | ScoreCriteriaOrderByWithAggregationInput[]
    by: ScoreCriteriaScalarFieldEnum[] | ScoreCriteriaScalarFieldEnum
    having?: ScoreCriteriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreCriteriaCountAggregateInputType | true
    _avg?: ScoreCriteriaAvgAggregateInputType
    _sum?: ScoreCriteriaSumAggregateInputType
    _min?: ScoreCriteriaMinAggregateInputType
    _max?: ScoreCriteriaMaxAggregateInputType
  }

  export type ScoreCriteriaGroupByOutputType = {
    id: number
    questionSetId: number
    resultLevelId: number
    minScore: number
    maxScore: number
    description: string | null
    updatedAt: Date | null
    _count: ScoreCriteriaCountAggregateOutputType | null
    _avg: ScoreCriteriaAvgAggregateOutputType | null
    _sum: ScoreCriteriaSumAggregateOutputType | null
    _min: ScoreCriteriaMinAggregateOutputType | null
    _max: ScoreCriteriaMaxAggregateOutputType | null
  }

  type GetScoreCriteriaGroupByPayload<T extends ScoreCriteriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreCriteriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreCriteriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreCriteriaGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreCriteriaGroupByOutputType[P]>
        }
      >
    >


  export type ScoreCriteriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    minScore?: boolean
    maxScore?: boolean
    description?: boolean
    updatedAt?: boolean
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreCriteria"]>

  export type ScoreCriteriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    minScore?: boolean
    maxScore?: boolean
    description?: boolean
    updatedAt?: boolean
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreCriteria"]>

  export type ScoreCriteriaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    minScore?: boolean
    maxScore?: boolean
    description?: boolean
    updatedAt?: boolean
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreCriteria"]>

  export type ScoreCriteriaSelectScalar = {
    id?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    minScore?: boolean
    maxScore?: boolean
    description?: boolean
    updatedAt?: boolean
  }

  export type ScoreCriteriaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionSetId" | "resultLevelId" | "minScore" | "maxScore" | "description" | "updatedAt", ExtArgs["result"]["scoreCriteria"]>
  export type ScoreCriteriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }
  export type ScoreCriteriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }
  export type ScoreCriteriaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }

  export type $ScoreCriteriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScoreCriteria"
    objects: {
      questionSet: Prisma.$QuestionSetPayload<ExtArgs>
      resultLevel: Prisma.$ResultLevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      questionSetId: number
      resultLevelId: number
      minScore: number
      maxScore: number
      description: string | null
      updatedAt: Date | null
    }, ExtArgs["result"]["scoreCriteria"]>
    composites: {}
  }

  type ScoreCriteriaGetPayload<S extends boolean | null | undefined | ScoreCriteriaDefaultArgs> = $Result.GetResult<Prisma.$ScoreCriteriaPayload, S>

  type ScoreCriteriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreCriteriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreCriteriaCountAggregateInputType | true
    }

  export interface ScoreCriteriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScoreCriteria'], meta: { name: 'ScoreCriteria' } }
    /**
     * Find zero or one ScoreCriteria that matches the filter.
     * @param {ScoreCriteriaFindUniqueArgs} args - Arguments to find a ScoreCriteria
     * @example
     * // Get one ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreCriteriaFindUniqueArgs>(args: SelectSubset<T, ScoreCriteriaFindUniqueArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScoreCriteria that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreCriteriaFindUniqueOrThrowArgs} args - Arguments to find a ScoreCriteria
     * @example
     * // Get one ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreCriteriaFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreCriteriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreCriteria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaFindFirstArgs} args - Arguments to find a ScoreCriteria
     * @example
     * // Get one ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreCriteriaFindFirstArgs>(args?: SelectSubset<T, ScoreCriteriaFindFirstArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreCriteria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaFindFirstOrThrowArgs} args - Arguments to find a ScoreCriteria
     * @example
     * // Get one ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreCriteriaFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreCriteriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScoreCriteria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.findMany()
     * 
     * // Get first 10 ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreCriteriaWithIdOnly = await prisma.scoreCriteria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreCriteriaFindManyArgs>(args?: SelectSubset<T, ScoreCriteriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScoreCriteria.
     * @param {ScoreCriteriaCreateArgs} args - Arguments to create a ScoreCriteria.
     * @example
     * // Create one ScoreCriteria
     * const ScoreCriteria = await prisma.scoreCriteria.create({
     *   data: {
     *     // ... data to create a ScoreCriteria
     *   }
     * })
     * 
     */
    create<T extends ScoreCriteriaCreateArgs>(args: SelectSubset<T, ScoreCriteriaCreateArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScoreCriteria.
     * @param {ScoreCriteriaCreateManyArgs} args - Arguments to create many ScoreCriteria.
     * @example
     * // Create many ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreCriteriaCreateManyArgs>(args?: SelectSubset<T, ScoreCriteriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScoreCriteria and returns the data saved in the database.
     * @param {ScoreCriteriaCreateManyAndReturnArgs} args - Arguments to create many ScoreCriteria.
     * @example
     * // Create many ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScoreCriteria and only return the `id`
     * const scoreCriteriaWithIdOnly = await prisma.scoreCriteria.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreCriteriaCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreCriteriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScoreCriteria.
     * @param {ScoreCriteriaDeleteArgs} args - Arguments to delete one ScoreCriteria.
     * @example
     * // Delete one ScoreCriteria
     * const ScoreCriteria = await prisma.scoreCriteria.delete({
     *   where: {
     *     // ... filter to delete one ScoreCriteria
     *   }
     * })
     * 
     */
    delete<T extends ScoreCriteriaDeleteArgs>(args: SelectSubset<T, ScoreCriteriaDeleteArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScoreCriteria.
     * @param {ScoreCriteriaUpdateArgs} args - Arguments to update one ScoreCriteria.
     * @example
     * // Update one ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreCriteriaUpdateArgs>(args: SelectSubset<T, ScoreCriteriaUpdateArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScoreCriteria.
     * @param {ScoreCriteriaDeleteManyArgs} args - Arguments to filter ScoreCriteria to delete.
     * @example
     * // Delete a few ScoreCriteria
     * const { count } = await prisma.scoreCriteria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreCriteriaDeleteManyArgs>(args?: SelectSubset<T, ScoreCriteriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreCriteria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreCriteriaUpdateManyArgs>(args: SelectSubset<T, ScoreCriteriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreCriteria and returns the data updated in the database.
     * @param {ScoreCriteriaUpdateManyAndReturnArgs} args - Arguments to update many ScoreCriteria.
     * @example
     * // Update many ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScoreCriteria and only return the `id`
     * const scoreCriteriaWithIdOnly = await prisma.scoreCriteria.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreCriteriaUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreCriteriaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScoreCriteria.
     * @param {ScoreCriteriaUpsertArgs} args - Arguments to update or create a ScoreCriteria.
     * @example
     * // Update or create a ScoreCriteria
     * const scoreCriteria = await prisma.scoreCriteria.upsert({
     *   create: {
     *     // ... data to create a ScoreCriteria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScoreCriteria we want to update
     *   }
     * })
     */
    upsert<T extends ScoreCriteriaUpsertArgs>(args: SelectSubset<T, ScoreCriteriaUpsertArgs<ExtArgs>>): Prisma__ScoreCriteriaClient<$Result.GetResult<Prisma.$ScoreCriteriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScoreCriteria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaCountArgs} args - Arguments to filter ScoreCriteria to count.
     * @example
     * // Count the number of ScoreCriteria
     * const count = await prisma.scoreCriteria.count({
     *   where: {
     *     // ... the filter for the ScoreCriteria we want to count
     *   }
     * })
    **/
    count<T extends ScoreCriteriaCountArgs>(
      args?: Subset<T, ScoreCriteriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreCriteriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScoreCriteria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreCriteriaAggregateArgs>(args: Subset<T, ScoreCriteriaAggregateArgs>): Prisma.PrismaPromise<GetScoreCriteriaAggregateType<T>>

    /**
     * Group by ScoreCriteria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreCriteriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreCriteriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreCriteriaGroupByArgs['orderBy'] }
        : { orderBy?: ScoreCriteriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreCriteriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreCriteriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScoreCriteria model
   */
  readonly fields: ScoreCriteriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScoreCriteria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreCriteriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionSet<T extends QuestionSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSetDefaultArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    resultLevel<T extends ResultLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResultLevelDefaultArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScoreCriteria model
   */
  interface ScoreCriteriaFieldRefs {
    readonly id: FieldRef<"ScoreCriteria", 'Int'>
    readonly questionSetId: FieldRef<"ScoreCriteria", 'Int'>
    readonly resultLevelId: FieldRef<"ScoreCriteria", 'Int'>
    readonly minScore: FieldRef<"ScoreCriteria", 'Int'>
    readonly maxScore: FieldRef<"ScoreCriteria", 'Int'>
    readonly description: FieldRef<"ScoreCriteria", 'String'>
    readonly updatedAt: FieldRef<"ScoreCriteria", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScoreCriteria findUnique
   */
  export type ScoreCriteriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCriteria to fetch.
     */
    where: ScoreCriteriaWhereUniqueInput
  }

  /**
   * ScoreCriteria findUniqueOrThrow
   */
  export type ScoreCriteriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCriteria to fetch.
     */
    where: ScoreCriteriaWhereUniqueInput
  }

  /**
   * ScoreCriteria findFirst
   */
  export type ScoreCriteriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCriteria to fetch.
     */
    where?: ScoreCriteriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCriteria to fetch.
     */
    orderBy?: ScoreCriteriaOrderByWithRelationInput | ScoreCriteriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreCriteria.
     */
    cursor?: ScoreCriteriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCriteria from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCriteria.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreCriteria.
     */
    distinct?: ScoreCriteriaScalarFieldEnum | ScoreCriteriaScalarFieldEnum[]
  }

  /**
   * ScoreCriteria findFirstOrThrow
   */
  export type ScoreCriteriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCriteria to fetch.
     */
    where?: ScoreCriteriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCriteria to fetch.
     */
    orderBy?: ScoreCriteriaOrderByWithRelationInput | ScoreCriteriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreCriteria.
     */
    cursor?: ScoreCriteriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCriteria from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCriteria.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreCriteria.
     */
    distinct?: ScoreCriteriaScalarFieldEnum | ScoreCriteriaScalarFieldEnum[]
  }

  /**
   * ScoreCriteria findMany
   */
  export type ScoreCriteriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * Filter, which ScoreCriteria to fetch.
     */
    where?: ScoreCriteriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreCriteria to fetch.
     */
    orderBy?: ScoreCriteriaOrderByWithRelationInput | ScoreCriteriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScoreCriteria.
     */
    cursor?: ScoreCriteriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreCriteria from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreCriteria.
     */
    skip?: number
    distinct?: ScoreCriteriaScalarFieldEnum | ScoreCriteriaScalarFieldEnum[]
  }

  /**
   * ScoreCriteria create
   */
  export type ScoreCriteriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * The data needed to create a ScoreCriteria.
     */
    data: XOR<ScoreCriteriaCreateInput, ScoreCriteriaUncheckedCreateInput>
  }

  /**
   * ScoreCriteria createMany
   */
  export type ScoreCriteriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScoreCriteria.
     */
    data: ScoreCriteriaCreateManyInput | ScoreCriteriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScoreCriteria createManyAndReturn
   */
  export type ScoreCriteriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * The data used to create many ScoreCriteria.
     */
    data: ScoreCriteriaCreateManyInput | ScoreCriteriaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreCriteria update
   */
  export type ScoreCriteriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * The data needed to update a ScoreCriteria.
     */
    data: XOR<ScoreCriteriaUpdateInput, ScoreCriteriaUncheckedUpdateInput>
    /**
     * Choose, which ScoreCriteria to update.
     */
    where: ScoreCriteriaWhereUniqueInput
  }

  /**
   * ScoreCriteria updateMany
   */
  export type ScoreCriteriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScoreCriteria.
     */
    data: XOR<ScoreCriteriaUpdateManyMutationInput, ScoreCriteriaUncheckedUpdateManyInput>
    /**
     * Filter which ScoreCriteria to update
     */
    where?: ScoreCriteriaWhereInput
    /**
     * Limit how many ScoreCriteria to update.
     */
    limit?: number
  }

  /**
   * ScoreCriteria updateManyAndReturn
   */
  export type ScoreCriteriaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * The data used to update ScoreCriteria.
     */
    data: XOR<ScoreCriteriaUpdateManyMutationInput, ScoreCriteriaUncheckedUpdateManyInput>
    /**
     * Filter which ScoreCriteria to update
     */
    where?: ScoreCriteriaWhereInput
    /**
     * Limit how many ScoreCriteria to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreCriteria upsert
   */
  export type ScoreCriteriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * The filter to search for the ScoreCriteria to update in case it exists.
     */
    where: ScoreCriteriaWhereUniqueInput
    /**
     * In case the ScoreCriteria found by the `where` argument doesn't exist, create a new ScoreCriteria with this data.
     */
    create: XOR<ScoreCriteriaCreateInput, ScoreCriteriaUncheckedCreateInput>
    /**
     * In case the ScoreCriteria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreCriteriaUpdateInput, ScoreCriteriaUncheckedUpdateInput>
  }

  /**
   * ScoreCriteria delete
   */
  export type ScoreCriteriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
    /**
     * Filter which ScoreCriteria to delete.
     */
    where: ScoreCriteriaWhereUniqueInput
  }

  /**
   * ScoreCriteria deleteMany
   */
  export type ScoreCriteriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreCriteria to delete
     */
    where?: ScoreCriteriaWhereInput
    /**
     * Limit how many ScoreCriteria to delete.
     */
    limit?: number
  }

  /**
   * ScoreCriteria without action
   */
  export type ScoreCriteriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreCriteria
     */
    select?: ScoreCriteriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreCriteria
     */
    omit?: ScoreCriteriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreCriteriaInclude<ExtArgs> | null
  }


  /**
   * Model TestResult
   */

  export type AggregateTestResult = {
    _count: TestResultCountAggregateOutputType | null
    _avg: TestResultAvgAggregateOutputType | null
    _sum: TestResultSumAggregateOutputType | null
    _min: TestResultMinAggregateOutputType | null
    _max: TestResultMaxAggregateOutputType | null
  }

  export type TestResultAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    resultLevelId: number | null
    rawScore: number | null
    normalizedScore: number | null
    attemptNo: number | null
  }

  export type TestResultSumAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    resultLevelId: number | null
    rawScore: number | null
    normalizedScore: number | null
    attemptNo: number | null
  }

  export type TestResultMinAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    resultLevelId: number | null
    rawScore: number | null
    normalizedScore: number | null
    attemptNo: number | null
    completedAt: Date | null
  }

  export type TestResultMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    questionSetId: number | null
    resultLevelId: number | null
    rawScore: number | null
    normalizedScore: number | null
    attemptNo: number | null
    completedAt: Date | null
  }

  export type TestResultCountAggregateOutputType = {
    id: number
    userId: number
    questionSetId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt: number
    _all: number
  }


  export type TestResultAvgAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    resultLevelId?: true
    rawScore?: true
    normalizedScore?: true
    attemptNo?: true
  }

  export type TestResultSumAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    resultLevelId?: true
    rawScore?: true
    normalizedScore?: true
    attemptNo?: true
  }

  export type TestResultMinAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    resultLevelId?: true
    rawScore?: true
    normalizedScore?: true
    attemptNo?: true
    completedAt?: true
  }

  export type TestResultMaxAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    resultLevelId?: true
    rawScore?: true
    normalizedScore?: true
    attemptNo?: true
    completedAt?: true
  }

  export type TestResultCountAggregateInputType = {
    id?: true
    userId?: true
    questionSetId?: true
    resultLevelId?: true
    rawScore?: true
    normalizedScore?: true
    attemptNo?: true
    completedAt?: true
    _all?: true
  }

  export type TestResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestResult to aggregate.
     */
    where?: TestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestResults to fetch.
     */
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestResults
    **/
    _count?: true | TestResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestResultMaxAggregateInputType
  }

  export type GetTestResultAggregateType<T extends TestResultAggregateArgs> = {
        [P in keyof T & keyof AggregateTestResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestResult[P]>
      : GetScalarType<T[P], AggregateTestResult[P]>
  }




  export type TestResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestResultWhereInput
    orderBy?: TestResultOrderByWithAggregationInput | TestResultOrderByWithAggregationInput[]
    by: TestResultScalarFieldEnum[] | TestResultScalarFieldEnum
    having?: TestResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestResultCountAggregateInputType | true
    _avg?: TestResultAvgAggregateInputType
    _sum?: TestResultSumAggregateInputType
    _min?: TestResultMinAggregateInputType
    _max?: TestResultMaxAggregateInputType
  }

  export type TestResultGroupByOutputType = {
    id: number
    userId: number
    questionSetId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt: Date | null
    _count: TestResultCountAggregateOutputType | null
    _avg: TestResultAvgAggregateOutputType | null
    _sum: TestResultSumAggregateOutputType | null
    _min: TestResultMinAggregateOutputType | null
    _max: TestResultMaxAggregateOutputType | null
  }

  type GetTestResultGroupByPayload<T extends TestResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestResultGroupByOutputType[P]>
            : GetScalarType<T[P], TestResultGroupByOutputType[P]>
        }
      >
    >


  export type TestResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    rawScore?: boolean
    normalizedScore?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testResult"]>

  export type TestResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    rawScore?: boolean
    normalizedScore?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testResult"]>

  export type TestResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    rawScore?: boolean
    normalizedScore?: boolean
    attemptNo?: boolean
    completedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testResult"]>

  export type TestResultSelectScalar = {
    id?: boolean
    userId?: boolean
    questionSetId?: boolean
    resultLevelId?: boolean
    rawScore?: boolean
    normalizedScore?: boolean
    attemptNo?: boolean
    completedAt?: boolean
  }

  export type TestResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "questionSetId" | "resultLevelId" | "rawScore" | "normalizedScore" | "attemptNo" | "completedAt", ExtArgs["result"]["testResult"]>
  export type TestResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }
  export type TestResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }
  export type TestResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    questionSet?: boolean | QuestionSetDefaultArgs<ExtArgs>
    resultLevel?: boolean | ResultLevelDefaultArgs<ExtArgs>
  }

  export type $TestResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      questionSet: Prisma.$QuestionSetPayload<ExtArgs>
      resultLevel: Prisma.$ResultLevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      questionSetId: number
      resultLevelId: number
      /**
       * คะแนนดิบ
       */
      rawScore: number
      /**
       * คะแนนปกติ
       */
      normalizedScore: number
      /**
       * ครั้งที่สอบ
       */
      attemptNo: number
      /**
       * เวลาที่สอบเสร็จ
       */
      completedAt: Date | null
    }, ExtArgs["result"]["testResult"]>
    composites: {}
  }

  type TestResultGetPayload<S extends boolean | null | undefined | TestResultDefaultArgs> = $Result.GetResult<Prisma.$TestResultPayload, S>

  type TestResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestResultCountAggregateInputType | true
    }

  export interface TestResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestResult'], meta: { name: 'TestResult' } }
    /**
     * Find zero or one TestResult that matches the filter.
     * @param {TestResultFindUniqueArgs} args - Arguments to find a TestResult
     * @example
     * // Get one TestResult
     * const testResult = await prisma.testResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestResultFindUniqueArgs>(args: SelectSubset<T, TestResultFindUniqueArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestResultFindUniqueOrThrowArgs} args - Arguments to find a TestResult
     * @example
     * // Get one TestResult
     * const testResult = await prisma.testResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestResultFindUniqueOrThrowArgs>(args: SelectSubset<T, TestResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultFindFirstArgs} args - Arguments to find a TestResult
     * @example
     * // Get one TestResult
     * const testResult = await prisma.testResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestResultFindFirstArgs>(args?: SelectSubset<T, TestResultFindFirstArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultFindFirstOrThrowArgs} args - Arguments to find a TestResult
     * @example
     * // Get one TestResult
     * const testResult = await prisma.testResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestResultFindFirstOrThrowArgs>(args?: SelectSubset<T, TestResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestResults
     * const testResults = await prisma.testResult.findMany()
     * 
     * // Get first 10 TestResults
     * const testResults = await prisma.testResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testResultWithIdOnly = await prisma.testResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestResultFindManyArgs>(args?: SelectSubset<T, TestResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestResult.
     * @param {TestResultCreateArgs} args - Arguments to create a TestResult.
     * @example
     * // Create one TestResult
     * const TestResult = await prisma.testResult.create({
     *   data: {
     *     // ... data to create a TestResult
     *   }
     * })
     * 
     */
    create<T extends TestResultCreateArgs>(args: SelectSubset<T, TestResultCreateArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestResults.
     * @param {TestResultCreateManyArgs} args - Arguments to create many TestResults.
     * @example
     * // Create many TestResults
     * const testResult = await prisma.testResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestResultCreateManyArgs>(args?: SelectSubset<T, TestResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestResults and returns the data saved in the database.
     * @param {TestResultCreateManyAndReturnArgs} args - Arguments to create many TestResults.
     * @example
     * // Create many TestResults
     * const testResult = await prisma.testResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestResults and only return the `id`
     * const testResultWithIdOnly = await prisma.testResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestResultCreateManyAndReturnArgs>(args?: SelectSubset<T, TestResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TestResult.
     * @param {TestResultDeleteArgs} args - Arguments to delete one TestResult.
     * @example
     * // Delete one TestResult
     * const TestResult = await prisma.testResult.delete({
     *   where: {
     *     // ... filter to delete one TestResult
     *   }
     * })
     * 
     */
    delete<T extends TestResultDeleteArgs>(args: SelectSubset<T, TestResultDeleteArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestResult.
     * @param {TestResultUpdateArgs} args - Arguments to update one TestResult.
     * @example
     * // Update one TestResult
     * const testResult = await prisma.testResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestResultUpdateArgs>(args: SelectSubset<T, TestResultUpdateArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestResults.
     * @param {TestResultDeleteManyArgs} args - Arguments to filter TestResults to delete.
     * @example
     * // Delete a few TestResults
     * const { count } = await prisma.testResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestResultDeleteManyArgs>(args?: SelectSubset<T, TestResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestResults
     * const testResult = await prisma.testResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestResultUpdateManyArgs>(args: SelectSubset<T, TestResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestResults and returns the data updated in the database.
     * @param {TestResultUpdateManyAndReturnArgs} args - Arguments to update many TestResults.
     * @example
     * // Update many TestResults
     * const testResult = await prisma.testResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TestResults and only return the `id`
     * const testResultWithIdOnly = await prisma.testResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestResultUpdateManyAndReturnArgs>(args: SelectSubset<T, TestResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TestResult.
     * @param {TestResultUpsertArgs} args - Arguments to update or create a TestResult.
     * @example
     * // Update or create a TestResult
     * const testResult = await prisma.testResult.upsert({
     *   create: {
     *     // ... data to create a TestResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestResult we want to update
     *   }
     * })
     */
    upsert<T extends TestResultUpsertArgs>(args: SelectSubset<T, TestResultUpsertArgs<ExtArgs>>): Prisma__TestResultClient<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultCountArgs} args - Arguments to filter TestResults to count.
     * @example
     * // Count the number of TestResults
     * const count = await prisma.testResult.count({
     *   where: {
     *     // ... the filter for the TestResults we want to count
     *   }
     * })
    **/
    count<T extends TestResultCountArgs>(
      args?: Subset<T, TestResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestResultAggregateArgs>(args: Subset<T, TestResultAggregateArgs>): Prisma.PrismaPromise<GetTestResultAggregateType<T>>

    /**
     * Group by TestResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestResultGroupByArgs['orderBy'] }
        : { orderBy?: TestResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestResult model
   */
  readonly fields: TestResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questionSet<T extends QuestionSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSetDefaultArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    resultLevel<T extends ResultLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResultLevelDefaultArgs<ExtArgs>>): Prisma__ResultLevelClient<$Result.GetResult<Prisma.$ResultLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestResult model
   */
  interface TestResultFieldRefs {
    readonly id: FieldRef<"TestResult", 'Int'>
    readonly userId: FieldRef<"TestResult", 'Int'>
    readonly questionSetId: FieldRef<"TestResult", 'Int'>
    readonly resultLevelId: FieldRef<"TestResult", 'Int'>
    readonly rawScore: FieldRef<"TestResult", 'Int'>
    readonly normalizedScore: FieldRef<"TestResult", 'Int'>
    readonly attemptNo: FieldRef<"TestResult", 'Int'>
    readonly completedAt: FieldRef<"TestResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestResult findUnique
   */
  export type TestResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * Filter, which TestResult to fetch.
     */
    where: TestResultWhereUniqueInput
  }

  /**
   * TestResult findUniqueOrThrow
   */
  export type TestResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * Filter, which TestResult to fetch.
     */
    where: TestResultWhereUniqueInput
  }

  /**
   * TestResult findFirst
   */
  export type TestResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * Filter, which TestResult to fetch.
     */
    where?: TestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestResults to fetch.
     */
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestResults.
     */
    cursor?: TestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestResults.
     */
    distinct?: TestResultScalarFieldEnum | TestResultScalarFieldEnum[]
  }

  /**
   * TestResult findFirstOrThrow
   */
  export type TestResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * Filter, which TestResult to fetch.
     */
    where?: TestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestResults to fetch.
     */
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestResults.
     */
    cursor?: TestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestResults.
     */
    distinct?: TestResultScalarFieldEnum | TestResultScalarFieldEnum[]
  }

  /**
   * TestResult findMany
   */
  export type TestResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * Filter, which TestResults to fetch.
     */
    where?: TestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestResults to fetch.
     */
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestResults.
     */
    cursor?: TestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestResults.
     */
    skip?: number
    distinct?: TestResultScalarFieldEnum | TestResultScalarFieldEnum[]
  }

  /**
   * TestResult create
   */
  export type TestResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * The data needed to create a TestResult.
     */
    data: XOR<TestResultCreateInput, TestResultUncheckedCreateInput>
  }

  /**
   * TestResult createMany
   */
  export type TestResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestResults.
     */
    data: TestResultCreateManyInput | TestResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestResult createManyAndReturn
   */
  export type TestResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * The data used to create many TestResults.
     */
    data: TestResultCreateManyInput | TestResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestResult update
   */
  export type TestResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * The data needed to update a TestResult.
     */
    data: XOR<TestResultUpdateInput, TestResultUncheckedUpdateInput>
    /**
     * Choose, which TestResult to update.
     */
    where: TestResultWhereUniqueInput
  }

  /**
   * TestResult updateMany
   */
  export type TestResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestResults.
     */
    data: XOR<TestResultUpdateManyMutationInput, TestResultUncheckedUpdateManyInput>
    /**
     * Filter which TestResults to update
     */
    where?: TestResultWhereInput
    /**
     * Limit how many TestResults to update.
     */
    limit?: number
  }

  /**
   * TestResult updateManyAndReturn
   */
  export type TestResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * The data used to update TestResults.
     */
    data: XOR<TestResultUpdateManyMutationInput, TestResultUncheckedUpdateManyInput>
    /**
     * Filter which TestResults to update
     */
    where?: TestResultWhereInput
    /**
     * Limit how many TestResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestResult upsert
   */
  export type TestResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * The filter to search for the TestResult to update in case it exists.
     */
    where: TestResultWhereUniqueInput
    /**
     * In case the TestResult found by the `where` argument doesn't exist, create a new TestResult with this data.
     */
    create: XOR<TestResultCreateInput, TestResultUncheckedCreateInput>
    /**
     * In case the TestResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestResultUpdateInput, TestResultUncheckedUpdateInput>
  }

  /**
   * TestResult delete
   */
  export type TestResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    /**
     * Filter which TestResult to delete.
     */
    where: TestResultWhereUniqueInput
  }

  /**
   * TestResult deleteMany
   */
  export type TestResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestResults to delete
     */
    where?: TestResultWhereInput
    /**
     * Limit how many TestResults to delete.
     */
    limit?: number
  }

  /**
   * TestResult without action
   */
  export type TestResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
  }


  /**
   * Model TestType
   */

  export type AggregateTestType = {
    _count: TestTypeCountAggregateOutputType | null
    _avg: TestTypeAvgAggregateOutputType | null
    _sum: TestTypeSumAggregateOutputType | null
    _min: TestTypeMinAggregateOutputType | null
    _max: TestTypeMaxAggregateOutputType | null
  }

  export type TestTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TestTypeSumAggregateOutputType = {
    id: number | null
  }

  export type TestTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type TestTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isActive: boolean | null
  }

  export type TestTypeCountAggregateOutputType = {
    id: number
    name: number
    isActive: number
    _all: number
  }


  export type TestTypeAvgAggregateInputType = {
    id?: true
  }

  export type TestTypeSumAggregateInputType = {
    id?: true
  }

  export type TestTypeMinAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type TestTypeMaxAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
  }

  export type TestTypeCountAggregateInputType = {
    id?: true
    name?: true
    isActive?: true
    _all?: true
  }

  export type TestTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestType to aggregate.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestTypes
    **/
    _count?: true | TestTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestTypeMaxAggregateInputType
  }

  export type GetTestTypeAggregateType<T extends TestTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateTestType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestType[P]>
      : GetScalarType<T[P], AggregateTestType[P]>
  }




  export type TestTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestTypeWhereInput
    orderBy?: TestTypeOrderByWithAggregationInput | TestTypeOrderByWithAggregationInput[]
    by: TestTypeScalarFieldEnum[] | TestTypeScalarFieldEnum
    having?: TestTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestTypeCountAggregateInputType | true
    _avg?: TestTypeAvgAggregateInputType
    _sum?: TestTypeSumAggregateInputType
    _min?: TestTypeMinAggregateInputType
    _max?: TestTypeMaxAggregateInputType
  }

  export type TestTypeGroupByOutputType = {
    id: number
    name: string
    isActive: boolean
    _count: TestTypeCountAggregateOutputType | null
    _avg: TestTypeAvgAggregateOutputType | null
    _sum: TestTypeSumAggregateOutputType | null
    _min: TestTypeMinAggregateOutputType | null
    _max: TestTypeMaxAggregateOutputType | null
  }

  type GetTestTypeGroupByPayload<T extends TestTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestTypeGroupByOutputType[P]>
            : GetScalarType<T[P], TestTypeGroupByOutputType[P]>
        }
      >
    >


  export type TestTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
    questionSet?: boolean | TestType$questionSetArgs<ExtArgs>
    _count?: boolean | TestTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testType"]>

  export type TestTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["testType"]>

  export type TestTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["testType"]>

  export type TestTypeSelectScalar = {
    id?: boolean
    name?: boolean
    isActive?: boolean
  }

  export type TestTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isActive", ExtArgs["result"]["testType"]>
  export type TestTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionSet?: boolean | TestType$questionSetArgs<ExtArgs>
    _count?: boolean | TestTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TestTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TestTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TestTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestType"
    objects: {
      questionSet: Prisma.$QuestionSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isActive: boolean
    }, ExtArgs["result"]["testType"]>
    composites: {}
  }

  type TestTypeGetPayload<S extends boolean | null | undefined | TestTypeDefaultArgs> = $Result.GetResult<Prisma.$TestTypePayload, S>

  type TestTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestTypeCountAggregateInputType | true
    }

  export interface TestTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestType'], meta: { name: 'TestType' } }
    /**
     * Find zero or one TestType that matches the filter.
     * @param {TestTypeFindUniqueArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestTypeFindUniqueArgs>(args: SelectSubset<T, TestTypeFindUniqueArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestTypeFindUniqueOrThrowArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, TestTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeFindFirstArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestTypeFindFirstArgs>(args?: SelectSubset<T, TestTypeFindFirstArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeFindFirstOrThrowArgs} args - Arguments to find a TestType
     * @example
     * // Get one TestType
     * const testType = await prisma.testType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, TestTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestTypes
     * const testTypes = await prisma.testType.findMany()
     * 
     * // Get first 10 TestTypes
     * const testTypes = await prisma.testType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testTypeWithIdOnly = await prisma.testType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestTypeFindManyArgs>(args?: SelectSubset<T, TestTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestType.
     * @param {TestTypeCreateArgs} args - Arguments to create a TestType.
     * @example
     * // Create one TestType
     * const TestType = await prisma.testType.create({
     *   data: {
     *     // ... data to create a TestType
     *   }
     * })
     * 
     */
    create<T extends TestTypeCreateArgs>(args: SelectSubset<T, TestTypeCreateArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestTypes.
     * @param {TestTypeCreateManyArgs} args - Arguments to create many TestTypes.
     * @example
     * // Create many TestTypes
     * const testType = await prisma.testType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestTypeCreateManyArgs>(args?: SelectSubset<T, TestTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestTypes and returns the data saved in the database.
     * @param {TestTypeCreateManyAndReturnArgs} args - Arguments to create many TestTypes.
     * @example
     * // Create many TestTypes
     * const testType = await prisma.testType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestTypes and only return the `id`
     * const testTypeWithIdOnly = await prisma.testType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, TestTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TestType.
     * @param {TestTypeDeleteArgs} args - Arguments to delete one TestType.
     * @example
     * // Delete one TestType
     * const TestType = await prisma.testType.delete({
     *   where: {
     *     // ... filter to delete one TestType
     *   }
     * })
     * 
     */
    delete<T extends TestTypeDeleteArgs>(args: SelectSubset<T, TestTypeDeleteArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestType.
     * @param {TestTypeUpdateArgs} args - Arguments to update one TestType.
     * @example
     * // Update one TestType
     * const testType = await prisma.testType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestTypeUpdateArgs>(args: SelectSubset<T, TestTypeUpdateArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestTypes.
     * @param {TestTypeDeleteManyArgs} args - Arguments to filter TestTypes to delete.
     * @example
     * // Delete a few TestTypes
     * const { count } = await prisma.testType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestTypeDeleteManyArgs>(args?: SelectSubset<T, TestTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestTypes
     * const testType = await prisma.testType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestTypeUpdateManyArgs>(args: SelectSubset<T, TestTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestTypes and returns the data updated in the database.
     * @param {TestTypeUpdateManyAndReturnArgs} args - Arguments to update many TestTypes.
     * @example
     * // Update many TestTypes
     * const testType = await prisma.testType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TestTypes and only return the `id`
     * const testTypeWithIdOnly = await prisma.testType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, TestTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TestType.
     * @param {TestTypeUpsertArgs} args - Arguments to update or create a TestType.
     * @example
     * // Update or create a TestType
     * const testType = await prisma.testType.upsert({
     *   create: {
     *     // ... data to create a TestType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestType we want to update
     *   }
     * })
     */
    upsert<T extends TestTypeUpsertArgs>(args: SelectSubset<T, TestTypeUpsertArgs<ExtArgs>>): Prisma__TestTypeClient<$Result.GetResult<Prisma.$TestTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeCountArgs} args - Arguments to filter TestTypes to count.
     * @example
     * // Count the number of TestTypes
     * const count = await prisma.testType.count({
     *   where: {
     *     // ... the filter for the TestTypes we want to count
     *   }
     * })
    **/
    count<T extends TestTypeCountArgs>(
      args?: Subset<T, TestTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestTypeAggregateArgs>(args: Subset<T, TestTypeAggregateArgs>): Prisma.PrismaPromise<GetTestTypeAggregateType<T>>

    /**
     * Group by TestType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestTypeGroupByArgs['orderBy'] }
        : { orderBy?: TestTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestType model
   */
  readonly fields: TestTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionSet<T extends TestType$questionSetArgs<ExtArgs> = {}>(args?: Subset<T, TestType$questionSetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestType model
   */
  interface TestTypeFieldRefs {
    readonly id: FieldRef<"TestType", 'Int'>
    readonly name: FieldRef<"TestType", 'String'>
    readonly isActive: FieldRef<"TestType", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * TestType findUnique
   */
  export type TestTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType findUniqueOrThrow
   */
  export type TestTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType findFirst
   */
  export type TestTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestTypes.
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestTypes.
     */
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * TestType findFirstOrThrow
   */
  export type TestTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestType to fetch.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestTypes.
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestTypes.
     */
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * TestType findMany
   */
  export type TestTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter, which TestTypes to fetch.
     */
    where?: TestTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestTypes to fetch.
     */
    orderBy?: TestTypeOrderByWithRelationInput | TestTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestTypes.
     */
    cursor?: TestTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestTypes.
     */
    skip?: number
    distinct?: TestTypeScalarFieldEnum | TestTypeScalarFieldEnum[]
  }

  /**
   * TestType create
   */
  export type TestTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a TestType.
     */
    data: XOR<TestTypeCreateInput, TestTypeUncheckedCreateInput>
  }

  /**
   * TestType createMany
   */
  export type TestTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestTypes.
     */
    data: TestTypeCreateManyInput | TestTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestType createManyAndReturn
   */
  export type TestTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * The data used to create many TestTypes.
     */
    data: TestTypeCreateManyInput | TestTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestType update
   */
  export type TestTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a TestType.
     */
    data: XOR<TestTypeUpdateInput, TestTypeUncheckedUpdateInput>
    /**
     * Choose, which TestType to update.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType updateMany
   */
  export type TestTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestTypes.
     */
    data: XOR<TestTypeUpdateManyMutationInput, TestTypeUncheckedUpdateManyInput>
    /**
     * Filter which TestTypes to update
     */
    where?: TestTypeWhereInput
    /**
     * Limit how many TestTypes to update.
     */
    limit?: number
  }

  /**
   * TestType updateManyAndReturn
   */
  export type TestTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * The data used to update TestTypes.
     */
    data: XOR<TestTypeUpdateManyMutationInput, TestTypeUncheckedUpdateManyInput>
    /**
     * Filter which TestTypes to update
     */
    where?: TestTypeWhereInput
    /**
     * Limit how many TestTypes to update.
     */
    limit?: number
  }

  /**
   * TestType upsert
   */
  export type TestTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the TestType to update in case it exists.
     */
    where: TestTypeWhereUniqueInput
    /**
     * In case the TestType found by the `where` argument doesn't exist, create a new TestType with this data.
     */
    create: XOR<TestTypeCreateInput, TestTypeUncheckedCreateInput>
    /**
     * In case the TestType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestTypeUpdateInput, TestTypeUncheckedUpdateInput>
  }

  /**
   * TestType delete
   */
  export type TestTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
    /**
     * Filter which TestType to delete.
     */
    where: TestTypeWhereUniqueInput
  }

  /**
   * TestType deleteMany
   */
  export type TestTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestTypes to delete
     */
    where?: TestTypeWhereInput
    /**
     * Limit how many TestTypes to delete.
     */
    limit?: number
  }

  /**
   * TestType.questionSet
   */
  export type TestType$questionSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * TestType without action
   */
  export type TestTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestType
     */
    select?: TestTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestType
     */
    omit?: TestTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestTypeInclude<ExtArgs> | null
  }


  /**
   * Model Title
   */

  export type AggregateTitle = {
    _count: TitleCountAggregateOutputType | null
    _avg: TitleAvgAggregateOutputType | null
    _sum: TitleSumAggregateOutputType | null
    _min: TitleMinAggregateOutputType | null
    _max: TitleMaxAggregateOutputType | null
  }

  export type TitleAvgAggregateOutputType = {
    id: number | null
  }

  export type TitleSumAggregateOutputType = {
    id: number | null
  }

  export type TitleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TitleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type TitleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TitleAvgAggregateInputType = {
    id?: true
  }

  export type TitleSumAggregateInputType = {
    id?: true
  }

  export type TitleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TitleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TitleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TitleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Title to aggregate.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Titles
    **/
    _count?: true | TitleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TitleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TitleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TitleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TitleMaxAggregateInputType
  }

  export type GetTitleAggregateType<T extends TitleAggregateArgs> = {
        [P in keyof T & keyof AggregateTitle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTitle[P]>
      : GetScalarType<T[P], AggregateTitle[P]>
  }




  export type TitleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TitleWhereInput
    orderBy?: TitleOrderByWithAggregationInput | TitleOrderByWithAggregationInput[]
    by: TitleScalarFieldEnum[] | TitleScalarFieldEnum
    having?: TitleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TitleCountAggregateInputType | true
    _avg?: TitleAvgAggregateInputType
    _sum?: TitleSumAggregateInputType
    _min?: TitleMinAggregateInputType
    _max?: TitleMaxAggregateInputType
  }

  export type TitleGroupByOutputType = {
    id: number
    name: string
    _count: TitleCountAggregateOutputType | null
    _avg: TitleAvgAggregateOutputType | null
    _sum: TitleSumAggregateOutputType | null
    _min: TitleMinAggregateOutputType | null
    _max: TitleMaxAggregateOutputType | null
  }

  type GetTitleGroupByPayload<T extends TitleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TitleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TitleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TitleGroupByOutputType[P]>
            : GetScalarType<T[P], TitleGroupByOutputType[P]>
        }
      >
    >


  export type TitleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Title$usersArgs<ExtArgs>
    _count?: boolean | TitleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["title"]>

  export type TitleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["title"]>

  export type TitleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["title"]>

  export type TitleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type TitleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["title"]>
  export type TitleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Title$usersArgs<ExtArgs>
    _count?: boolean | TitleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TitleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TitleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TitlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Title"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["title"]>
    composites: {}
  }

  type TitleGetPayload<S extends boolean | null | undefined | TitleDefaultArgs> = $Result.GetResult<Prisma.$TitlePayload, S>

  type TitleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TitleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TitleCountAggregateInputType | true
    }

  export interface TitleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Title'], meta: { name: 'Title' } }
    /**
     * Find zero or one Title that matches the filter.
     * @param {TitleFindUniqueArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TitleFindUniqueArgs>(args: SelectSubset<T, TitleFindUniqueArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Title that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TitleFindUniqueOrThrowArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TitleFindUniqueOrThrowArgs>(args: SelectSubset<T, TitleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Title that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleFindFirstArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TitleFindFirstArgs>(args?: SelectSubset<T, TitleFindFirstArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Title that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleFindFirstOrThrowArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TitleFindFirstOrThrowArgs>(args?: SelectSubset<T, TitleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Titles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Titles
     * const titles = await prisma.title.findMany()
     * 
     * // Get first 10 Titles
     * const titles = await prisma.title.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const titleWithIdOnly = await prisma.title.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TitleFindManyArgs>(args?: SelectSubset<T, TitleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Title.
     * @param {TitleCreateArgs} args - Arguments to create a Title.
     * @example
     * // Create one Title
     * const Title = await prisma.title.create({
     *   data: {
     *     // ... data to create a Title
     *   }
     * })
     * 
     */
    create<T extends TitleCreateArgs>(args: SelectSubset<T, TitleCreateArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Titles.
     * @param {TitleCreateManyArgs} args - Arguments to create many Titles.
     * @example
     * // Create many Titles
     * const title = await prisma.title.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TitleCreateManyArgs>(args?: SelectSubset<T, TitleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Titles and returns the data saved in the database.
     * @param {TitleCreateManyAndReturnArgs} args - Arguments to create many Titles.
     * @example
     * // Create many Titles
     * const title = await prisma.title.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Titles and only return the `id`
     * const titleWithIdOnly = await prisma.title.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TitleCreateManyAndReturnArgs>(args?: SelectSubset<T, TitleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Title.
     * @param {TitleDeleteArgs} args - Arguments to delete one Title.
     * @example
     * // Delete one Title
     * const Title = await prisma.title.delete({
     *   where: {
     *     // ... filter to delete one Title
     *   }
     * })
     * 
     */
    delete<T extends TitleDeleteArgs>(args: SelectSubset<T, TitleDeleteArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Title.
     * @param {TitleUpdateArgs} args - Arguments to update one Title.
     * @example
     * // Update one Title
     * const title = await prisma.title.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TitleUpdateArgs>(args: SelectSubset<T, TitleUpdateArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Titles.
     * @param {TitleDeleteManyArgs} args - Arguments to filter Titles to delete.
     * @example
     * // Delete a few Titles
     * const { count } = await prisma.title.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TitleDeleteManyArgs>(args?: SelectSubset<T, TitleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Titles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Titles
     * const title = await prisma.title.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TitleUpdateManyArgs>(args: SelectSubset<T, TitleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Titles and returns the data updated in the database.
     * @param {TitleUpdateManyAndReturnArgs} args - Arguments to update many Titles.
     * @example
     * // Update many Titles
     * const title = await prisma.title.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Titles and only return the `id`
     * const titleWithIdOnly = await prisma.title.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TitleUpdateManyAndReturnArgs>(args: SelectSubset<T, TitleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Title.
     * @param {TitleUpsertArgs} args - Arguments to update or create a Title.
     * @example
     * // Update or create a Title
     * const title = await prisma.title.upsert({
     *   create: {
     *     // ... data to create a Title
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Title we want to update
     *   }
     * })
     */
    upsert<T extends TitleUpsertArgs>(args: SelectSubset<T, TitleUpsertArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Titles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleCountArgs} args - Arguments to filter Titles to count.
     * @example
     * // Count the number of Titles
     * const count = await prisma.title.count({
     *   where: {
     *     // ... the filter for the Titles we want to count
     *   }
     * })
    **/
    count<T extends TitleCountArgs>(
      args?: Subset<T, TitleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TitleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Title.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TitleAggregateArgs>(args: Subset<T, TitleAggregateArgs>): Prisma.PrismaPromise<GetTitleAggregateType<T>>

    /**
     * Group by Title.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TitleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TitleGroupByArgs['orderBy'] }
        : { orderBy?: TitleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TitleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTitleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Title model
   */
  readonly fields: TitleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Title.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TitleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Title$usersArgs<ExtArgs> = {}>(args?: Subset<T, Title$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Title model
   */
  interface TitleFieldRefs {
    readonly id: FieldRef<"Title", 'Int'>
    readonly name: FieldRef<"Title", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Title findUnique
   */
  export type TitleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where: TitleWhereUniqueInput
  }

  /**
   * Title findUniqueOrThrow
   */
  export type TitleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where: TitleWhereUniqueInput
  }

  /**
   * Title findFirst
   */
  export type TitleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Titles.
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Titles.
     */
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
  }

  /**
   * Title findFirstOrThrow
   */
  export type TitleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Titles.
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Titles.
     */
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
  }

  /**
   * Title findMany
   */
  export type TitleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Titles to fetch.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Titles.
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
  }

  /**
   * Title create
   */
  export type TitleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * The data needed to create a Title.
     */
    data: XOR<TitleCreateInput, TitleUncheckedCreateInput>
  }

  /**
   * Title createMany
   */
  export type TitleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Titles.
     */
    data: TitleCreateManyInput | TitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Title createManyAndReturn
   */
  export type TitleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * The data used to create many Titles.
     */
    data: TitleCreateManyInput | TitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Title update
   */
  export type TitleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * The data needed to update a Title.
     */
    data: XOR<TitleUpdateInput, TitleUncheckedUpdateInput>
    /**
     * Choose, which Title to update.
     */
    where: TitleWhereUniqueInput
  }

  /**
   * Title updateMany
   */
  export type TitleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Titles.
     */
    data: XOR<TitleUpdateManyMutationInput, TitleUncheckedUpdateManyInput>
    /**
     * Filter which Titles to update
     */
    where?: TitleWhereInput
    /**
     * Limit how many Titles to update.
     */
    limit?: number
  }

  /**
   * Title updateManyAndReturn
   */
  export type TitleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * The data used to update Titles.
     */
    data: XOR<TitleUpdateManyMutationInput, TitleUncheckedUpdateManyInput>
    /**
     * Filter which Titles to update
     */
    where?: TitleWhereInput
    /**
     * Limit how many Titles to update.
     */
    limit?: number
  }

  /**
   * Title upsert
   */
  export type TitleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * The filter to search for the Title to update in case it exists.
     */
    where: TitleWhereUniqueInput
    /**
     * In case the Title found by the `where` argument doesn't exist, create a new Title with this data.
     */
    create: XOR<TitleCreateInput, TitleUncheckedCreateInput>
    /**
     * In case the Title was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TitleUpdateInput, TitleUncheckedUpdateInput>
  }

  /**
   * Title delete
   */
  export type TitleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter which Title to delete.
     */
    where: TitleWhereUniqueInput
  }

  /**
   * Title deleteMany
   */
  export type TitleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Titles to delete
     */
    where?: TitleWhereInput
    /**
     * Limit how many Titles to delete.
     */
    limit?: number
  }

  /**
   * Title.users
   */
  export type Title$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Title without action
   */
  export type TitleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    id: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    id: number | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    id?: true
  }

  export type UserRoleSumAggregateInputType = {
    id?: true
  }

  export type UserRoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: number
    name: string
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | UserRole$usersArgs<ExtArgs>
    _count?: boolean | UserRoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["userRole"]>
  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UserRole$usersArgs<ExtArgs>
    _count?: boolean | UserRoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles and returns the data updated in the database.
     * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UserRole$usersArgs<ExtArgs> = {}>(args?: Subset<T, UserRole$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'Int'>
    readonly name: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole updateManyAndReturn
   */
  export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole.users
   */
  export type UserRole$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    userRoleId: number | null
    titleId: number | null
    academicTitleId: number | null
    departmentId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    userRoleId: number | null
    titleId: number | null
    academicTitleId: number | null
    departmentId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    userRoleId: number | null
    titleId: number | null
    academicTitleId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    departmentId: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    userRoleId: number | null
    titleId: number | null
    academicTitleId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    departmentId: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    userRoleId: number
    titleId: number
    academicTitleId: number
    firstName: number
    lastName: number
    email: number
    password: number
    departmentId: number
    isActive: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    userRoleId?: true
    titleId?: true
    academicTitleId?: true
    departmentId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    userRoleId?: true
    titleId?: true
    academicTitleId?: true
    departmentId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    userRoleId?: true
    titleId?: true
    academicTitleId?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    departmentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    userRoleId?: true
    titleId?: true
    academicTitleId?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    departmentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    userRoleId?: true
    titleId?: true
    academicTitleId?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    departmentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    userRoleId: number
    titleId: number | null
    academicTitleId: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId: number | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date | null
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userRoleId?: boolean
    titleId?: boolean
    academicTitleId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userRole?: boolean | UserRoleDefaultArgs<ExtArgs>
    title?: boolean | User$titleArgs<ExtArgs>
    academicTitle?: boolean | User$academicTitleArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    organizationsCreated?: boolean | User$organizationsCreatedArgs<ExtArgs>
    organizationsUpdated?: boolean | User$organizationsUpdatedArgs<ExtArgs>
    organizationsDeleted?: boolean | User$organizationsDeletedArgs<ExtArgs>
    categoryCreated?: boolean | User$categoryCreatedArgs<ExtArgs>
    categoryUpdated?: boolean | User$categoryUpdatedArgs<ExtArgs>
    categoryDeleted?: boolean | User$categoryDeletedArgs<ExtArgs>
    courseCreated?: boolean | User$courseCreatedArgs<ExtArgs>
    courseUpdated?: boolean | User$courseUpdatedArgs<ExtArgs>
    courseDeleted?: boolean | User$courseDeletedArgs<ExtArgs>
    courseInstructorUpdated?: boolean | User$courseInstructorUpdatedArgs<ExtArgs>
    courseInstructorDeleted?: boolean | User$courseInstructorDeletedArgs<ExtArgs>
    courseInstructorUserId?: boolean | User$courseInstructorUserIdArgs<ExtArgs>
    courseCompletionUserId?: boolean | User$courseCompletionUserIdArgs<ExtArgs>
    lessonCreated?: boolean | User$lessonCreatedArgs<ExtArgs>
    lessonUpdated?: boolean | User$lessonUpdatedArgs<ExtArgs>
    lessonDeleted?: boolean | User$lessonDeletedArgs<ExtArgs>
    lessonContentUpdated?: boolean | User$lessonContentUpdatedArgs<ExtArgs>
    lessonContentDeleted?: boolean | User$lessonContentDeletedArgs<ExtArgs>
    lessonViewUserId?: boolean | User$lessonViewUserIdArgs<ExtArgs>
    lessonAttemptUserId?: boolean | User$lessonAttemptUserIdArgs<ExtArgs>
    questionSetCreated?: boolean | User$questionSetCreatedArgs<ExtArgs>
    questionSetUpdated?: boolean | User$questionSetUpdatedArgs<ExtArgs>
    questionSetDeleted?: boolean | User$questionSetDeletedArgs<ExtArgs>
    questionBankCreated?: boolean | User$questionBankCreatedArgs<ExtArgs>
    questionBankUpdated?: boolean | User$questionBankUpdatedArgs<ExtArgs>
    questionBankDeleted?: boolean | User$questionBankDeletedArgs<ExtArgs>
    testResultUser?: boolean | User$testResultUserArgs<ExtArgs>
    answerSubmissionUser?: boolean | User$answerSubmissionUserArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userRoleId?: boolean
    titleId?: boolean
    academicTitleId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userRole?: boolean | UserRoleDefaultArgs<ExtArgs>
    title?: boolean | User$titleArgs<ExtArgs>
    academicTitle?: boolean | User$academicTitleArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userRoleId?: boolean
    titleId?: boolean
    academicTitleId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userRole?: boolean | UserRoleDefaultArgs<ExtArgs>
    title?: boolean | User$titleArgs<ExtArgs>
    academicTitle?: boolean | User$academicTitleArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    userRoleId?: boolean
    titleId?: boolean
    academicTitleId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userRoleId" | "titleId" | "academicTitleId" | "firstName" | "lastName" | "email" | "password" | "departmentId" | "isActive" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRole?: boolean | UserRoleDefaultArgs<ExtArgs>
    title?: boolean | User$titleArgs<ExtArgs>
    academicTitle?: boolean | User$academicTitleArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    organizationsCreated?: boolean | User$organizationsCreatedArgs<ExtArgs>
    organizationsUpdated?: boolean | User$organizationsUpdatedArgs<ExtArgs>
    organizationsDeleted?: boolean | User$organizationsDeletedArgs<ExtArgs>
    categoryCreated?: boolean | User$categoryCreatedArgs<ExtArgs>
    categoryUpdated?: boolean | User$categoryUpdatedArgs<ExtArgs>
    categoryDeleted?: boolean | User$categoryDeletedArgs<ExtArgs>
    courseCreated?: boolean | User$courseCreatedArgs<ExtArgs>
    courseUpdated?: boolean | User$courseUpdatedArgs<ExtArgs>
    courseDeleted?: boolean | User$courseDeletedArgs<ExtArgs>
    courseInstructorUpdated?: boolean | User$courseInstructorUpdatedArgs<ExtArgs>
    courseInstructorDeleted?: boolean | User$courseInstructorDeletedArgs<ExtArgs>
    courseInstructorUserId?: boolean | User$courseInstructorUserIdArgs<ExtArgs>
    courseCompletionUserId?: boolean | User$courseCompletionUserIdArgs<ExtArgs>
    lessonCreated?: boolean | User$lessonCreatedArgs<ExtArgs>
    lessonUpdated?: boolean | User$lessonUpdatedArgs<ExtArgs>
    lessonDeleted?: boolean | User$lessonDeletedArgs<ExtArgs>
    lessonContentUpdated?: boolean | User$lessonContentUpdatedArgs<ExtArgs>
    lessonContentDeleted?: boolean | User$lessonContentDeletedArgs<ExtArgs>
    lessonViewUserId?: boolean | User$lessonViewUserIdArgs<ExtArgs>
    lessonAttemptUserId?: boolean | User$lessonAttemptUserIdArgs<ExtArgs>
    questionSetCreated?: boolean | User$questionSetCreatedArgs<ExtArgs>
    questionSetUpdated?: boolean | User$questionSetUpdatedArgs<ExtArgs>
    questionSetDeleted?: boolean | User$questionSetDeletedArgs<ExtArgs>
    questionBankCreated?: boolean | User$questionBankCreatedArgs<ExtArgs>
    questionBankUpdated?: boolean | User$questionBankUpdatedArgs<ExtArgs>
    questionBankDeleted?: boolean | User$questionBankDeletedArgs<ExtArgs>
    testResultUser?: boolean | User$testResultUserArgs<ExtArgs>
    answerSubmissionUser?: boolean | User$answerSubmissionUserArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRole?: boolean | UserRoleDefaultArgs<ExtArgs>
    title?: boolean | User$titleArgs<ExtArgs>
    academicTitle?: boolean | User$academicTitleArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRole?: boolean | UserRoleDefaultArgs<ExtArgs>
    title?: boolean | User$titleArgs<ExtArgs>
    academicTitle?: boolean | User$academicTitleArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userRole: Prisma.$UserRolePayload<ExtArgs>
      title: Prisma.$TitlePayload<ExtArgs> | null
      academicTitle: Prisma.$AcademicTitlePayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      organizationsCreated: Prisma.$OrganizationPayload<ExtArgs>[]
      organizationsUpdated: Prisma.$OrganizationPayload<ExtArgs>[]
      organizationsDeleted: Prisma.$OrganizationPayload<ExtArgs>[]
      categoryCreated: Prisma.$CategoryPayload<ExtArgs>[]
      categoryUpdated: Prisma.$CategoryPayload<ExtArgs>[]
      categoryDeleted: Prisma.$CategoryPayload<ExtArgs>[]
      courseCreated: Prisma.$CoursePayload<ExtArgs>[]
      courseUpdated: Prisma.$CoursePayload<ExtArgs>[]
      courseDeleted: Prisma.$CoursePayload<ExtArgs>[]
      courseInstructorUpdated: Prisma.$CourseInstructorPayload<ExtArgs>[]
      courseInstructorDeleted: Prisma.$CourseInstructorPayload<ExtArgs>[]
      courseInstructorUserId: Prisma.$CourseInstructorPayload<ExtArgs>[]
      courseCompletionUserId: Prisma.$CourseCompletionPayload<ExtArgs>[]
      lessonCreated: Prisma.$LessonPayload<ExtArgs>[]
      lessonUpdated: Prisma.$LessonPayload<ExtArgs>[]
      lessonDeleted: Prisma.$LessonPayload<ExtArgs>[]
      lessonContentUpdated: Prisma.$LessonContentPayload<ExtArgs>[]
      lessonContentDeleted: Prisma.$LessonContentPayload<ExtArgs>[]
      lessonViewUserId: Prisma.$LessonViewPayload<ExtArgs>[]
      lessonAttemptUserId: Prisma.$LessonAttemptPayload<ExtArgs>[]
      questionSetCreated: Prisma.$QuestionSetPayload<ExtArgs>[]
      questionSetUpdated: Prisma.$QuestionSetPayload<ExtArgs>[]
      questionSetDeleted: Prisma.$QuestionSetPayload<ExtArgs>[]
      questionBankCreated: Prisma.$QuestionBankPayload<ExtArgs>[]
      questionBankUpdated: Prisma.$QuestionBankPayload<ExtArgs>[]
      questionBankDeleted: Prisma.$QuestionBankPayload<ExtArgs>[]
      testResultUser: Prisma.$TestResultPayload<ExtArgs>[]
      answerSubmissionUser: Prisma.$AnswerSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userRoleId: number
      titleId: number | null
      academicTitleId: number | null
      firstName: string
      lastName: string
      email: string
      password: string
      departmentId: number | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date | null
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userRole<T extends UserRoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserRoleDefaultArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    title<T extends User$titleArgs<ExtArgs> = {}>(args?: Subset<T, User$titleArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    academicTitle<T extends User$academicTitleArgs<ExtArgs> = {}>(args?: Subset<T, User$academicTitleArgs<ExtArgs>>): Prisma__AcademicTitleClient<$Result.GetResult<Prisma.$AcademicTitlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends User$departmentArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organizationsCreated<T extends User$organizationsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organizationsUpdated<T extends User$organizationsUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationsUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organizationsDeleted<T extends User$organizationsDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationsDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categoryCreated<T extends User$categoryCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$categoryCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categoryUpdated<T extends User$categoryUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$categoryUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categoryDeleted<T extends User$categoryDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$categoryDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseCreated<T extends User$courseCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$courseCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseUpdated<T extends User$courseUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$courseUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseDeleted<T extends User$courseDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$courseDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseInstructorUpdated<T extends User$courseInstructorUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$courseInstructorUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseInstructorDeleted<T extends User$courseInstructorDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$courseInstructorDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseInstructorUserId<T extends User$courseInstructorUserIdArgs<ExtArgs> = {}>(args?: Subset<T, User$courseInstructorUserIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courseCompletionUserId<T extends User$courseCompletionUserIdArgs<ExtArgs> = {}>(args?: Subset<T, User$courseCompletionUserIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseCompletionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonCreated<T extends User$lessonCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonUpdated<T extends User$lessonUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonDeleted<T extends User$lessonDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonContentUpdated<T extends User$lessonContentUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonContentUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonContentDeleted<T extends User$lessonContentDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonContentDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonViewUserId<T extends User$lessonViewUserIdArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonViewUserIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessonAttemptUserId<T extends User$lessonAttemptUserIdArgs<ExtArgs> = {}>(args?: Subset<T, User$lessonAttemptUserIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonAttemptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSetCreated<T extends User$questionSetCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$questionSetCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSetUpdated<T extends User$questionSetUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$questionSetUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSetDeleted<T extends User$questionSetDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$questionSetDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionBankCreated<T extends User$questionBankCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$questionBankCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionBankUpdated<T extends User$questionBankUpdatedArgs<ExtArgs> = {}>(args?: Subset<T, User$questionBankUpdatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionBankDeleted<T extends User$questionBankDeletedArgs<ExtArgs> = {}>(args?: Subset<T, User$questionBankDeletedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testResultUser<T extends User$testResultUserArgs<ExtArgs> = {}>(args?: Subset<T, User$testResultUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    answerSubmissionUser<T extends User$answerSubmissionUserArgs<ExtArgs> = {}>(args?: Subset<T, User$answerSubmissionUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly userRoleId: FieldRef<"User", 'Int'>
    readonly titleId: FieldRef<"User", 'Int'>
    readonly academicTitleId: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly departmentId: FieldRef<"User", 'Int'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.title
   */
  export type User$titleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    where?: TitleWhereInput
  }

  /**
   * User.academicTitle
   */
  export type User$academicTitleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicTitle
     */
    select?: AcademicTitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicTitle
     */
    omit?: AcademicTitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicTitleInclude<ExtArgs> | null
    where?: AcademicTitleWhereInput
  }

  /**
   * User.department
   */
  export type User$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.organizationsCreated
   */
  export type User$organizationsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    cursor?: OrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * User.organizationsUpdated
   */
  export type User$organizationsUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    cursor?: OrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * User.organizationsDeleted
   */
  export type User$organizationsDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    cursor?: OrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * User.categoryCreated
   */
  export type User$categoryCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.categoryUpdated
   */
  export type User$categoryUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.categoryDeleted
   */
  export type User$categoryDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * User.courseCreated
   */
  export type User$courseCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.courseUpdated
   */
  export type User$courseUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.courseDeleted
   */
  export type User$courseDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.courseInstructorUpdated
   */
  export type User$courseInstructorUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    where?: CourseInstructorWhereInput
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    cursor?: CourseInstructorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * User.courseInstructorDeleted
   */
  export type User$courseInstructorDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    where?: CourseInstructorWhereInput
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    cursor?: CourseInstructorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * User.courseInstructorUserId
   */
  export type User$courseInstructorUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseInstructor
     */
    omit?: CourseInstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    where?: CourseInstructorWhereInput
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    cursor?: CourseInstructorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * User.courseCompletionUserId
   */
  export type User$courseCompletionUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCompletion
     */
    select?: CourseCompletionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseCompletion
     */
    omit?: CourseCompletionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseCompletionInclude<ExtArgs> | null
    where?: CourseCompletionWhereInput
    orderBy?: CourseCompletionOrderByWithRelationInput | CourseCompletionOrderByWithRelationInput[]
    cursor?: CourseCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseCompletionScalarFieldEnum | CourseCompletionScalarFieldEnum[]
  }

  /**
   * User.lessonCreated
   */
  export type User$lessonCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * User.lessonUpdated
   */
  export type User$lessonUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * User.lessonDeleted
   */
  export type User$lessonDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lesson
     */
    select?: LessonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lesson
     */
    omit?: LessonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonInclude<ExtArgs> | null
    where?: LessonWhereInput
    orderBy?: LessonOrderByWithRelationInput | LessonOrderByWithRelationInput[]
    cursor?: LessonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonScalarFieldEnum | LessonScalarFieldEnum[]
  }

  /**
   * User.lessonContentUpdated
   */
  export type User$lessonContentUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    where?: LessonContentWhereInput
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    cursor?: LessonContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * User.lessonContentDeleted
   */
  export type User$lessonContentDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonContent
     */
    select?: LessonContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonContent
     */
    omit?: LessonContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonContentInclude<ExtArgs> | null
    where?: LessonContentWhereInput
    orderBy?: LessonContentOrderByWithRelationInput | LessonContentOrderByWithRelationInput[]
    cursor?: LessonContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonContentScalarFieldEnum | LessonContentScalarFieldEnum[]
  }

  /**
   * User.lessonViewUserId
   */
  export type User$lessonViewUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonView
     */
    select?: LessonViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonView
     */
    omit?: LessonViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonViewInclude<ExtArgs> | null
    where?: LessonViewWhereInput
    orderBy?: LessonViewOrderByWithRelationInput | LessonViewOrderByWithRelationInput[]
    cursor?: LessonViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonViewScalarFieldEnum | LessonViewScalarFieldEnum[]
  }

  /**
   * User.lessonAttemptUserId
   */
  export type User$lessonAttemptUserIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonAttempt
     */
    select?: LessonAttemptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LessonAttempt
     */
    omit?: LessonAttemptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonAttemptInclude<ExtArgs> | null
    where?: LessonAttemptWhereInput
    orderBy?: LessonAttemptOrderByWithRelationInput | LessonAttemptOrderByWithRelationInput[]
    cursor?: LessonAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonAttemptScalarFieldEnum | LessonAttemptScalarFieldEnum[]
  }

  /**
   * User.questionSetCreated
   */
  export type User$questionSetCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * User.questionSetUpdated
   */
  export type User$questionSetUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * User.questionSetDeleted
   */
  export type User$questionSetDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * User.questionBankCreated
   */
  export type User$questionBankCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * User.questionBankUpdated
   */
  export type User$questionBankUpdatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * User.questionBankDeleted
   */
  export type User$questionBankDeletedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionBank
     */
    select?: QuestionBankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionBank
     */
    omit?: QuestionBankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionBankInclude<ExtArgs> | null
    where?: QuestionBankWhereInput
    orderBy?: QuestionBankOrderByWithRelationInput | QuestionBankOrderByWithRelationInput[]
    cursor?: QuestionBankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionBankScalarFieldEnum | QuestionBankScalarFieldEnum[]
  }

  /**
   * User.testResultUser
   */
  export type User$testResultUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestResult
     */
    select?: TestResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestResult
     */
    omit?: TestResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestResultInclude<ExtArgs> | null
    where?: TestResultWhereInput
    orderBy?: TestResultOrderByWithRelationInput | TestResultOrderByWithRelationInput[]
    cursor?: TestResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestResultScalarFieldEnum | TestResultScalarFieldEnum[]
  }

  /**
   * User.answerSubmissionUser
   */
  export type User$answerSubmissionUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnswerSubmission
     */
    select?: AnswerSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnswerSubmission
     */
    omit?: AnswerSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerSubmissionInclude<ExtArgs> | null
    where?: AnswerSubmissionWhereInput
    orderBy?: AnswerSubmissionOrderByWithRelationInput | AnswerSubmissionOrderByWithRelationInput[]
    cursor?: AnswerSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerSubmissionScalarFieldEnum | AnswerSubmissionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AcademicTitleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type AcademicTitleScalarFieldEnum = (typeof AcademicTitleScalarFieldEnum)[keyof typeof AcademicTitleScalarFieldEnum]


  export const AnswerSubmissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionSetId: 'questionSetId',
    questionBankId: 'questionBankId',
    selectedChoice: 'selectedChoice',
    filledText: 'filledText',
    fileUrl: 'fileUrl',
    isCorrect: 'isCorrect',
    submittedAt: 'submittedAt'
  };

  export type AnswerSubmissionScalarFieldEnum = (typeof AnswerSubmissionScalarFieldEnum)[keyof typeof AnswerSubmissionScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CourseCompletionScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    userId: 'userId',
    completedAt: 'completedAt',
    finalScore: 'finalScore',
    isCertified: 'isCertified',
    certificateUrl: 'certificateUrl'
  };

  export type CourseCompletionScalarFieldEnum = (typeof CourseCompletionScalarFieldEnum)[keyof typeof CourseCompletionScalarFieldEnum]


  export const CourseEnrollmentScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    userId: 'userId',
    enrolledAt: 'enrolledAt'
  };

  export type CourseEnrollmentScalarFieldEnum = (typeof CourseEnrollmentScalarFieldEnum)[keyof typeof CourseEnrollmentScalarFieldEnum]


  export const CourseInstructorScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    userId: 'userId',
    fullName: 'fullName',
    role: 'role',
    isActive: 'isActive',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type CourseInstructorScalarFieldEnum = (typeof CourseInstructorScalarFieldEnum)[keyof typeof CourseInstructorScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    description: 'description',
    imageUrl: 'imageUrl',
    fee: 'fee',
    isActive: 'isActive',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const LessonAttemptScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    lessonId: 'lessonId',
    attemptNo: 'attemptNo',
    completedAt: 'completedAt',
    createdAt: 'createdAt'
  };

  export type LessonAttemptScalarFieldEnum = (typeof LessonAttemptScalarFieldEnum)[keyof typeof LessonAttemptScalarFieldEnum]


  export const LessonContentTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LessonContentTypeScalarFieldEnum = (typeof LessonContentTypeScalarFieldEnum)[keyof typeof LessonContentTypeScalarFieldEnum]


  export const LessonContentScalarFieldEnum: {
    id: 'id',
    lessonId: 'lessonId',
    contentTypeId: 'contentTypeId',
    contentUrl: 'contentUrl',
    duration: 'duration',
    pages: 'pages',
    sortOrder: 'sortOrder',
    isActive: 'isActive',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type LessonContentScalarFieldEnum = (typeof LessonContentScalarFieldEnum)[keyof typeof LessonContentScalarFieldEnum]


  export const LessonPrerequisiteScalarFieldEnum: {
    id: 'id',
    lessonId: 'lessonId',
    requiredLessonId: 'requiredLessonId'
  };

  export type LessonPrerequisiteScalarFieldEnum = (typeof LessonPrerequisiteScalarFieldEnum)[keyof typeof LessonPrerequisiteScalarFieldEnum]


  export const LessonTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type LessonTypeScalarFieldEnum = (typeof LessonTypeScalarFieldEnum)[keyof typeof LessonTypeScalarFieldEnum]


  export const LessonViewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    lessonId: 'lessonId',
    completed: 'completed',
    watchedTime: 'watchedTime',
    readPages: 'readPages',
    completedAt: 'completedAt',
    createdAt: 'createdAt'
  };

  export type LessonViewScalarFieldEnum = (typeof LessonViewScalarFieldEnum)[keyof typeof LessonViewScalarFieldEnum]


  export const LessonScalarFieldEnum: {
    id: 'id',
    lessonTypeId: 'lessonTypeId',
    courseId: 'courseId',
    courseInstructorId: 'courseInstructorId',
    name: 'name',
    description: 'description',
    imageUrl: 'imageUrl',
    sortOrder: 'sortOrder',
    parentId: 'parentId',
    isActive: 'isActive',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type LessonScalarFieldEnum = (typeof LessonScalarFieldEnum)[keyof typeof LessonScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const QuestionBankScalarFieldEnum: {
    id: 'id',
    questionTypeId: 'questionTypeId',
    questionLevelId: 'questionLevelId',
    questionSetId: 'questionSetId',
    questionText: 'questionText',
    score: 'score',
    imageUrl: 'imageUrl',
    answerData: 'answerData',
    explanation: 'explanation',
    versioning: 'versioning',
    creationMethod: 'creationMethod',
    sortOrder: 'sortOrder',
    randomize: 'randomize',
    isActive: 'isActive',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type QuestionBankScalarFieldEnum = (typeof QuestionBankScalarFieldEnum)[keyof typeof QuestionBankScalarFieldEnum]


  export const QuestionLevelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive'
  };

  export type QuestionLevelScalarFieldEnum = (typeof QuestionLevelScalarFieldEnum)[keyof typeof QuestionLevelScalarFieldEnum]


  export const QuestionSetScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    lessonId: 'lessonId',
    testTypeId: 'testTypeId',
    name: 'name',
    description: 'description',
    passScore: 'passScore',
    attemptLimit: 'attemptLimit',
    isActive: 'isActive',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type QuestionSetScalarFieldEnum = (typeof QuestionSetScalarFieldEnum)[keyof typeof QuestionSetScalarFieldEnum]


  export const QuestionTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive'
  };

  export type QuestionTypeScalarFieldEnum = (typeof QuestionTypeScalarFieldEnum)[keyof typeof QuestionTypeScalarFieldEnum]


  export const ResultLevelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive'
  };

  export type ResultLevelScalarFieldEnum = (typeof ResultLevelScalarFieldEnum)[keyof typeof ResultLevelScalarFieldEnum]


  export const ScoreCriteriaScalarFieldEnum: {
    id: 'id',
    questionSetId: 'questionSetId',
    resultLevelId: 'resultLevelId',
    minScore: 'minScore',
    maxScore: 'maxScore',
    description: 'description',
    updatedAt: 'updatedAt'
  };

  export type ScoreCriteriaScalarFieldEnum = (typeof ScoreCriteriaScalarFieldEnum)[keyof typeof ScoreCriteriaScalarFieldEnum]


  export const TestResultScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    questionSetId: 'questionSetId',
    resultLevelId: 'resultLevelId',
    rawScore: 'rawScore',
    normalizedScore: 'normalizedScore',
    attemptNo: 'attemptNo',
    completedAt: 'completedAt'
  };

  export type TestResultScalarFieldEnum = (typeof TestResultScalarFieldEnum)[keyof typeof TestResultScalarFieldEnum]


  export const TestTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isActive: 'isActive'
  };

  export type TestTypeScalarFieldEnum = (typeof TestTypeScalarFieldEnum)[keyof typeof TestTypeScalarFieldEnum]


  export const TitleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TitleScalarFieldEnum = (typeof TitleScalarFieldEnum)[keyof typeof TitleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    userRoleId: 'userRoleId',
    titleId: 'titleId',
    academicTitleId: 'academicTitleId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    departmentId: 'departmentId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'CreationMethod'
   */
  export type EnumCreationMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CreationMethod'>
    


  /**
   * Reference to a field of type 'CreationMethod[]'
   */
  export type ListEnumCreationMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CreationMethod[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AcademicTitleWhereInput = {
    AND?: AcademicTitleWhereInput | AcademicTitleWhereInput[]
    OR?: AcademicTitleWhereInput[]
    NOT?: AcademicTitleWhereInput | AcademicTitleWhereInput[]
    id?: IntFilter<"AcademicTitle"> | number
    name?: StringFilter<"AcademicTitle"> | string
    users?: UserListRelationFilter
  }

  export type AcademicTitleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type AcademicTitleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AcademicTitleWhereInput | AcademicTitleWhereInput[]
    OR?: AcademicTitleWhereInput[]
    NOT?: AcademicTitleWhereInput | AcademicTitleWhereInput[]
    name?: StringFilter<"AcademicTitle"> | string
    users?: UserListRelationFilter
  }, "id">

  export type AcademicTitleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: AcademicTitleCountOrderByAggregateInput
    _avg?: AcademicTitleAvgOrderByAggregateInput
    _max?: AcademicTitleMaxOrderByAggregateInput
    _min?: AcademicTitleMinOrderByAggregateInput
    _sum?: AcademicTitleSumOrderByAggregateInput
  }

  export type AcademicTitleScalarWhereWithAggregatesInput = {
    AND?: AcademicTitleScalarWhereWithAggregatesInput | AcademicTitleScalarWhereWithAggregatesInput[]
    OR?: AcademicTitleScalarWhereWithAggregatesInput[]
    NOT?: AcademicTitleScalarWhereWithAggregatesInput | AcademicTitleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AcademicTitle"> | number
    name?: StringWithAggregatesFilter<"AcademicTitle"> | string
  }

  export type AnswerSubmissionWhereInput = {
    AND?: AnswerSubmissionWhereInput | AnswerSubmissionWhereInput[]
    OR?: AnswerSubmissionWhereInput[]
    NOT?: AnswerSubmissionWhereInput | AnswerSubmissionWhereInput[]
    id?: IntFilter<"AnswerSubmission"> | number
    userId?: IntFilter<"AnswerSubmission"> | number
    questionSetId?: IntFilter<"AnswerSubmission"> | number
    questionBankId?: IntFilter<"AnswerSubmission"> | number
    selectedChoice?: JsonNullableFilter<"AnswerSubmission">
    filledText?: StringNullableFilter<"AnswerSubmission"> | string | null
    fileUrl?: StringNullableFilter<"AnswerSubmission"> | string | null
    isCorrect?: BoolFilter<"AnswerSubmission"> | boolean
    submittedAt?: DateTimeFilter<"AnswerSubmission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    questionBank?: XOR<QuestionBankScalarRelationFilter, QuestionBankWhereInput>
  }

  export type AnswerSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
    selectedChoice?: SortOrderInput | SortOrder
    filledText?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    isCorrect?: SortOrder
    submittedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    questionSet?: QuestionSetOrderByWithRelationInput
    questionBank?: QuestionBankOrderByWithRelationInput
  }

  export type AnswerSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AnswerSubmissionWhereInput | AnswerSubmissionWhereInput[]
    OR?: AnswerSubmissionWhereInput[]
    NOT?: AnswerSubmissionWhereInput | AnswerSubmissionWhereInput[]
    userId?: IntFilter<"AnswerSubmission"> | number
    questionSetId?: IntFilter<"AnswerSubmission"> | number
    questionBankId?: IntFilter<"AnswerSubmission"> | number
    selectedChoice?: JsonNullableFilter<"AnswerSubmission">
    filledText?: StringNullableFilter<"AnswerSubmission"> | string | null
    fileUrl?: StringNullableFilter<"AnswerSubmission"> | string | null
    isCorrect?: BoolFilter<"AnswerSubmission"> | boolean
    submittedAt?: DateTimeFilter<"AnswerSubmission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    questionBank?: XOR<QuestionBankScalarRelationFilter, QuestionBankWhereInput>
  }, "id">

  export type AnswerSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
    selectedChoice?: SortOrderInput | SortOrder
    filledText?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    isCorrect?: SortOrder
    submittedAt?: SortOrder
    _count?: AnswerSubmissionCountOrderByAggregateInput
    _avg?: AnswerSubmissionAvgOrderByAggregateInput
    _max?: AnswerSubmissionMaxOrderByAggregateInput
    _min?: AnswerSubmissionMinOrderByAggregateInput
    _sum?: AnswerSubmissionSumOrderByAggregateInput
  }

  export type AnswerSubmissionScalarWhereWithAggregatesInput = {
    AND?: AnswerSubmissionScalarWhereWithAggregatesInput | AnswerSubmissionScalarWhereWithAggregatesInput[]
    OR?: AnswerSubmissionScalarWhereWithAggregatesInput[]
    NOT?: AnswerSubmissionScalarWhereWithAggregatesInput | AnswerSubmissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AnswerSubmission"> | number
    userId?: IntWithAggregatesFilter<"AnswerSubmission"> | number
    questionSetId?: IntWithAggregatesFilter<"AnswerSubmission"> | number
    questionBankId?: IntWithAggregatesFilter<"AnswerSubmission"> | number
    selectedChoice?: JsonNullableWithAggregatesFilter<"AnswerSubmission">
    filledText?: StringNullableWithAggregatesFilter<"AnswerSubmission"> | string | null
    fileUrl?: StringNullableWithAggregatesFilter<"AnswerSubmission"> | string | null
    isCorrect?: BoolWithAggregatesFilter<"AnswerSubmission"> | boolean
    submittedAt?: DateTimeWithAggregatesFilter<"AnswerSubmission"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    isActive?: BoolFilter<"Category"> | boolean
    createdBy?: IntFilter<"Category"> | number
    updatedBy?: IntNullableFilter<"Category"> | number | null
    deletedBy?: IntNullableFilter<"Category"> | number | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    categories?: CourseListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdByUser?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    categories?: CourseOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    isActive?: BoolFilter<"Category"> | boolean
    createdBy?: IntFilter<"Category"> | number
    updatedBy?: IntNullableFilter<"Category"> | number | null
    deletedBy?: IntNullableFilter<"Category"> | number | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    categories?: CourseListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    createdBy?: IntWithAggregatesFilter<"Category"> | number
    updatedBy?: IntNullableWithAggregatesFilter<"Category"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"Category"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Category"> | Date | string | null
  }

  export type CourseCompletionWhereInput = {
    AND?: CourseCompletionWhereInput | CourseCompletionWhereInput[]
    OR?: CourseCompletionWhereInput[]
    NOT?: CourseCompletionWhereInput | CourseCompletionWhereInput[]
    id?: IntFilter<"CourseCompletion"> | number
    courseId?: IntFilter<"CourseCompletion"> | number
    userId?: IntFilter<"CourseCompletion"> | number
    completedAt?: DateTimeFilter<"CourseCompletion"> | Date | string
    finalScore?: IntFilter<"CourseCompletion"> | number
    isCertified?: BoolFilter<"CourseCompletion"> | boolean
    certificateUrl?: StringFilter<"CourseCompletion"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CourseCompletionOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    completedAt?: SortOrder
    finalScore?: SortOrder
    isCertified?: SortOrder
    certificateUrl?: SortOrder
    course?: CourseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CourseCompletionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseCompletionWhereInput | CourseCompletionWhereInput[]
    OR?: CourseCompletionWhereInput[]
    NOT?: CourseCompletionWhereInput | CourseCompletionWhereInput[]
    courseId?: IntFilter<"CourseCompletion"> | number
    userId?: IntFilter<"CourseCompletion"> | number
    completedAt?: DateTimeFilter<"CourseCompletion"> | Date | string
    finalScore?: IntFilter<"CourseCompletion"> | number
    isCertified?: BoolFilter<"CourseCompletion"> | boolean
    certificateUrl?: StringFilter<"CourseCompletion"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type CourseCompletionOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    completedAt?: SortOrder
    finalScore?: SortOrder
    isCertified?: SortOrder
    certificateUrl?: SortOrder
    _count?: CourseCompletionCountOrderByAggregateInput
    _avg?: CourseCompletionAvgOrderByAggregateInput
    _max?: CourseCompletionMaxOrderByAggregateInput
    _min?: CourseCompletionMinOrderByAggregateInput
    _sum?: CourseCompletionSumOrderByAggregateInput
  }

  export type CourseCompletionScalarWhereWithAggregatesInput = {
    AND?: CourseCompletionScalarWhereWithAggregatesInput | CourseCompletionScalarWhereWithAggregatesInput[]
    OR?: CourseCompletionScalarWhereWithAggregatesInput[]
    NOT?: CourseCompletionScalarWhereWithAggregatesInput | CourseCompletionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CourseCompletion"> | number
    courseId?: IntWithAggregatesFilter<"CourseCompletion"> | number
    userId?: IntWithAggregatesFilter<"CourseCompletion"> | number
    completedAt?: DateTimeWithAggregatesFilter<"CourseCompletion"> | Date | string
    finalScore?: IntWithAggregatesFilter<"CourseCompletion"> | number
    isCertified?: BoolWithAggregatesFilter<"CourseCompletion"> | boolean
    certificateUrl?: StringWithAggregatesFilter<"CourseCompletion"> | string
  }

  export type CourseEnrollmentWhereInput = {
    AND?: CourseEnrollmentWhereInput | CourseEnrollmentWhereInput[]
    OR?: CourseEnrollmentWhereInput[]
    NOT?: CourseEnrollmentWhereInput | CourseEnrollmentWhereInput[]
    id?: IntFilter<"CourseEnrollment"> | number
    courseId?: IntFilter<"CourseEnrollment"> | number
    userId?: IntFilter<"CourseEnrollment"> | number
    enrolledAt?: DateTimeFilter<"CourseEnrollment"> | Date | string
  }

  export type CourseEnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    enrolledAt?: SortOrder
  }

  export type CourseEnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseEnrollmentWhereInput | CourseEnrollmentWhereInput[]
    OR?: CourseEnrollmentWhereInput[]
    NOT?: CourseEnrollmentWhereInput | CourseEnrollmentWhereInput[]
    courseId?: IntFilter<"CourseEnrollment"> | number
    userId?: IntFilter<"CourseEnrollment"> | number
    enrolledAt?: DateTimeFilter<"CourseEnrollment"> | Date | string
  }, "id">

  export type CourseEnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    enrolledAt?: SortOrder
    _count?: CourseEnrollmentCountOrderByAggregateInput
    _avg?: CourseEnrollmentAvgOrderByAggregateInput
    _max?: CourseEnrollmentMaxOrderByAggregateInput
    _min?: CourseEnrollmentMinOrderByAggregateInput
    _sum?: CourseEnrollmentSumOrderByAggregateInput
  }

  export type CourseEnrollmentScalarWhereWithAggregatesInput = {
    AND?: CourseEnrollmentScalarWhereWithAggregatesInput | CourseEnrollmentScalarWhereWithAggregatesInput[]
    OR?: CourseEnrollmentScalarWhereWithAggregatesInput[]
    NOT?: CourseEnrollmentScalarWhereWithAggregatesInput | CourseEnrollmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CourseEnrollment"> | number
    courseId?: IntWithAggregatesFilter<"CourseEnrollment"> | number
    userId?: IntWithAggregatesFilter<"CourseEnrollment"> | number
    enrolledAt?: DateTimeWithAggregatesFilter<"CourseEnrollment"> | Date | string
  }

  export type CourseInstructorWhereInput = {
    AND?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    OR?: CourseInstructorWhereInput[]
    NOT?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    id?: IntFilter<"CourseInstructor"> | number
    courseId?: IntFilter<"CourseInstructor"> | number
    userId?: IntNullableFilter<"CourseInstructor"> | number | null
    fullName?: StringNullableFilter<"CourseInstructor"> | string | null
    role?: EnumRoleFilter<"CourseInstructor"> | $Enums.Role
    isActive?: BoolFilter<"CourseInstructor"> | boolean
    updatedBy?: IntNullableFilter<"CourseInstructor"> | number | null
    deletedBy?: IntNullableFilter<"CourseInstructor"> | number | null
    updatedAt?: DateTimeNullableFilter<"CourseInstructor"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"CourseInstructor"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    courseInstructor?: LessonListRelationFilter
  }

  export type CourseInstructorOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrderInput | SortOrder
    fullName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    courseInstructor?: LessonOrderByRelationAggregateInput
  }

  export type CourseInstructorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    OR?: CourseInstructorWhereInput[]
    NOT?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    courseId?: IntFilter<"CourseInstructor"> | number
    userId?: IntNullableFilter<"CourseInstructor"> | number | null
    fullName?: StringNullableFilter<"CourseInstructor"> | string | null
    role?: EnumRoleFilter<"CourseInstructor"> | $Enums.Role
    isActive?: BoolFilter<"CourseInstructor"> | boolean
    updatedBy?: IntNullableFilter<"CourseInstructor"> | number | null
    deletedBy?: IntNullableFilter<"CourseInstructor"> | number | null
    updatedAt?: DateTimeNullableFilter<"CourseInstructor"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"CourseInstructor"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    courseInstructor?: LessonListRelationFilter
  }, "id">

  export type CourseInstructorOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrderInput | SortOrder
    fullName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: CourseInstructorCountOrderByAggregateInput
    _avg?: CourseInstructorAvgOrderByAggregateInput
    _max?: CourseInstructorMaxOrderByAggregateInput
    _min?: CourseInstructorMinOrderByAggregateInput
    _sum?: CourseInstructorSumOrderByAggregateInput
  }

  export type CourseInstructorScalarWhereWithAggregatesInput = {
    AND?: CourseInstructorScalarWhereWithAggregatesInput | CourseInstructorScalarWhereWithAggregatesInput[]
    OR?: CourseInstructorScalarWhereWithAggregatesInput[]
    NOT?: CourseInstructorScalarWhereWithAggregatesInput | CourseInstructorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CourseInstructor"> | number
    courseId?: IntWithAggregatesFilter<"CourseInstructor"> | number
    userId?: IntNullableWithAggregatesFilter<"CourseInstructor"> | number | null
    fullName?: StringNullableWithAggregatesFilter<"CourseInstructor"> | string | null
    role?: EnumRoleWithAggregatesFilter<"CourseInstructor"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"CourseInstructor"> | boolean
    updatedBy?: IntNullableWithAggregatesFilter<"CourseInstructor"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"CourseInstructor"> | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CourseInstructor"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"CourseInstructor"> | Date | string | null
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    categoryId?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    imageUrl?: StringFilter<"Course"> | string
    fee?: IntFilter<"Course"> | number
    isActive?: BoolFilter<"Course"> | boolean
    createdBy?: IntFilter<"Course"> | number
    updatedBy?: IntNullableFilter<"Course"> | number | null
    deletedBy?: IntNullableFilter<"Course"> | number | null
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    courseInstructorCourseId?: CourseInstructorListRelationFilter
    courseCompletionCourseId?: CourseCompletionListRelationFilter
    lessonCourseId?: LessonListRelationFilter
    questionSetCourseId?: QuestionSetListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    fee?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    createdByUser?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    courseInstructorCourseId?: CourseInstructorOrderByRelationAggregateInput
    courseCompletionCourseId?: CourseCompletionOrderByRelationAggregateInput
    lessonCourseId?: LessonOrderByRelationAggregateInput
    questionSetCourseId?: QuestionSetOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    categoryId?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    imageUrl?: StringFilter<"Course"> | string
    fee?: IntFilter<"Course"> | number
    isActive?: BoolFilter<"Course"> | boolean
    createdBy?: IntFilter<"Course"> | number
    updatedBy?: IntNullableFilter<"Course"> | number | null
    deletedBy?: IntNullableFilter<"Course"> | number | null
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    courseInstructorCourseId?: CourseInstructorListRelationFilter
    courseCompletionCourseId?: CourseCompletionListRelationFilter
    lessonCourseId?: LessonListRelationFilter
    questionSetCourseId?: QuestionSetListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    fee?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    categoryId?: IntWithAggregatesFilter<"Course"> | number
    name?: StringWithAggregatesFilter<"Course"> | string
    description?: StringWithAggregatesFilter<"Course"> | string
    imageUrl?: StringWithAggregatesFilter<"Course"> | string
    fee?: IntWithAggregatesFilter<"Course"> | number
    isActive?: BoolWithAggregatesFilter<"Course"> | boolean
    createdBy?: IntWithAggregatesFilter<"Course"> | number
    updatedBy?: IntNullableWithAggregatesFilter<"Course"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"Course"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Course"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Course"> | Date | string | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    organizationId?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    isActive?: BoolFilter<"Department"> | boolean
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Department"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Department"> | Date | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    users?: UserListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    organizationId?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    isActive?: BoolFilter<"Department"> | boolean
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Department"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Department"> | Date | string | null
    organization?: XOR<OrganizationScalarRelationFilter, OrganizationWhereInput>
    users?: UserListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    organizationId?: IntWithAggregatesFilter<"Department"> | number
    name?: StringWithAggregatesFilter<"Department"> | string
    isActive?: BoolWithAggregatesFilter<"Department"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Department"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Department"> | Date | string | null
  }

  export type LessonAttemptWhereInput = {
    AND?: LessonAttemptWhereInput | LessonAttemptWhereInput[]
    OR?: LessonAttemptWhereInput[]
    NOT?: LessonAttemptWhereInput | LessonAttemptWhereInput[]
    id?: IntFilter<"LessonAttempt"> | number
    userId?: IntFilter<"LessonAttempt"> | number
    lessonId?: IntFilter<"LessonAttempt"> | number
    attemptNo?: IntFilter<"LessonAttempt"> | number
    completedAt?: DateTimeNullableFilter<"LessonAttempt"> | Date | string | null
    createdAt?: DateTimeFilter<"LessonAttempt"> | Date | string
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
    lessons?: XOR<LessonScalarRelationFilter, LessonWhereInput>
  }

  export type LessonAttemptOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    users?: UserOrderByWithRelationInput
    lessons?: LessonOrderByWithRelationInput
  }

  export type LessonAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonAttemptWhereInput | LessonAttemptWhereInput[]
    OR?: LessonAttemptWhereInput[]
    NOT?: LessonAttemptWhereInput | LessonAttemptWhereInput[]
    userId?: IntFilter<"LessonAttempt"> | number
    lessonId?: IntFilter<"LessonAttempt"> | number
    attemptNo?: IntFilter<"LessonAttempt"> | number
    completedAt?: DateTimeNullableFilter<"LessonAttempt"> | Date | string | null
    createdAt?: DateTimeFilter<"LessonAttempt"> | Date | string
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
    lessons?: XOR<LessonScalarRelationFilter, LessonWhereInput>
  }, "id">

  export type LessonAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LessonAttemptCountOrderByAggregateInput
    _avg?: LessonAttemptAvgOrderByAggregateInput
    _max?: LessonAttemptMaxOrderByAggregateInput
    _min?: LessonAttemptMinOrderByAggregateInput
    _sum?: LessonAttemptSumOrderByAggregateInput
  }

  export type LessonAttemptScalarWhereWithAggregatesInput = {
    AND?: LessonAttemptScalarWhereWithAggregatesInput | LessonAttemptScalarWhereWithAggregatesInput[]
    OR?: LessonAttemptScalarWhereWithAggregatesInput[]
    NOT?: LessonAttemptScalarWhereWithAggregatesInput | LessonAttemptScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LessonAttempt"> | number
    userId?: IntWithAggregatesFilter<"LessonAttempt"> | number
    lessonId?: IntWithAggregatesFilter<"LessonAttempt"> | number
    attemptNo?: IntWithAggregatesFilter<"LessonAttempt"> | number
    completedAt?: DateTimeNullableWithAggregatesFilter<"LessonAttempt"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LessonAttempt"> | Date | string
  }

  export type LessonContentTypeWhereInput = {
    AND?: LessonContentTypeWhereInput | LessonContentTypeWhereInput[]
    OR?: LessonContentTypeWhereInput[]
    NOT?: LessonContentTypeWhereInput | LessonContentTypeWhereInput[]
    id?: IntFilter<"LessonContentType"> | number
    name?: StringFilter<"LessonContentType"> | string
    lessonContent?: LessonContentListRelationFilter
  }

  export type LessonContentTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    lessonContent?: LessonContentOrderByRelationAggregateInput
  }

  export type LessonContentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonContentTypeWhereInput | LessonContentTypeWhereInput[]
    OR?: LessonContentTypeWhereInput[]
    NOT?: LessonContentTypeWhereInput | LessonContentTypeWhereInput[]
    name?: StringFilter<"LessonContentType"> | string
    lessonContent?: LessonContentListRelationFilter
  }, "id">

  export type LessonContentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: LessonContentTypeCountOrderByAggregateInput
    _avg?: LessonContentTypeAvgOrderByAggregateInput
    _max?: LessonContentTypeMaxOrderByAggregateInput
    _min?: LessonContentTypeMinOrderByAggregateInput
    _sum?: LessonContentTypeSumOrderByAggregateInput
  }

  export type LessonContentTypeScalarWhereWithAggregatesInput = {
    AND?: LessonContentTypeScalarWhereWithAggregatesInput | LessonContentTypeScalarWhereWithAggregatesInput[]
    OR?: LessonContentTypeScalarWhereWithAggregatesInput[]
    NOT?: LessonContentTypeScalarWhereWithAggregatesInput | LessonContentTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LessonContentType"> | number
    name?: StringWithAggregatesFilter<"LessonContentType"> | string
  }

  export type LessonContentWhereInput = {
    AND?: LessonContentWhereInput | LessonContentWhereInput[]
    OR?: LessonContentWhereInput[]
    NOT?: LessonContentWhereInput | LessonContentWhereInput[]
    id?: IntFilter<"LessonContent"> | number
    lessonId?: IntFilter<"LessonContent"> | number
    contentTypeId?: IntFilter<"LessonContent"> | number
    contentUrl?: StringNullableFilter<"LessonContent"> | string | null
    duration?: IntNullableFilter<"LessonContent"> | number | null
    pages?: IntNullableFilter<"LessonContent"> | number | null
    sortOrder?: IntFilter<"LessonContent"> | number
    isActive?: BoolFilter<"LessonContent"> | boolean
    updatedBy?: IntNullableFilter<"LessonContent"> | number | null
    deletedBy?: IntNullableFilter<"LessonContent"> | number | null
    updatedAt?: DateTimeNullableFilter<"LessonContent"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"LessonContent"> | Date | string | null
    lesson?: XOR<LessonScalarRelationFilter, LessonWhereInput>
    lessonContentType?: XOR<LessonContentTypeScalarRelationFilter, LessonContentTypeWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type LessonContentOrderByWithRelationInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    contentUrl?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    pages?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    lesson?: LessonOrderByWithRelationInput
    lessonContentType?: LessonContentTypeOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
  }

  export type LessonContentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonContentWhereInput | LessonContentWhereInput[]
    OR?: LessonContentWhereInput[]
    NOT?: LessonContentWhereInput | LessonContentWhereInput[]
    lessonId?: IntFilter<"LessonContent"> | number
    contentTypeId?: IntFilter<"LessonContent"> | number
    contentUrl?: StringNullableFilter<"LessonContent"> | string | null
    duration?: IntNullableFilter<"LessonContent"> | number | null
    pages?: IntNullableFilter<"LessonContent"> | number | null
    sortOrder?: IntFilter<"LessonContent"> | number
    isActive?: BoolFilter<"LessonContent"> | boolean
    updatedBy?: IntNullableFilter<"LessonContent"> | number | null
    deletedBy?: IntNullableFilter<"LessonContent"> | number | null
    updatedAt?: DateTimeNullableFilter<"LessonContent"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"LessonContent"> | Date | string | null
    lesson?: XOR<LessonScalarRelationFilter, LessonWhereInput>
    lessonContentType?: XOR<LessonContentTypeScalarRelationFilter, LessonContentTypeWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type LessonContentOrderByWithAggregationInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    contentUrl?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    pages?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LessonContentCountOrderByAggregateInput
    _avg?: LessonContentAvgOrderByAggregateInput
    _max?: LessonContentMaxOrderByAggregateInput
    _min?: LessonContentMinOrderByAggregateInput
    _sum?: LessonContentSumOrderByAggregateInput
  }

  export type LessonContentScalarWhereWithAggregatesInput = {
    AND?: LessonContentScalarWhereWithAggregatesInput | LessonContentScalarWhereWithAggregatesInput[]
    OR?: LessonContentScalarWhereWithAggregatesInput[]
    NOT?: LessonContentScalarWhereWithAggregatesInput | LessonContentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LessonContent"> | number
    lessonId?: IntWithAggregatesFilter<"LessonContent"> | number
    contentTypeId?: IntWithAggregatesFilter<"LessonContent"> | number
    contentUrl?: StringNullableWithAggregatesFilter<"LessonContent"> | string | null
    duration?: IntNullableWithAggregatesFilter<"LessonContent"> | number | null
    pages?: IntNullableWithAggregatesFilter<"LessonContent"> | number | null
    sortOrder?: IntWithAggregatesFilter<"LessonContent"> | number
    isActive?: BoolWithAggregatesFilter<"LessonContent"> | boolean
    updatedBy?: IntNullableWithAggregatesFilter<"LessonContent"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"LessonContent"> | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"LessonContent"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"LessonContent"> | Date | string | null
  }

  export type LessonPrerequisiteWhereInput = {
    AND?: LessonPrerequisiteWhereInput | LessonPrerequisiteWhereInput[]
    OR?: LessonPrerequisiteWhereInput[]
    NOT?: LessonPrerequisiteWhereInput | LessonPrerequisiteWhereInput[]
    id?: IntFilter<"LessonPrerequisite"> | number
    lessonId?: IntFilter<"LessonPrerequisite"> | number
    requiredLessonId?: IntFilter<"LessonPrerequisite"> | number
    lessons?: XOR<LessonScalarRelationFilter, LessonWhereInput>
    requiredLesson?: XOR<LessonScalarRelationFilter, LessonWhereInput>
  }

  export type LessonPrerequisiteOrderByWithRelationInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
    lessons?: LessonOrderByWithRelationInput
    requiredLesson?: LessonOrderByWithRelationInput
  }

  export type LessonPrerequisiteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonPrerequisiteWhereInput | LessonPrerequisiteWhereInput[]
    OR?: LessonPrerequisiteWhereInput[]
    NOT?: LessonPrerequisiteWhereInput | LessonPrerequisiteWhereInput[]
    lessonId?: IntFilter<"LessonPrerequisite"> | number
    requiredLessonId?: IntFilter<"LessonPrerequisite"> | number
    lessons?: XOR<LessonScalarRelationFilter, LessonWhereInput>
    requiredLesson?: XOR<LessonScalarRelationFilter, LessonWhereInput>
  }, "id">

  export type LessonPrerequisiteOrderByWithAggregationInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
    _count?: LessonPrerequisiteCountOrderByAggregateInput
    _avg?: LessonPrerequisiteAvgOrderByAggregateInput
    _max?: LessonPrerequisiteMaxOrderByAggregateInput
    _min?: LessonPrerequisiteMinOrderByAggregateInput
    _sum?: LessonPrerequisiteSumOrderByAggregateInput
  }

  export type LessonPrerequisiteScalarWhereWithAggregatesInput = {
    AND?: LessonPrerequisiteScalarWhereWithAggregatesInput | LessonPrerequisiteScalarWhereWithAggregatesInput[]
    OR?: LessonPrerequisiteScalarWhereWithAggregatesInput[]
    NOT?: LessonPrerequisiteScalarWhereWithAggregatesInput | LessonPrerequisiteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LessonPrerequisite"> | number
    lessonId?: IntWithAggregatesFilter<"LessonPrerequisite"> | number
    requiredLessonId?: IntWithAggregatesFilter<"LessonPrerequisite"> | number
  }

  export type LessonTypeWhereInput = {
    AND?: LessonTypeWhereInput | LessonTypeWhereInput[]
    OR?: LessonTypeWhereInput[]
    NOT?: LessonTypeWhereInput | LessonTypeWhereInput[]
    id?: IntFilter<"LessonType"> | number
    name?: StringFilter<"LessonType"> | string
    lessonTypeId?: LessonListRelationFilter
  }

  export type LessonTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    lessonTypeId?: LessonOrderByRelationAggregateInput
  }

  export type LessonTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonTypeWhereInput | LessonTypeWhereInput[]
    OR?: LessonTypeWhereInput[]
    NOT?: LessonTypeWhereInput | LessonTypeWhereInput[]
    name?: StringFilter<"LessonType"> | string
    lessonTypeId?: LessonListRelationFilter
  }, "id">

  export type LessonTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: LessonTypeCountOrderByAggregateInput
    _avg?: LessonTypeAvgOrderByAggregateInput
    _max?: LessonTypeMaxOrderByAggregateInput
    _min?: LessonTypeMinOrderByAggregateInput
    _sum?: LessonTypeSumOrderByAggregateInput
  }

  export type LessonTypeScalarWhereWithAggregatesInput = {
    AND?: LessonTypeScalarWhereWithAggregatesInput | LessonTypeScalarWhereWithAggregatesInput[]
    OR?: LessonTypeScalarWhereWithAggregatesInput[]
    NOT?: LessonTypeScalarWhereWithAggregatesInput | LessonTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LessonType"> | number
    name?: StringWithAggregatesFilter<"LessonType"> | string
  }

  export type LessonViewWhereInput = {
    AND?: LessonViewWhereInput | LessonViewWhereInput[]
    OR?: LessonViewWhereInput[]
    NOT?: LessonViewWhereInput | LessonViewWhereInput[]
    id?: IntFilter<"LessonView"> | number
    userId?: IntFilter<"LessonView"> | number
    lessonId?: IntFilter<"LessonView"> | number
    completed?: BoolFilter<"LessonView"> | boolean
    watchedTime?: IntFilter<"LessonView"> | number
    readPages?: IntFilter<"LessonView"> | number
    completedAt?: DateTimeNullableFilter<"LessonView"> | Date | string | null
    createdAt?: DateTimeFilter<"LessonView"> | Date | string
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
    lessons?: XOR<LessonScalarRelationFilter, LessonWhereInput>
  }

  export type LessonViewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    completed?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    users?: UserOrderByWithRelationInput
    lessons?: LessonOrderByWithRelationInput
  }

  export type LessonViewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonViewWhereInput | LessonViewWhereInput[]
    OR?: LessonViewWhereInput[]
    NOT?: LessonViewWhereInput | LessonViewWhereInput[]
    userId?: IntFilter<"LessonView"> | number
    lessonId?: IntFilter<"LessonView"> | number
    completed?: BoolFilter<"LessonView"> | boolean
    watchedTime?: IntFilter<"LessonView"> | number
    readPages?: IntFilter<"LessonView"> | number
    completedAt?: DateTimeNullableFilter<"LessonView"> | Date | string | null
    createdAt?: DateTimeFilter<"LessonView"> | Date | string
    users?: XOR<UserScalarRelationFilter, UserWhereInput>
    lessons?: XOR<LessonScalarRelationFilter, LessonWhereInput>
  }, "id">

  export type LessonViewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    completed?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LessonViewCountOrderByAggregateInput
    _avg?: LessonViewAvgOrderByAggregateInput
    _max?: LessonViewMaxOrderByAggregateInput
    _min?: LessonViewMinOrderByAggregateInput
    _sum?: LessonViewSumOrderByAggregateInput
  }

  export type LessonViewScalarWhereWithAggregatesInput = {
    AND?: LessonViewScalarWhereWithAggregatesInput | LessonViewScalarWhereWithAggregatesInput[]
    OR?: LessonViewScalarWhereWithAggregatesInput[]
    NOT?: LessonViewScalarWhereWithAggregatesInput | LessonViewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LessonView"> | number
    userId?: IntWithAggregatesFilter<"LessonView"> | number
    lessonId?: IntWithAggregatesFilter<"LessonView"> | number
    completed?: BoolWithAggregatesFilter<"LessonView"> | boolean
    watchedTime?: IntWithAggregatesFilter<"LessonView"> | number
    readPages?: IntWithAggregatesFilter<"LessonView"> | number
    completedAt?: DateTimeNullableWithAggregatesFilter<"LessonView"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LessonView"> | Date | string
  }

  export type LessonWhereInput = {
    AND?: LessonWhereInput | LessonWhereInput[]
    OR?: LessonWhereInput[]
    NOT?: LessonWhereInput | LessonWhereInput[]
    id?: IntFilter<"Lesson"> | number
    lessonTypeId?: IntFilter<"Lesson"> | number
    courseId?: IntFilter<"Lesson"> | number
    courseInstructorId?: IntFilter<"Lesson"> | number
    name?: StringFilter<"Lesson"> | string
    description?: StringNullableFilter<"Lesson"> | string | null
    imageUrl?: StringNullableFilter<"Lesson"> | string | null
    sortOrder?: IntFilter<"Lesson"> | number
    parentId?: IntNullableFilter<"Lesson"> | number | null
    isActive?: BoolFilter<"Lesson"> | boolean
    createdBy?: IntFilter<"Lesson"> | number
    updatedBy?: IntNullableFilter<"Lesson"> | number | null
    deletedBy?: IntNullableFilter<"Lesson"> | number | null
    createdAt?: DateTimeFilter<"Lesson"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Lesson"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Lesson"> | Date | string | null
    parent?: XOR<LessonNullableScalarRelationFilter, LessonWhereInput> | null
    children?: LessonListRelationFilter
    lessonType?: XOR<LessonTypeScalarRelationFilter, LessonTypeWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    courseInstructor?: XOR<CourseInstructorScalarRelationFilter, CourseInstructorWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    lessonContent?: LessonContentListRelationFilter
    lessonViewLessonId?: LessonViewListRelationFilter
    lessonAttemptLessonId?: LessonAttemptListRelationFilter
    lessonPrerequisiteLessonId?: LessonPrerequisiteListRelationFilter
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteListRelationFilter
    questionSetLessonId?: QuestionSetListRelationFilter
  }

  export type LessonOrderByWithRelationInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    parent?: LessonOrderByWithRelationInput
    children?: LessonOrderByRelationAggregateInput
    lessonType?: LessonTypeOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    courseInstructor?: CourseInstructorOrderByWithRelationInput
    createdByUser?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    lessonContent?: LessonContentOrderByRelationAggregateInput
    lessonViewLessonId?: LessonViewOrderByRelationAggregateInput
    lessonAttemptLessonId?: LessonAttemptOrderByRelationAggregateInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteOrderByRelationAggregateInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteOrderByRelationAggregateInput
    questionSetLessonId?: QuestionSetOrderByRelationAggregateInput
  }

  export type LessonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LessonWhereInput | LessonWhereInput[]
    OR?: LessonWhereInput[]
    NOT?: LessonWhereInput | LessonWhereInput[]
    lessonTypeId?: IntFilter<"Lesson"> | number
    courseId?: IntFilter<"Lesson"> | number
    courseInstructorId?: IntFilter<"Lesson"> | number
    name?: StringFilter<"Lesson"> | string
    description?: StringNullableFilter<"Lesson"> | string | null
    imageUrl?: StringNullableFilter<"Lesson"> | string | null
    sortOrder?: IntFilter<"Lesson"> | number
    parentId?: IntNullableFilter<"Lesson"> | number | null
    isActive?: BoolFilter<"Lesson"> | boolean
    createdBy?: IntFilter<"Lesson"> | number
    updatedBy?: IntNullableFilter<"Lesson"> | number | null
    deletedBy?: IntNullableFilter<"Lesson"> | number | null
    createdAt?: DateTimeFilter<"Lesson"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Lesson"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Lesson"> | Date | string | null
    parent?: XOR<LessonNullableScalarRelationFilter, LessonWhereInput> | null
    children?: LessonListRelationFilter
    lessonType?: XOR<LessonTypeScalarRelationFilter, LessonTypeWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    courseInstructor?: XOR<CourseInstructorScalarRelationFilter, CourseInstructorWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    lessonContent?: LessonContentListRelationFilter
    lessonViewLessonId?: LessonViewListRelationFilter
    lessonAttemptLessonId?: LessonAttemptListRelationFilter
    lessonPrerequisiteLessonId?: LessonPrerequisiteListRelationFilter
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteListRelationFilter
    questionSetLessonId?: QuestionSetListRelationFilter
  }, "id">

  export type LessonOrderByWithAggregationInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: LessonCountOrderByAggregateInput
    _avg?: LessonAvgOrderByAggregateInput
    _max?: LessonMaxOrderByAggregateInput
    _min?: LessonMinOrderByAggregateInput
    _sum?: LessonSumOrderByAggregateInput
  }

  export type LessonScalarWhereWithAggregatesInput = {
    AND?: LessonScalarWhereWithAggregatesInput | LessonScalarWhereWithAggregatesInput[]
    OR?: LessonScalarWhereWithAggregatesInput[]
    NOT?: LessonScalarWhereWithAggregatesInput | LessonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lesson"> | number
    lessonTypeId?: IntWithAggregatesFilter<"Lesson"> | number
    courseId?: IntWithAggregatesFilter<"Lesson"> | number
    courseInstructorId?: IntWithAggregatesFilter<"Lesson"> | number
    name?: StringWithAggregatesFilter<"Lesson"> | string
    description?: StringNullableWithAggregatesFilter<"Lesson"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Lesson"> | string | null
    sortOrder?: IntWithAggregatesFilter<"Lesson"> | number
    parentId?: IntNullableWithAggregatesFilter<"Lesson"> | number | null
    isActive?: BoolWithAggregatesFilter<"Lesson"> | boolean
    createdBy?: IntWithAggregatesFilter<"Lesson"> | number
    updatedBy?: IntNullableWithAggregatesFilter<"Lesson"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"Lesson"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Lesson"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Lesson"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Lesson"> | Date | string | null
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: IntFilter<"Organization"> | number
    name?: StringFilter<"Organization"> | string
    isActive?: BoolFilter<"Organization"> | boolean
    createdBy?: IntFilter<"Organization"> | number
    updatedBy?: IntNullableFilter<"Organization"> | number | null
    deletedBy?: IntNullableFilter<"Organization"> | number | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    departments?: DepartmentListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdByUser?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    departments?: DepartmentOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    isActive?: BoolFilter<"Organization"> | boolean
    createdBy?: IntFilter<"Organization"> | number
    updatedBy?: IntNullableFilter<"Organization"> | number | null
    deletedBy?: IntNullableFilter<"Organization"> | number | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    departments?: DepartmentListRelationFilter
  }, "id">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Organization"> | number
    name?: StringWithAggregatesFilter<"Organization"> | string
    isActive?: BoolWithAggregatesFilter<"Organization"> | boolean
    createdBy?: IntWithAggregatesFilter<"Organization"> | number
    updatedBy?: IntNullableWithAggregatesFilter<"Organization"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"Organization"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Organization"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Organization"> | Date | string | null
  }

  export type QuestionBankWhereInput = {
    AND?: QuestionBankWhereInput | QuestionBankWhereInput[]
    OR?: QuestionBankWhereInput[]
    NOT?: QuestionBankWhereInput | QuestionBankWhereInput[]
    id?: IntFilter<"QuestionBank"> | number
    questionTypeId?: IntFilter<"QuestionBank"> | number
    questionLevelId?: IntFilter<"QuestionBank"> | number
    questionSetId?: IntFilter<"QuestionBank"> | number
    questionText?: StringFilter<"QuestionBank"> | string
    score?: IntFilter<"QuestionBank"> | number
    imageUrl?: StringNullableFilter<"QuestionBank"> | string | null
    answerData?: JsonFilter<"QuestionBank">
    explanation?: StringNullableFilter<"QuestionBank"> | string | null
    versioning?: StringNullableFilter<"QuestionBank"> | string | null
    creationMethod?: EnumCreationMethodFilter<"QuestionBank"> | $Enums.CreationMethod
    sortOrder?: IntFilter<"QuestionBank"> | number
    randomize?: BoolFilter<"QuestionBank"> | boolean
    isActive?: BoolFilter<"QuestionBank"> | boolean
    createdBy?: IntFilter<"QuestionBank"> | number
    updatedBy?: IntNullableFilter<"QuestionBank"> | number | null
    deletedBy?: IntNullableFilter<"QuestionBank"> | number | null
    createdAt?: DateTimeFilter<"QuestionBank"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuestionBank"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"QuestionBank"> | Date | string | null
    questionType?: XOR<QuestionTypeScalarRelationFilter, QuestionTypeWhereInput>
    questionLevel?: XOR<QuestionLevelScalarRelationFilter, QuestionLevelWhereInput>
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    answerSubmission?: AnswerSubmissionListRelationFilter
  }

  export type QuestionBankOrderByWithRelationInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    questionText?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    answerData?: SortOrder
    explanation?: SortOrderInput | SortOrder
    versioning?: SortOrderInput | SortOrder
    creationMethod?: SortOrder
    sortOrder?: SortOrder
    randomize?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    questionType?: QuestionTypeOrderByWithRelationInput
    questionLevel?: QuestionLevelOrderByWithRelationInput
    questionSet?: QuestionSetOrderByWithRelationInput
    createdByUser?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    answerSubmission?: AnswerSubmissionOrderByRelationAggregateInput
  }

  export type QuestionBankWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionBankWhereInput | QuestionBankWhereInput[]
    OR?: QuestionBankWhereInput[]
    NOT?: QuestionBankWhereInput | QuestionBankWhereInput[]
    questionTypeId?: IntFilter<"QuestionBank"> | number
    questionLevelId?: IntFilter<"QuestionBank"> | number
    questionSetId?: IntFilter<"QuestionBank"> | number
    questionText?: StringFilter<"QuestionBank"> | string
    score?: IntFilter<"QuestionBank"> | number
    imageUrl?: StringNullableFilter<"QuestionBank"> | string | null
    answerData?: JsonFilter<"QuestionBank">
    explanation?: StringNullableFilter<"QuestionBank"> | string | null
    versioning?: StringNullableFilter<"QuestionBank"> | string | null
    creationMethod?: EnumCreationMethodFilter<"QuestionBank"> | $Enums.CreationMethod
    sortOrder?: IntFilter<"QuestionBank"> | number
    randomize?: BoolFilter<"QuestionBank"> | boolean
    isActive?: BoolFilter<"QuestionBank"> | boolean
    createdBy?: IntFilter<"QuestionBank"> | number
    updatedBy?: IntNullableFilter<"QuestionBank"> | number | null
    deletedBy?: IntNullableFilter<"QuestionBank"> | number | null
    createdAt?: DateTimeFilter<"QuestionBank"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuestionBank"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"QuestionBank"> | Date | string | null
    questionType?: XOR<QuestionTypeScalarRelationFilter, QuestionTypeWhereInput>
    questionLevel?: XOR<QuestionLevelScalarRelationFilter, QuestionLevelWhereInput>
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    answerSubmission?: AnswerSubmissionListRelationFilter
  }, "id">

  export type QuestionBankOrderByWithAggregationInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    questionText?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    answerData?: SortOrder
    explanation?: SortOrderInput | SortOrder
    versioning?: SortOrderInput | SortOrder
    creationMethod?: SortOrder
    sortOrder?: SortOrder
    randomize?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: QuestionBankCountOrderByAggregateInput
    _avg?: QuestionBankAvgOrderByAggregateInput
    _max?: QuestionBankMaxOrderByAggregateInput
    _min?: QuestionBankMinOrderByAggregateInput
    _sum?: QuestionBankSumOrderByAggregateInput
  }

  export type QuestionBankScalarWhereWithAggregatesInput = {
    AND?: QuestionBankScalarWhereWithAggregatesInput | QuestionBankScalarWhereWithAggregatesInput[]
    OR?: QuestionBankScalarWhereWithAggregatesInput[]
    NOT?: QuestionBankScalarWhereWithAggregatesInput | QuestionBankScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionBank"> | number
    questionTypeId?: IntWithAggregatesFilter<"QuestionBank"> | number
    questionLevelId?: IntWithAggregatesFilter<"QuestionBank"> | number
    questionSetId?: IntWithAggregatesFilter<"QuestionBank"> | number
    questionText?: StringWithAggregatesFilter<"QuestionBank"> | string
    score?: IntWithAggregatesFilter<"QuestionBank"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"QuestionBank"> | string | null
    answerData?: JsonWithAggregatesFilter<"QuestionBank">
    explanation?: StringNullableWithAggregatesFilter<"QuestionBank"> | string | null
    versioning?: StringNullableWithAggregatesFilter<"QuestionBank"> | string | null
    creationMethod?: EnumCreationMethodWithAggregatesFilter<"QuestionBank"> | $Enums.CreationMethod
    sortOrder?: IntWithAggregatesFilter<"QuestionBank"> | number
    randomize?: BoolWithAggregatesFilter<"QuestionBank"> | boolean
    isActive?: BoolWithAggregatesFilter<"QuestionBank"> | boolean
    createdBy?: IntWithAggregatesFilter<"QuestionBank"> | number
    updatedBy?: IntNullableWithAggregatesFilter<"QuestionBank"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"QuestionBank"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionBank"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"QuestionBank"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"QuestionBank"> | Date | string | null
  }

  export type QuestionLevelWhereInput = {
    AND?: QuestionLevelWhereInput | QuestionLevelWhereInput[]
    OR?: QuestionLevelWhereInput[]
    NOT?: QuestionLevelWhereInput | QuestionLevelWhereInput[]
    id?: IntFilter<"QuestionLevel"> | number
    name?: StringFilter<"QuestionLevel"> | string
    isActive?: BoolFilter<"QuestionLevel"> | boolean
    questionBank?: QuestionBankListRelationFilter
  }

  export type QuestionLevelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    questionBank?: QuestionBankOrderByRelationAggregateInput
  }

  export type QuestionLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionLevelWhereInput | QuestionLevelWhereInput[]
    OR?: QuestionLevelWhereInput[]
    NOT?: QuestionLevelWhereInput | QuestionLevelWhereInput[]
    name?: StringFilter<"QuestionLevel"> | string
    isActive?: BoolFilter<"QuestionLevel"> | boolean
    questionBank?: QuestionBankListRelationFilter
  }, "id">

  export type QuestionLevelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    _count?: QuestionLevelCountOrderByAggregateInput
    _avg?: QuestionLevelAvgOrderByAggregateInput
    _max?: QuestionLevelMaxOrderByAggregateInput
    _min?: QuestionLevelMinOrderByAggregateInput
    _sum?: QuestionLevelSumOrderByAggregateInput
  }

  export type QuestionLevelScalarWhereWithAggregatesInput = {
    AND?: QuestionLevelScalarWhereWithAggregatesInput | QuestionLevelScalarWhereWithAggregatesInput[]
    OR?: QuestionLevelScalarWhereWithAggregatesInput[]
    NOT?: QuestionLevelScalarWhereWithAggregatesInput | QuestionLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionLevel"> | number
    name?: StringWithAggregatesFilter<"QuestionLevel"> | string
    isActive?: BoolWithAggregatesFilter<"QuestionLevel"> | boolean
  }

  export type QuestionSetWhereInput = {
    AND?: QuestionSetWhereInput | QuestionSetWhereInput[]
    OR?: QuestionSetWhereInput[]
    NOT?: QuestionSetWhereInput | QuestionSetWhereInput[]
    id?: IntFilter<"QuestionSet"> | number
    courseId?: IntFilter<"QuestionSet"> | number
    lessonId?: IntFilter<"QuestionSet"> | number
    testTypeId?: IntFilter<"QuestionSet"> | number
    name?: StringFilter<"QuestionSet"> | string
    description?: StringNullableFilter<"QuestionSet"> | string | null
    passScore?: IntFilter<"QuestionSet"> | number
    attemptLimit?: IntFilter<"QuestionSet"> | number
    isActive?: BoolFilter<"QuestionSet"> | boolean
    createdBy?: IntFilter<"QuestionSet"> | number
    updatedBy?: IntNullableFilter<"QuestionSet"> | number | null
    deletedBy?: IntNullableFilter<"QuestionSet"> | number | null
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    lesson?: XOR<LessonScalarRelationFilter, LessonWhereInput>
    testType?: XOR<TestTypeScalarRelationFilter, TestTypeWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    questionBank?: QuestionBankListRelationFilter
    scoreCriteria?: ScoreCriteriaListRelationFilter
    testResult?: TestResultListRelationFilter
    answerSubmission?: AnswerSubmissionListRelationFilter
  }

  export type QuestionSetOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    lesson?: LessonOrderByWithRelationInput
    testType?: TestTypeOrderByWithRelationInput
    createdByUser?: UserOrderByWithRelationInput
    updatedByUser?: UserOrderByWithRelationInput
    deletedByUser?: UserOrderByWithRelationInput
    questionBank?: QuestionBankOrderByRelationAggregateInput
    scoreCriteria?: ScoreCriteriaOrderByRelationAggregateInput
    testResult?: TestResultOrderByRelationAggregateInput
    answerSubmission?: AnswerSubmissionOrderByRelationAggregateInput
  }

  export type QuestionSetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionSetWhereInput | QuestionSetWhereInput[]
    OR?: QuestionSetWhereInput[]
    NOT?: QuestionSetWhereInput | QuestionSetWhereInput[]
    courseId?: IntFilter<"QuestionSet"> | number
    lessonId?: IntFilter<"QuestionSet"> | number
    testTypeId?: IntFilter<"QuestionSet"> | number
    name?: StringFilter<"QuestionSet"> | string
    description?: StringNullableFilter<"QuestionSet"> | string | null
    passScore?: IntFilter<"QuestionSet"> | number
    attemptLimit?: IntFilter<"QuestionSet"> | number
    isActive?: BoolFilter<"QuestionSet"> | boolean
    createdBy?: IntFilter<"QuestionSet"> | number
    updatedBy?: IntNullableFilter<"QuestionSet"> | number | null
    deletedBy?: IntNullableFilter<"QuestionSet"> | number | null
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    lesson?: XOR<LessonScalarRelationFilter, LessonWhereInput>
    testType?: XOR<TestTypeScalarRelationFilter, TestTypeWhereInput>
    createdByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    updatedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    deletedByUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    questionBank?: QuestionBankListRelationFilter
    scoreCriteria?: ScoreCriteriaListRelationFilter
    testResult?: TestResultListRelationFilter
    answerSubmission?: AnswerSubmissionListRelationFilter
  }, "id">

  export type QuestionSetOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: QuestionSetCountOrderByAggregateInput
    _avg?: QuestionSetAvgOrderByAggregateInput
    _max?: QuestionSetMaxOrderByAggregateInput
    _min?: QuestionSetMinOrderByAggregateInput
    _sum?: QuestionSetSumOrderByAggregateInput
  }

  export type QuestionSetScalarWhereWithAggregatesInput = {
    AND?: QuestionSetScalarWhereWithAggregatesInput | QuestionSetScalarWhereWithAggregatesInput[]
    OR?: QuestionSetScalarWhereWithAggregatesInput[]
    NOT?: QuestionSetScalarWhereWithAggregatesInput | QuestionSetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionSet"> | number
    courseId?: IntWithAggregatesFilter<"QuestionSet"> | number
    lessonId?: IntWithAggregatesFilter<"QuestionSet"> | number
    testTypeId?: IntWithAggregatesFilter<"QuestionSet"> | number
    name?: StringWithAggregatesFilter<"QuestionSet"> | string
    description?: StringNullableWithAggregatesFilter<"QuestionSet"> | string | null
    passScore?: IntWithAggregatesFilter<"QuestionSet"> | number
    attemptLimit?: IntWithAggregatesFilter<"QuestionSet"> | number
    isActive?: BoolWithAggregatesFilter<"QuestionSet"> | boolean
    createdBy?: IntWithAggregatesFilter<"QuestionSet"> | number
    updatedBy?: IntNullableWithAggregatesFilter<"QuestionSet"> | number | null
    deletedBy?: IntNullableWithAggregatesFilter<"QuestionSet"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"QuestionSet"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"QuestionSet"> | Date | string | null
  }

  export type QuestionTypeWhereInput = {
    AND?: QuestionTypeWhereInput | QuestionTypeWhereInput[]
    OR?: QuestionTypeWhereInput[]
    NOT?: QuestionTypeWhereInput | QuestionTypeWhereInput[]
    id?: IntFilter<"QuestionType"> | number
    name?: StringFilter<"QuestionType"> | string
    isActive?: BoolFilter<"QuestionType"> | boolean
    questionBank?: QuestionBankListRelationFilter
  }

  export type QuestionTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    questionBank?: QuestionBankOrderByRelationAggregateInput
  }

  export type QuestionTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionTypeWhereInput | QuestionTypeWhereInput[]
    OR?: QuestionTypeWhereInput[]
    NOT?: QuestionTypeWhereInput | QuestionTypeWhereInput[]
    name?: StringFilter<"QuestionType"> | string
    isActive?: BoolFilter<"QuestionType"> | boolean
    questionBank?: QuestionBankListRelationFilter
  }, "id">

  export type QuestionTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    _count?: QuestionTypeCountOrderByAggregateInput
    _avg?: QuestionTypeAvgOrderByAggregateInput
    _max?: QuestionTypeMaxOrderByAggregateInput
    _min?: QuestionTypeMinOrderByAggregateInput
    _sum?: QuestionTypeSumOrderByAggregateInput
  }

  export type QuestionTypeScalarWhereWithAggregatesInput = {
    AND?: QuestionTypeScalarWhereWithAggregatesInput | QuestionTypeScalarWhereWithAggregatesInput[]
    OR?: QuestionTypeScalarWhereWithAggregatesInput[]
    NOT?: QuestionTypeScalarWhereWithAggregatesInput | QuestionTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionType"> | number
    name?: StringWithAggregatesFilter<"QuestionType"> | string
    isActive?: BoolWithAggregatesFilter<"QuestionType"> | boolean
  }

  export type ResultLevelWhereInput = {
    AND?: ResultLevelWhereInput | ResultLevelWhereInput[]
    OR?: ResultLevelWhereInput[]
    NOT?: ResultLevelWhereInput | ResultLevelWhereInput[]
    id?: IntFilter<"ResultLevel"> | number
    name?: StringFilter<"ResultLevel"> | string
    isActive?: BoolFilter<"ResultLevel"> | boolean
    scoreCriteria?: ScoreCriteriaListRelationFilter
    testResult?: TestResultListRelationFilter
  }

  export type ResultLevelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    scoreCriteria?: ScoreCriteriaOrderByRelationAggregateInput
    testResult?: TestResultOrderByRelationAggregateInput
  }

  export type ResultLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResultLevelWhereInput | ResultLevelWhereInput[]
    OR?: ResultLevelWhereInput[]
    NOT?: ResultLevelWhereInput | ResultLevelWhereInput[]
    name?: StringFilter<"ResultLevel"> | string
    isActive?: BoolFilter<"ResultLevel"> | boolean
    scoreCriteria?: ScoreCriteriaListRelationFilter
    testResult?: TestResultListRelationFilter
  }, "id">

  export type ResultLevelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    _count?: ResultLevelCountOrderByAggregateInput
    _avg?: ResultLevelAvgOrderByAggregateInput
    _max?: ResultLevelMaxOrderByAggregateInput
    _min?: ResultLevelMinOrderByAggregateInput
    _sum?: ResultLevelSumOrderByAggregateInput
  }

  export type ResultLevelScalarWhereWithAggregatesInput = {
    AND?: ResultLevelScalarWhereWithAggregatesInput | ResultLevelScalarWhereWithAggregatesInput[]
    OR?: ResultLevelScalarWhereWithAggregatesInput[]
    NOT?: ResultLevelScalarWhereWithAggregatesInput | ResultLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ResultLevel"> | number
    name?: StringWithAggregatesFilter<"ResultLevel"> | string
    isActive?: BoolWithAggregatesFilter<"ResultLevel"> | boolean
  }

  export type ScoreCriteriaWhereInput = {
    AND?: ScoreCriteriaWhereInput | ScoreCriteriaWhereInput[]
    OR?: ScoreCriteriaWhereInput[]
    NOT?: ScoreCriteriaWhereInput | ScoreCriteriaWhereInput[]
    id?: IntFilter<"ScoreCriteria"> | number
    questionSetId?: IntFilter<"ScoreCriteria"> | number
    resultLevelId?: IntFilter<"ScoreCriteria"> | number
    minScore?: IntFilter<"ScoreCriteria"> | number
    maxScore?: IntFilter<"ScoreCriteria"> | number
    description?: StringNullableFilter<"ScoreCriteria"> | string | null
    updatedAt?: DateTimeNullableFilter<"ScoreCriteria"> | Date | string | null
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    resultLevel?: XOR<ResultLevelScalarRelationFilter, ResultLevelWhereInput>
  }

  export type ScoreCriteriaOrderByWithRelationInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    questionSet?: QuestionSetOrderByWithRelationInput
    resultLevel?: ResultLevelOrderByWithRelationInput
  }

  export type ScoreCriteriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScoreCriteriaWhereInput | ScoreCriteriaWhereInput[]
    OR?: ScoreCriteriaWhereInput[]
    NOT?: ScoreCriteriaWhereInput | ScoreCriteriaWhereInput[]
    questionSetId?: IntFilter<"ScoreCriteria"> | number
    resultLevelId?: IntFilter<"ScoreCriteria"> | number
    minScore?: IntFilter<"ScoreCriteria"> | number
    maxScore?: IntFilter<"ScoreCriteria"> | number
    description?: StringNullableFilter<"ScoreCriteria"> | string | null
    updatedAt?: DateTimeNullableFilter<"ScoreCriteria"> | Date | string | null
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    resultLevel?: XOR<ResultLevelScalarRelationFilter, ResultLevelWhereInput>
  }, "id">

  export type ScoreCriteriaOrderByWithAggregationInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: ScoreCriteriaCountOrderByAggregateInput
    _avg?: ScoreCriteriaAvgOrderByAggregateInput
    _max?: ScoreCriteriaMaxOrderByAggregateInput
    _min?: ScoreCriteriaMinOrderByAggregateInput
    _sum?: ScoreCriteriaSumOrderByAggregateInput
  }

  export type ScoreCriteriaScalarWhereWithAggregatesInput = {
    AND?: ScoreCriteriaScalarWhereWithAggregatesInput | ScoreCriteriaScalarWhereWithAggregatesInput[]
    OR?: ScoreCriteriaScalarWhereWithAggregatesInput[]
    NOT?: ScoreCriteriaScalarWhereWithAggregatesInput | ScoreCriteriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScoreCriteria"> | number
    questionSetId?: IntWithAggregatesFilter<"ScoreCriteria"> | number
    resultLevelId?: IntWithAggregatesFilter<"ScoreCriteria"> | number
    minScore?: IntWithAggregatesFilter<"ScoreCriteria"> | number
    maxScore?: IntWithAggregatesFilter<"ScoreCriteria"> | number
    description?: StringNullableWithAggregatesFilter<"ScoreCriteria"> | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"ScoreCriteria"> | Date | string | null
  }

  export type TestResultWhereInput = {
    AND?: TestResultWhereInput | TestResultWhereInput[]
    OR?: TestResultWhereInput[]
    NOT?: TestResultWhereInput | TestResultWhereInput[]
    id?: IntFilter<"TestResult"> | number
    userId?: IntFilter<"TestResult"> | number
    questionSetId?: IntFilter<"TestResult"> | number
    resultLevelId?: IntFilter<"TestResult"> | number
    rawScore?: IntFilter<"TestResult"> | number
    normalizedScore?: IntFilter<"TestResult"> | number
    attemptNo?: IntFilter<"TestResult"> | number
    completedAt?: DateTimeNullableFilter<"TestResult"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    resultLevel?: XOR<ResultLevelScalarRelationFilter, ResultLevelWhereInput>
  }

  export type TestResultOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    questionSet?: QuestionSetOrderByWithRelationInput
    resultLevel?: ResultLevelOrderByWithRelationInput
  }

  export type TestResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TestResultWhereInput | TestResultWhereInput[]
    OR?: TestResultWhereInput[]
    NOT?: TestResultWhereInput | TestResultWhereInput[]
    userId?: IntFilter<"TestResult"> | number
    questionSetId?: IntFilter<"TestResult"> | number
    resultLevelId?: IntFilter<"TestResult"> | number
    rawScore?: IntFilter<"TestResult"> | number
    normalizedScore?: IntFilter<"TestResult"> | number
    attemptNo?: IntFilter<"TestResult"> | number
    completedAt?: DateTimeNullableFilter<"TestResult"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    questionSet?: XOR<QuestionSetScalarRelationFilter, QuestionSetWhereInput>
    resultLevel?: XOR<ResultLevelScalarRelationFilter, ResultLevelWhereInput>
  }, "id">

  export type TestResultOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: TestResultCountOrderByAggregateInput
    _avg?: TestResultAvgOrderByAggregateInput
    _max?: TestResultMaxOrderByAggregateInput
    _min?: TestResultMinOrderByAggregateInput
    _sum?: TestResultSumOrderByAggregateInput
  }

  export type TestResultScalarWhereWithAggregatesInput = {
    AND?: TestResultScalarWhereWithAggregatesInput | TestResultScalarWhereWithAggregatesInput[]
    OR?: TestResultScalarWhereWithAggregatesInput[]
    NOT?: TestResultScalarWhereWithAggregatesInput | TestResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TestResult"> | number
    userId?: IntWithAggregatesFilter<"TestResult"> | number
    questionSetId?: IntWithAggregatesFilter<"TestResult"> | number
    resultLevelId?: IntWithAggregatesFilter<"TestResult"> | number
    rawScore?: IntWithAggregatesFilter<"TestResult"> | number
    normalizedScore?: IntWithAggregatesFilter<"TestResult"> | number
    attemptNo?: IntWithAggregatesFilter<"TestResult"> | number
    completedAt?: DateTimeNullableWithAggregatesFilter<"TestResult"> | Date | string | null
  }

  export type TestTypeWhereInput = {
    AND?: TestTypeWhereInput | TestTypeWhereInput[]
    OR?: TestTypeWhereInput[]
    NOT?: TestTypeWhereInput | TestTypeWhereInput[]
    id?: IntFilter<"TestType"> | number
    name?: StringFilter<"TestType"> | string
    isActive?: BoolFilter<"TestType"> | boolean
    questionSet?: QuestionSetListRelationFilter
  }

  export type TestTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    questionSet?: QuestionSetOrderByRelationAggregateInput
  }

  export type TestTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TestTypeWhereInput | TestTypeWhereInput[]
    OR?: TestTypeWhereInput[]
    NOT?: TestTypeWhereInput | TestTypeWhereInput[]
    name?: StringFilter<"TestType"> | string
    isActive?: BoolFilter<"TestType"> | boolean
    questionSet?: QuestionSetListRelationFilter
  }, "id">

  export type TestTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    _count?: TestTypeCountOrderByAggregateInput
    _avg?: TestTypeAvgOrderByAggregateInput
    _max?: TestTypeMaxOrderByAggregateInput
    _min?: TestTypeMinOrderByAggregateInput
    _sum?: TestTypeSumOrderByAggregateInput
  }

  export type TestTypeScalarWhereWithAggregatesInput = {
    AND?: TestTypeScalarWhereWithAggregatesInput | TestTypeScalarWhereWithAggregatesInput[]
    OR?: TestTypeScalarWhereWithAggregatesInput[]
    NOT?: TestTypeScalarWhereWithAggregatesInput | TestTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TestType"> | number
    name?: StringWithAggregatesFilter<"TestType"> | string
    isActive?: BoolWithAggregatesFilter<"TestType"> | boolean
  }

  export type TitleWhereInput = {
    AND?: TitleWhereInput | TitleWhereInput[]
    OR?: TitleWhereInput[]
    NOT?: TitleWhereInput | TitleWhereInput[]
    id?: IntFilter<"Title"> | number
    name?: StringFilter<"Title"> | string
    users?: UserListRelationFilter
  }

  export type TitleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type TitleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TitleWhereInput | TitleWhereInput[]
    OR?: TitleWhereInput[]
    NOT?: TitleWhereInput | TitleWhereInput[]
    name?: StringFilter<"Title"> | string
    users?: UserListRelationFilter
  }, "id">

  export type TitleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TitleCountOrderByAggregateInput
    _avg?: TitleAvgOrderByAggregateInput
    _max?: TitleMaxOrderByAggregateInput
    _min?: TitleMinOrderByAggregateInput
    _sum?: TitleSumOrderByAggregateInput
  }

  export type TitleScalarWhereWithAggregatesInput = {
    AND?: TitleScalarWhereWithAggregatesInput | TitleScalarWhereWithAggregatesInput[]
    OR?: TitleScalarWhereWithAggregatesInput[]
    NOT?: TitleScalarWhereWithAggregatesInput | TitleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Title"> | number
    name?: StringWithAggregatesFilter<"Title"> | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: IntFilter<"UserRole"> | number
    name?: StringFilter<"UserRole"> | string
    users?: UserListRelationFilter
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    name?: StringFilter<"UserRole"> | string
    users?: UserListRelationFilter
  }, "id">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _avg?: UserRoleAvgOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
    _sum?: UserRoleSumOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserRole"> | number
    name?: StringWithAggregatesFilter<"UserRole"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    userRoleId?: IntFilter<"User"> | number
    titleId?: IntNullableFilter<"User"> | number | null
    academicTitleId?: IntNullableFilter<"User"> | number | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    departmentId?: IntNullableFilter<"User"> | number | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    userRole?: XOR<UserRoleScalarRelationFilter, UserRoleWhereInput>
    title?: XOR<TitleNullableScalarRelationFilter, TitleWhereInput> | null
    academicTitle?: XOR<AcademicTitleNullableScalarRelationFilter, AcademicTitleWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    organizationsCreated?: OrganizationListRelationFilter
    organizationsUpdated?: OrganizationListRelationFilter
    organizationsDeleted?: OrganizationListRelationFilter
    categoryCreated?: CategoryListRelationFilter
    categoryUpdated?: CategoryListRelationFilter
    categoryDeleted?: CategoryListRelationFilter
    courseCreated?: CourseListRelationFilter
    courseUpdated?: CourseListRelationFilter
    courseDeleted?: CourseListRelationFilter
    courseInstructorUpdated?: CourseInstructorListRelationFilter
    courseInstructorDeleted?: CourseInstructorListRelationFilter
    courseInstructorUserId?: CourseInstructorListRelationFilter
    courseCompletionUserId?: CourseCompletionListRelationFilter
    lessonCreated?: LessonListRelationFilter
    lessonUpdated?: LessonListRelationFilter
    lessonDeleted?: LessonListRelationFilter
    lessonContentUpdated?: LessonContentListRelationFilter
    lessonContentDeleted?: LessonContentListRelationFilter
    lessonViewUserId?: LessonViewListRelationFilter
    lessonAttemptUserId?: LessonAttemptListRelationFilter
    questionSetCreated?: QuestionSetListRelationFilter
    questionSetUpdated?: QuestionSetListRelationFilter
    questionSetDeleted?: QuestionSetListRelationFilter
    questionBankCreated?: QuestionBankListRelationFilter
    questionBankUpdated?: QuestionBankListRelationFilter
    questionBankDeleted?: QuestionBankListRelationFilter
    testResultUser?: TestResultListRelationFilter
    answerSubmissionUser?: AnswerSubmissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrderInput | SortOrder
    academicTitleId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    userRole?: UserRoleOrderByWithRelationInput
    title?: TitleOrderByWithRelationInput
    academicTitle?: AcademicTitleOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    organizationsCreated?: OrganizationOrderByRelationAggregateInput
    organizationsUpdated?: OrganizationOrderByRelationAggregateInput
    organizationsDeleted?: OrganizationOrderByRelationAggregateInput
    categoryCreated?: CategoryOrderByRelationAggregateInput
    categoryUpdated?: CategoryOrderByRelationAggregateInput
    categoryDeleted?: CategoryOrderByRelationAggregateInput
    courseCreated?: CourseOrderByRelationAggregateInput
    courseUpdated?: CourseOrderByRelationAggregateInput
    courseDeleted?: CourseOrderByRelationAggregateInput
    courseInstructorUpdated?: CourseInstructorOrderByRelationAggregateInput
    courseInstructorDeleted?: CourseInstructorOrderByRelationAggregateInput
    courseInstructorUserId?: CourseInstructorOrderByRelationAggregateInput
    courseCompletionUserId?: CourseCompletionOrderByRelationAggregateInput
    lessonCreated?: LessonOrderByRelationAggregateInput
    lessonUpdated?: LessonOrderByRelationAggregateInput
    lessonDeleted?: LessonOrderByRelationAggregateInput
    lessonContentUpdated?: LessonContentOrderByRelationAggregateInput
    lessonContentDeleted?: LessonContentOrderByRelationAggregateInput
    lessonViewUserId?: LessonViewOrderByRelationAggregateInput
    lessonAttemptUserId?: LessonAttemptOrderByRelationAggregateInput
    questionSetCreated?: QuestionSetOrderByRelationAggregateInput
    questionSetUpdated?: QuestionSetOrderByRelationAggregateInput
    questionSetDeleted?: QuestionSetOrderByRelationAggregateInput
    questionBankCreated?: QuestionBankOrderByRelationAggregateInput
    questionBankUpdated?: QuestionBankOrderByRelationAggregateInput
    questionBankDeleted?: QuestionBankOrderByRelationAggregateInput
    testResultUser?: TestResultOrderByRelationAggregateInput
    answerSubmissionUser?: AnswerSubmissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userRoleId?: IntFilter<"User"> | number
    titleId?: IntNullableFilter<"User"> | number | null
    academicTitleId?: IntNullableFilter<"User"> | number | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    departmentId?: IntNullableFilter<"User"> | number | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    userRole?: XOR<UserRoleScalarRelationFilter, UserRoleWhereInput>
    title?: XOR<TitleNullableScalarRelationFilter, TitleWhereInput> | null
    academicTitle?: XOR<AcademicTitleNullableScalarRelationFilter, AcademicTitleWhereInput> | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    organizationsCreated?: OrganizationListRelationFilter
    organizationsUpdated?: OrganizationListRelationFilter
    organizationsDeleted?: OrganizationListRelationFilter
    categoryCreated?: CategoryListRelationFilter
    categoryUpdated?: CategoryListRelationFilter
    categoryDeleted?: CategoryListRelationFilter
    courseCreated?: CourseListRelationFilter
    courseUpdated?: CourseListRelationFilter
    courseDeleted?: CourseListRelationFilter
    courseInstructorUpdated?: CourseInstructorListRelationFilter
    courseInstructorDeleted?: CourseInstructorListRelationFilter
    courseInstructorUserId?: CourseInstructorListRelationFilter
    courseCompletionUserId?: CourseCompletionListRelationFilter
    lessonCreated?: LessonListRelationFilter
    lessonUpdated?: LessonListRelationFilter
    lessonDeleted?: LessonListRelationFilter
    lessonContentUpdated?: LessonContentListRelationFilter
    lessonContentDeleted?: LessonContentListRelationFilter
    lessonViewUserId?: LessonViewListRelationFilter
    lessonAttemptUserId?: LessonAttemptListRelationFilter
    questionSetCreated?: QuestionSetListRelationFilter
    questionSetUpdated?: QuestionSetListRelationFilter
    questionSetDeleted?: QuestionSetListRelationFilter
    questionBankCreated?: QuestionBankListRelationFilter
    questionBankUpdated?: QuestionBankListRelationFilter
    questionBankDeleted?: QuestionBankListRelationFilter
    testResultUser?: TestResultListRelationFilter
    answerSubmissionUser?: AnswerSubmissionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrderInput | SortOrder
    academicTitleId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    userRoleId?: IntWithAggregatesFilter<"User"> | number
    titleId?: IntNullableWithAggregatesFilter<"User"> | number | null
    academicTitleId?: IntNullableWithAggregatesFilter<"User"> | number | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    departmentId?: IntNullableWithAggregatesFilter<"User"> | number | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type AcademicTitleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutAcademicTitleInput
  }

  export type AcademicTitleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutAcademicTitleInput
  }

  export type AcademicTitleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutAcademicTitleNestedInput
  }

  export type AcademicTitleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutAcademicTitleNestedInput
  }

  export type AcademicTitleCreateManyInput = {
    id?: number
    name: string
  }

  export type AcademicTitleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicTitleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AnswerSubmissionCreateInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
    user: UserCreateNestedOneWithoutAnswerSubmissionUserInput
    questionSet: QuestionSetCreateNestedOneWithoutAnswerSubmissionInput
    questionBank: QuestionBankCreateNestedOneWithoutAnswerSubmissionInput
  }

  export type AnswerSubmissionUncheckedCreateInput = {
    id?: number
    userId: number
    questionSetId: number
    questionBankId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type AnswerSubmissionUpdateInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnswerSubmissionUserNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutAnswerSubmissionNestedInput
    questionBank?: QuestionBankUpdateOneRequiredWithoutAnswerSubmissionNestedInput
  }

  export type AnswerSubmissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionBankId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerSubmissionCreateManyInput = {
    id?: number
    userId: number
    questionSetId: number
    questionBankId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type AnswerSubmissionUpdateManyMutationInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerSubmissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionBankId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutCategoryCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCategoryUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCategoryDeletedInput
    categories?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    categories?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutCategoryCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCategoryUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCategoryDeletedNestedInput
    categories?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCompletionCreateInput = {
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
    course: CourseCreateNestedOneWithoutCourseCompletionCourseIdInput
    user?: UserCreateNestedOneWithoutCourseCompletionUserIdInput
  }

  export type CourseCompletionUncheckedCreateInput = {
    id?: number
    courseId: number
    userId: number
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
  }

  export type CourseCompletionUpdateInput = {
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutCourseCompletionCourseIdNestedInput
    user?: UserUpdateOneWithoutCourseCompletionUserIdNestedInput
  }

  export type CourseCompletionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCompletionCreateManyInput = {
    id?: number
    courseId: number
    userId: number
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
  }

  export type CourseCompletionUpdateManyMutationInput = {
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCompletionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CourseEnrollmentCreateInput = {
    courseId: number
    userId: number
    enrolledAt: Date | string
  }

  export type CourseEnrollmentUncheckedCreateInput = {
    id?: number
    courseId: number
    userId: number
    enrolledAt: Date | string
  }

  export type CourseEnrollmentUpdateInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseEnrollmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseEnrollmentCreateManyInput = {
    id?: number
    courseId: number
    userId: number
    enrolledAt: Date | string
  }

  export type CourseEnrollmentUpdateManyMutationInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseEnrollmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseInstructorCreateInput = {
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutCourseInstructorCourseIdInput
    user?: UserCreateNestedOneWithoutCourseInstructorUserIdInput
    updatedByUser?: UserCreateNestedOneWithoutCourseInstructorUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseInstructorDeletedInput
    courseInstructor?: LessonCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorUncheckedCreateInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructor?: LessonUncheckedCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorUpdateInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutCourseInstructorCourseIdNestedInput
    user?: UserUpdateOneWithoutCourseInstructorUserIdNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseInstructorUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseInstructorDeletedNestedInput
    courseInstructor?: LessonUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructor?: LessonUncheckedUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorCreateManyInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseInstructorUpdateManyMutationInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseInstructorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCreateInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentCreateInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    organizationId: number
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    organizationId: number
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonAttemptCreateInput = {
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
    users: UserCreateNestedOneWithoutLessonAttemptUserIdInput
    lessons: LessonCreateNestedOneWithoutLessonAttemptLessonIdInput
  }

  export type LessonAttemptUncheckedCreateInput = {
    id?: number
    userId: number
    lessonId: number
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonAttemptUpdateInput = {
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateOneRequiredWithoutLessonAttemptUserIdNestedInput
    lessons?: LessonUpdateOneRequiredWithoutLessonAttemptLessonIdNestedInput
  }

  export type LessonAttemptUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonAttemptCreateManyInput = {
    id?: number
    userId: number
    lessonId: number
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonAttemptUpdateManyMutationInput = {
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonAttemptUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonContentTypeCreateInput = {
    name: string
    lessonContent?: LessonContentCreateNestedManyWithoutLessonContentTypeInput
  }

  export type LessonContentTypeUncheckedCreateInput = {
    id?: number
    name: string
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonContentTypeInput
  }

  export type LessonContentTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lessonContent?: LessonContentUpdateManyWithoutLessonContentTypeNestedInput
  }

  export type LessonContentTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonContentTypeNestedInput
  }

  export type LessonContentTypeCreateManyInput = {
    id?: number
    name: string
  }

  export type LessonContentTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LessonContentTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LessonContentCreateInput = {
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lesson: LessonCreateNestedOneWithoutLessonContentInput
    lessonContentType: LessonContentTypeCreateNestedOneWithoutLessonContentInput
    updatedByUser?: UserCreateNestedOneWithoutLessonContentUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonContentDeletedInput
  }

  export type LessonContentUncheckedCreateInput = {
    id?: number
    lessonId: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentUpdateInput = {
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lesson?: LessonUpdateOneRequiredWithoutLessonContentNestedInput
    lessonContentType?: LessonContentTypeUpdateOneRequiredWithoutLessonContentNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonContentUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonContentDeletedNestedInput
  }

  export type LessonContentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentCreateManyInput = {
    id?: number
    lessonId: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentUpdateManyMutationInput = {
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonPrerequisiteCreateInput = {
    lessons: LessonCreateNestedOneWithoutLessonPrerequisiteLessonIdInput
    requiredLesson: LessonCreateNestedOneWithoutLessonPrerequisiteRequiredLessonIdInput
  }

  export type LessonPrerequisiteUncheckedCreateInput = {
    id?: number
    lessonId: number
    requiredLessonId: number
  }

  export type LessonPrerequisiteUpdateInput = {
    lessons?: LessonUpdateOneRequiredWithoutLessonPrerequisiteLessonIdNestedInput
    requiredLesson?: LessonUpdateOneRequiredWithoutLessonPrerequisiteRequiredLessonIdNestedInput
  }

  export type LessonPrerequisiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    requiredLessonId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonPrerequisiteCreateManyInput = {
    id?: number
    lessonId: number
    requiredLessonId: number
  }

  export type LessonPrerequisiteUpdateManyMutationInput = {

  }

  export type LessonPrerequisiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    requiredLessonId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonTypeCreateInput = {
    name: string
    lessonTypeId?: LessonCreateNestedManyWithoutLessonTypeInput
  }

  export type LessonTypeUncheckedCreateInput = {
    id?: number
    name: string
    lessonTypeId?: LessonUncheckedCreateNestedManyWithoutLessonTypeInput
  }

  export type LessonTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lessonTypeId?: LessonUpdateManyWithoutLessonTypeNestedInput
  }

  export type LessonTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lessonTypeId?: LessonUncheckedUpdateManyWithoutLessonTypeNestedInput
  }

  export type LessonTypeCreateManyInput = {
    id?: number
    name: string
  }

  export type LessonTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LessonTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LessonViewCreateInput = {
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
    users: UserCreateNestedOneWithoutLessonViewUserIdInput
    lessons: LessonCreateNestedOneWithoutLessonViewLessonIdInput
  }

  export type LessonViewUncheckedCreateInput = {
    id?: number
    userId: number
    lessonId: number
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonViewUpdateInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateOneRequiredWithoutLessonViewUserIdNestedInput
    lessons?: LessonUpdateOneRequiredWithoutLessonViewLessonIdNestedInput
  }

  export type LessonViewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonViewCreateManyInput = {
    id?: number
    userId: number
    lessonId: number
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonViewUpdateManyMutationInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonViewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonCreateInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonCreateManyInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationCreateInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutOrganizationsCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutOrganizationsUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutOrganizationsDeletedInput
    departments?: DepartmentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    departments?: DepartmentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutOrganizationsCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutOrganizationsUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutOrganizationsDeletedNestedInput
    departments?: DepartmentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departments?: DepartmentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionBankCreateInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUpdateInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankCreateManyInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankUpdateManyMutationInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionBankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionLevelCreateInput = {
    name: string
    isActive?: boolean
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionLevelInput
  }

  export type QuestionLevelUncheckedCreateInput = {
    id?: number
    name: string
    isActive?: boolean
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionLevelInput
  }

  export type QuestionLevelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    questionBank?: QuestionBankUpdateManyWithoutQuestionLevelNestedInput
  }

  export type QuestionLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionLevelNestedInput
  }

  export type QuestionLevelCreateManyInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type QuestionLevelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionSetCreateInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetCreateManyInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionSetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionSetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionTypeCreateInput = {
    name: string
    isActive?: boolean
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionTypeInput
  }

  export type QuestionTypeUncheckedCreateInput = {
    id?: number
    name: string
    isActive?: boolean
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionTypeInput
  }

  export type QuestionTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    questionBank?: QuestionBankUpdateManyWithoutQuestionTypeNestedInput
  }

  export type QuestionTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionTypeNestedInput
  }

  export type QuestionTypeCreateManyInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type QuestionTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResultLevelCreateInput = {
    name: string
    isActive?: boolean
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutResultLevelInput
    testResult?: TestResultCreateNestedManyWithoutResultLevelInput
  }

  export type ResultLevelUncheckedCreateInput = {
    id?: number
    name: string
    isActive?: boolean
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutResultLevelInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutResultLevelInput
  }

  export type ResultLevelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutResultLevelNestedInput
    testResult?: TestResultUpdateManyWithoutResultLevelNestedInput
  }

  export type ResultLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutResultLevelNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutResultLevelNestedInput
  }

  export type ResultLevelCreateManyInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type ResultLevelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResultLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScoreCriteriaCreateInput = {
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
    questionSet: QuestionSetCreateNestedOneWithoutScoreCriteriaInput
    resultLevel: ResultLevelCreateNestedOneWithoutScoreCriteriaInput
  }

  export type ScoreCriteriaUncheckedCreateInput = {
    id?: number
    questionSetId: number
    resultLevelId: number
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
  }

  export type ScoreCriteriaUpdateInput = {
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionSet?: QuestionSetUpdateOneRequiredWithoutScoreCriteriaNestedInput
    resultLevel?: ResultLevelUpdateOneRequiredWithoutScoreCriteriaNestedInput
  }

  export type ScoreCriteriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreCriteriaCreateManyInput = {
    id?: number
    questionSetId: number
    resultLevelId: number
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
  }

  export type ScoreCriteriaUpdateManyMutationInput = {
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreCriteriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultCreateInput = {
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTestResultUserInput
    questionSet: QuestionSetCreateNestedOneWithoutTestResultInput
    resultLevel: ResultLevelCreateNestedOneWithoutTestResultInput
  }

  export type TestResultUncheckedCreateInput = {
    id?: number
    userId: number
    questionSetId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type TestResultUpdateInput = {
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTestResultUserNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutTestResultNestedInput
    resultLevel?: ResultLevelUpdateOneRequiredWithoutTestResultNestedInput
  }

  export type TestResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultCreateManyInput = {
    id?: number
    userId: number
    questionSetId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type TestResultUpdateManyMutationInput = {
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestTypeCreateInput = {
    name: string
    isActive?: boolean
    questionSet?: QuestionSetCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeUncheckedCreateInput = {
    id?: number
    name: string
    isActive?: boolean
    questionSet?: QuestionSetUncheckedCreateNestedManyWithoutTestTypeInput
  }

  export type TestTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    questionSet?: QuestionSetUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    questionSet?: QuestionSetUncheckedUpdateManyWithoutTestTypeNestedInput
  }

  export type TestTypeCreateManyInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type TestTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TitleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutTitleInput
  }

  export type TitleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutTitleInput
  }

  export type TitleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTitleNestedInput
  }

  export type TitleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTitleNestedInput
  }

  export type TitleCreateManyInput = {
    id?: number
    name: string
  }

  export type TitleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TitleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutUserRoleInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutUserRoleInput
  }

  export type UserRoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutUserRoleNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutUserRoleNestedInput
  }

  export type UserRoleCreateManyInput = {
    id?: number
    name: string
  }

  export type UserRoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AcademicTitleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AcademicTitleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AcademicTitleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AcademicTitleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type AcademicTitleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuestionSetScalarRelationFilter = {
    is?: QuestionSetWhereInput
    isNot?: QuestionSetWhereInput
  }

  export type QuestionBankScalarRelationFilter = {
    is?: QuestionBankWhereInput
    isNot?: QuestionBankWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AnswerSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
    selectedChoice?: SortOrder
    filledText?: SortOrder
    fileUrl?: SortOrder
    isCorrect?: SortOrder
    submittedAt?: SortOrder
  }

  export type AnswerSubmissionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
  }

  export type AnswerSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
    filledText?: SortOrder
    fileUrl?: SortOrder
    isCorrect?: SortOrder
    submittedAt?: SortOrder
  }

  export type AnswerSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
    filledText?: SortOrder
    fileUrl?: SortOrder
    isCorrect?: SortOrder
    submittedAt?: SortOrder
  }

  export type AnswerSubmissionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    questionBankId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type CourseCompletionCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    completedAt?: SortOrder
    finalScore?: SortOrder
    isCertified?: SortOrder
    certificateUrl?: SortOrder
  }

  export type CourseCompletionAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    finalScore?: SortOrder
  }

  export type CourseCompletionMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    completedAt?: SortOrder
    finalScore?: SortOrder
    isCertified?: SortOrder
    certificateUrl?: SortOrder
  }

  export type CourseCompletionMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    completedAt?: SortOrder
    finalScore?: SortOrder
    isCertified?: SortOrder
    certificateUrl?: SortOrder
  }

  export type CourseCompletionSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    finalScore?: SortOrder
  }

  export type CourseEnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    enrolledAt?: SortOrder
  }

  export type CourseEnrollmentAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
  }

  export type CourseEnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    enrolledAt?: SortOrder
  }

  export type CourseEnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    enrolledAt?: SortOrder
  }

  export type CourseEnrollmentSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type LessonListRelationFilter = {
    every?: LessonWhereInput
    some?: LessonWhereInput
    none?: LessonWhereInput
  }

  export type LessonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseInstructorCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CourseInstructorAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type CourseInstructorMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CourseInstructorMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CourseInstructorSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    userId?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CourseInstructorListRelationFilter = {
    every?: CourseInstructorWhereInput
    some?: CourseInstructorWhereInput
    none?: CourseInstructorWhereInput
  }

  export type CourseCompletionListRelationFilter = {
    every?: CourseCompletionWhereInput
    some?: CourseCompletionWhereInput
    none?: CourseCompletionWhereInput
  }

  export type QuestionSetListRelationFilter = {
    every?: QuestionSetWhereInput
    some?: QuestionSetWhereInput
    none?: QuestionSetWhereInput
  }

  export type CourseInstructorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCompletionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    fee?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    fee?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    fee?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    fee?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    fee?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrganizationScalarRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type LessonScalarRelationFilter = {
    is?: LessonWhereInput
    isNot?: LessonWhereInput
  }

  export type LessonAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LessonAttemptAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
  }

  export type LessonAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LessonAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LessonAttemptSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    attemptNo?: SortOrder
  }

  export type LessonContentListRelationFilter = {
    every?: LessonContentWhereInput
    some?: LessonContentWhereInput
    none?: LessonContentWhereInput
  }

  export type LessonContentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LessonContentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LessonContentTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LessonContentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LessonContentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LessonContentTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LessonContentTypeScalarRelationFilter = {
    is?: LessonContentTypeWhereInput
    isNot?: LessonContentTypeWhereInput
  }

  export type LessonContentCountOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    contentUrl?: SortOrder
    duration?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LessonContentAvgOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    duration?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type LessonContentMaxOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    contentUrl?: SortOrder
    duration?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LessonContentMinOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    contentUrl?: SortOrder
    duration?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LessonContentSumOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    contentTypeId?: SortOrder
    duration?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type LessonPrerequisiteCountOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
  }

  export type LessonPrerequisiteAvgOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
  }

  export type LessonPrerequisiteMaxOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
  }

  export type LessonPrerequisiteMinOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
  }

  export type LessonPrerequisiteSumOrderByAggregateInput = {
    id?: SortOrder
    lessonId?: SortOrder
    requiredLessonId?: SortOrder
  }

  export type LessonTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LessonTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LessonTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LessonTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type LessonTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LessonViewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    completed?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LessonViewAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
  }

  export type LessonViewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    completed?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LessonViewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    completed?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LessonViewSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    lessonId?: SortOrder
    watchedTime?: SortOrder
    readPages?: SortOrder
  }

  export type LessonNullableScalarRelationFilter = {
    is?: LessonWhereInput | null
    isNot?: LessonWhereInput | null
  }

  export type LessonTypeScalarRelationFilter = {
    is?: LessonTypeWhereInput
    isNot?: LessonTypeWhereInput
  }

  export type CourseInstructorScalarRelationFilter = {
    is?: CourseInstructorWhereInput
    isNot?: CourseInstructorWhereInput
  }

  export type LessonViewListRelationFilter = {
    every?: LessonViewWhereInput
    some?: LessonViewWhereInput
    none?: LessonViewWhereInput
  }

  export type LessonAttemptListRelationFilter = {
    every?: LessonAttemptWhereInput
    some?: LessonAttemptWhereInput
    none?: LessonAttemptWhereInput
  }

  export type LessonPrerequisiteListRelationFilter = {
    every?: LessonPrerequisiteWhereInput
    some?: LessonPrerequisiteWhereInput
    none?: LessonPrerequisiteWhereInput
  }

  export type LessonViewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LessonAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LessonPrerequisiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LessonCountOrderByAggregateInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LessonAvgOrderByAggregateInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type LessonMaxOrderByAggregateInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LessonMinOrderByAggregateInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LessonSumOrderByAggregateInput = {
    id?: SortOrder
    lessonTypeId?: SortOrder
    courseId?: SortOrder
    courseInstructorId?: SortOrder
    sortOrder?: SortOrder
    parentId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumCreationMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.CreationMethod | EnumCreationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCreationMethodFilter<$PrismaModel> | $Enums.CreationMethod
  }

  export type QuestionTypeScalarRelationFilter = {
    is?: QuestionTypeWhereInput
    isNot?: QuestionTypeWhereInput
  }

  export type QuestionLevelScalarRelationFilter = {
    is?: QuestionLevelWhereInput
    isNot?: QuestionLevelWhereInput
  }

  export type AnswerSubmissionListRelationFilter = {
    every?: AnswerSubmissionWhereInput
    some?: AnswerSubmissionWhereInput
    none?: AnswerSubmissionWhereInput
  }

  export type AnswerSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionBankCountOrderByAggregateInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    questionText?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
    answerData?: SortOrder
    explanation?: SortOrder
    versioning?: SortOrder
    creationMethod?: SortOrder
    sortOrder?: SortOrder
    randomize?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QuestionBankAvgOrderByAggregateInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    score?: SortOrder
    sortOrder?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type QuestionBankMaxOrderByAggregateInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    questionText?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
    explanation?: SortOrder
    versioning?: SortOrder
    creationMethod?: SortOrder
    sortOrder?: SortOrder
    randomize?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QuestionBankMinOrderByAggregateInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    questionText?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
    explanation?: SortOrder
    versioning?: SortOrder
    creationMethod?: SortOrder
    sortOrder?: SortOrder
    randomize?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QuestionBankSumOrderByAggregateInput = {
    id?: SortOrder
    questionTypeId?: SortOrder
    questionLevelId?: SortOrder
    questionSetId?: SortOrder
    score?: SortOrder
    sortOrder?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumCreationMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CreationMethod | EnumCreationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCreationMethodWithAggregatesFilter<$PrismaModel> | $Enums.CreationMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCreationMethodFilter<$PrismaModel>
    _max?: NestedEnumCreationMethodFilter<$PrismaModel>
  }

  export type QuestionBankListRelationFilter = {
    every?: QuestionBankWhereInput
    some?: QuestionBankWhereInput
    none?: QuestionBankWhereInput
  }

  export type QuestionBankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionLevelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type QuestionLevelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type QuestionLevelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type QuestionLevelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TestTypeScalarRelationFilter = {
    is?: TestTypeWhereInput
    isNot?: TestTypeWhereInput
  }

  export type ScoreCriteriaListRelationFilter = {
    every?: ScoreCriteriaWhereInput
    some?: ScoreCriteriaWhereInput
    none?: ScoreCriteriaWhereInput
  }

  export type TestResultListRelationFilter = {
    every?: TestResultWhereInput
    some?: TestResultWhereInput
    none?: TestResultWhereInput
  }

  export type ScoreCriteriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionSetCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QuestionSetAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type QuestionSetMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QuestionSetMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QuestionSetSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    lessonId?: SortOrder
    testTypeId?: SortOrder
    passScore?: SortOrder
    attemptLimit?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    deletedBy?: SortOrder
  }

  export type QuestionTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type QuestionTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type QuestionTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type QuestionTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResultLevelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type ResultLevelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResultLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type ResultLevelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type ResultLevelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ResultLevelScalarRelationFilter = {
    is?: ResultLevelWhereInput
    isNot?: ResultLevelWhereInput
  }

  export type ScoreCriteriaCountOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreCriteriaAvgOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
  }

  export type ScoreCriteriaMaxOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreCriteriaMinOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
    description?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreCriteriaSumOrderByAggregateInput = {
    id?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    minScore?: SortOrder
    maxScore?: SortOrder
  }

  export type TestResultCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrder
  }

  export type TestResultAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
  }

  export type TestResultMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrder
  }

  export type TestResultMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
    completedAt?: SortOrder
  }

  export type TestResultSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    questionSetId?: SortOrder
    resultLevelId?: SortOrder
    rawScore?: SortOrder
    normalizedScore?: SortOrder
    attemptNo?: SortOrder
  }

  export type TestTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type TestTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TestTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type TestTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
  }

  export type TestTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TitleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TitleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TitleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TitleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TitleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserRoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserRoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRoleScalarRelationFilter = {
    is?: UserRoleWhereInput
    isNot?: UserRoleWhereInput
  }

  export type TitleNullableScalarRelationFilter = {
    is?: TitleWhereInput | null
    isNot?: TitleWhereInput | null
  }

  export type AcademicTitleNullableScalarRelationFilter = {
    is?: AcademicTitleWhereInput | null
    isNot?: AcademicTitleWhereInput | null
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type OrganizationListRelationFilter = {
    every?: OrganizationWhereInput
    some?: OrganizationWhereInput
    none?: OrganizationWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type OrganizationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrder
    academicTitleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrder
    academicTitleId?: SortOrder
    departmentId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrder
    academicTitleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrder
    academicTitleId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    userRoleId?: SortOrder
    titleId?: SortOrder
    academicTitleId?: SortOrder
    departmentId?: SortOrder
  }

  export type UserCreateNestedManyWithoutAcademicTitleInput = {
    create?: XOR<UserCreateWithoutAcademicTitleInput, UserUncheckedCreateWithoutAcademicTitleInput> | UserCreateWithoutAcademicTitleInput[] | UserUncheckedCreateWithoutAcademicTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAcademicTitleInput | UserCreateOrConnectWithoutAcademicTitleInput[]
    createMany?: UserCreateManyAcademicTitleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAcademicTitleInput = {
    create?: XOR<UserCreateWithoutAcademicTitleInput, UserUncheckedCreateWithoutAcademicTitleInput> | UserCreateWithoutAcademicTitleInput[] | UserUncheckedCreateWithoutAcademicTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAcademicTitleInput | UserCreateOrConnectWithoutAcademicTitleInput[]
    createMany?: UserCreateManyAcademicTitleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutAcademicTitleNestedInput = {
    create?: XOR<UserCreateWithoutAcademicTitleInput, UserUncheckedCreateWithoutAcademicTitleInput> | UserCreateWithoutAcademicTitleInput[] | UserUncheckedCreateWithoutAcademicTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAcademicTitleInput | UserCreateOrConnectWithoutAcademicTitleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAcademicTitleInput | UserUpsertWithWhereUniqueWithoutAcademicTitleInput[]
    createMany?: UserCreateManyAcademicTitleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAcademicTitleInput | UserUpdateWithWhereUniqueWithoutAcademicTitleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAcademicTitleInput | UserUpdateManyWithWhereWithoutAcademicTitleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutAcademicTitleNestedInput = {
    create?: XOR<UserCreateWithoutAcademicTitleInput, UserUncheckedCreateWithoutAcademicTitleInput> | UserCreateWithoutAcademicTitleInput[] | UserUncheckedCreateWithoutAcademicTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAcademicTitleInput | UserCreateOrConnectWithoutAcademicTitleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAcademicTitleInput | UserUpsertWithWhereUniqueWithoutAcademicTitleInput[]
    createMany?: UserCreateManyAcademicTitleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAcademicTitleInput | UserUpdateWithWhereUniqueWithoutAcademicTitleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAcademicTitleInput | UserUpdateManyWithWhereWithoutAcademicTitleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAnswerSubmissionUserInput = {
    create?: XOR<UserCreateWithoutAnswerSubmissionUserInput, UserUncheckedCreateWithoutAnswerSubmissionUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnswerSubmissionUserInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionSetCreateNestedOneWithoutAnswerSubmissionInput = {
    create?: XOR<QuestionSetCreateWithoutAnswerSubmissionInput, QuestionSetUncheckedCreateWithoutAnswerSubmissionInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutAnswerSubmissionInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type QuestionBankCreateNestedOneWithoutAnswerSubmissionInput = {
    create?: XOR<QuestionBankCreateWithoutAnswerSubmissionInput, QuestionBankUncheckedCreateWithoutAnswerSubmissionInput>
    connectOrCreate?: QuestionBankCreateOrConnectWithoutAnswerSubmissionInput
    connect?: QuestionBankWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutAnswerSubmissionUserNestedInput = {
    create?: XOR<UserCreateWithoutAnswerSubmissionUserInput, UserUncheckedCreateWithoutAnswerSubmissionUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnswerSubmissionUserInput
    upsert?: UserUpsertWithoutAnswerSubmissionUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnswerSubmissionUserInput, UserUpdateWithoutAnswerSubmissionUserInput>, UserUncheckedUpdateWithoutAnswerSubmissionUserInput>
  }

  export type QuestionSetUpdateOneRequiredWithoutAnswerSubmissionNestedInput = {
    create?: XOR<QuestionSetCreateWithoutAnswerSubmissionInput, QuestionSetUncheckedCreateWithoutAnswerSubmissionInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutAnswerSubmissionInput
    upsert?: QuestionSetUpsertWithoutAnswerSubmissionInput
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutAnswerSubmissionInput, QuestionSetUpdateWithoutAnswerSubmissionInput>, QuestionSetUncheckedUpdateWithoutAnswerSubmissionInput>
  }

  export type QuestionBankUpdateOneRequiredWithoutAnswerSubmissionNestedInput = {
    create?: XOR<QuestionBankCreateWithoutAnswerSubmissionInput, QuestionBankUncheckedCreateWithoutAnswerSubmissionInput>
    connectOrCreate?: QuestionBankCreateOrConnectWithoutAnswerSubmissionInput
    upsert?: QuestionBankUpsertWithoutAnswerSubmissionInput
    connect?: QuestionBankWhereUniqueInput
    update?: XOR<XOR<QuestionBankUpdateToOneWithWhereWithoutAnswerSubmissionInput, QuestionBankUpdateWithoutAnswerSubmissionInput>, QuestionBankUncheckedUpdateWithoutAnswerSubmissionInput>
  }

  export type UserCreateNestedOneWithoutCategoryCreatedInput = {
    create?: XOR<UserCreateWithoutCategoryCreatedInput, UserUncheckedCreateWithoutCategoryCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoryCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCategoryUpdatedInput = {
    create?: XOR<UserCreateWithoutCategoryUpdatedInput, UserUncheckedCreateWithoutCategoryUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoryUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCategoryDeletedInput = {
    create?: XOR<UserCreateWithoutCategoryDeletedInput, UserUncheckedCreateWithoutCategoryDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoryDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutCategoryCreatedNestedInput = {
    create?: XOR<UserCreateWithoutCategoryCreatedInput, UserUncheckedCreateWithoutCategoryCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoryCreatedInput
    upsert?: UserUpsertWithoutCategoryCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategoryCreatedInput, UserUpdateWithoutCategoryCreatedInput>, UserUncheckedUpdateWithoutCategoryCreatedInput>
  }

  export type UserUpdateOneWithoutCategoryUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutCategoryUpdatedInput, UserUncheckedCreateWithoutCategoryUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoryUpdatedInput
    upsert?: UserUpsertWithoutCategoryUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategoryUpdatedInput, UserUpdateWithoutCategoryUpdatedInput>, UserUncheckedUpdateWithoutCategoryUpdatedInput>
  }

  export type UserUpdateOneWithoutCategoryDeletedNestedInput = {
    create?: XOR<UserCreateWithoutCategoryDeletedInput, UserUncheckedCreateWithoutCategoryDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoryDeletedInput
    upsert?: UserUpsertWithoutCategoryDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategoryDeletedInput, UserUpdateWithoutCategoryDeletedInput>, UserUncheckedUpdateWithoutCategoryDeletedInput>
  }

  export type CourseUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCategoryInput | CourseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCategoryInput | CourseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCategoryInput | CourseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCategoryInput | CourseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCategoryInput | CourseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCategoryInput | CourseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutCourseCompletionCourseIdInput = {
    create?: XOR<CourseCreateWithoutCourseCompletionCourseIdInput, CourseUncheckedCreateWithoutCourseCompletionCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseCompletionCourseIdInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseCompletionUserIdInput = {
    create?: XOR<UserCreateWithoutCourseCompletionUserIdInput, UserUncheckedCreateWithoutCourseCompletionUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseCompletionUserIdInput
    connect?: UserWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutCourseCompletionCourseIdNestedInput = {
    create?: XOR<CourseCreateWithoutCourseCompletionCourseIdInput, CourseUncheckedCreateWithoutCourseCompletionCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseCompletionCourseIdInput
    upsert?: CourseUpsertWithoutCourseCompletionCourseIdInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCourseCompletionCourseIdInput, CourseUpdateWithoutCourseCompletionCourseIdInput>, CourseUncheckedUpdateWithoutCourseCompletionCourseIdInput>
  }

  export type UserUpdateOneWithoutCourseCompletionUserIdNestedInput = {
    create?: XOR<UserCreateWithoutCourseCompletionUserIdInput, UserUncheckedCreateWithoutCourseCompletionUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseCompletionUserIdInput
    upsert?: UserUpsertWithoutCourseCompletionUserIdInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseCompletionUserIdInput, UserUpdateWithoutCourseCompletionUserIdInput>, UserUncheckedUpdateWithoutCourseCompletionUserIdInput>
  }

  export type CourseCreateNestedOneWithoutCourseInstructorCourseIdInput = {
    create?: XOR<CourseCreateWithoutCourseInstructorCourseIdInput, CourseUncheckedCreateWithoutCourseInstructorCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseInstructorCourseIdInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseInstructorUserIdInput = {
    create?: XOR<UserCreateWithoutCourseInstructorUserIdInput, UserUncheckedCreateWithoutCourseInstructorUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseInstructorUserIdInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseInstructorUpdatedInput = {
    create?: XOR<UserCreateWithoutCourseInstructorUpdatedInput, UserUncheckedCreateWithoutCourseInstructorUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseInstructorUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseInstructorDeletedInput = {
    create?: XOR<UserCreateWithoutCourseInstructorDeletedInput, UserUncheckedCreateWithoutCourseInstructorDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseInstructorDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type LessonCreateNestedManyWithoutCourseInstructorInput = {
    create?: XOR<LessonCreateWithoutCourseInstructorInput, LessonUncheckedCreateWithoutCourseInstructorInput> | LessonCreateWithoutCourseInstructorInput[] | LessonUncheckedCreateWithoutCourseInstructorInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInstructorInput | LessonCreateOrConnectWithoutCourseInstructorInput[]
    createMany?: LessonCreateManyCourseInstructorInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutCourseInstructorInput = {
    create?: XOR<LessonCreateWithoutCourseInstructorInput, LessonUncheckedCreateWithoutCourseInstructorInput> | LessonCreateWithoutCourseInstructorInput[] | LessonUncheckedCreateWithoutCourseInstructorInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInstructorInput | LessonCreateOrConnectWithoutCourseInstructorInput[]
    createMany?: LessonCreateManyCourseInstructorInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type CourseUpdateOneRequiredWithoutCourseInstructorCourseIdNestedInput = {
    create?: XOR<CourseCreateWithoutCourseInstructorCourseIdInput, CourseUncheckedCreateWithoutCourseInstructorCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseInstructorCourseIdInput
    upsert?: CourseUpsertWithoutCourseInstructorCourseIdInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCourseInstructorCourseIdInput, CourseUpdateWithoutCourseInstructorCourseIdInput>, CourseUncheckedUpdateWithoutCourseInstructorCourseIdInput>
  }

  export type UserUpdateOneWithoutCourseInstructorUserIdNestedInput = {
    create?: XOR<UserCreateWithoutCourseInstructorUserIdInput, UserUncheckedCreateWithoutCourseInstructorUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseInstructorUserIdInput
    upsert?: UserUpsertWithoutCourseInstructorUserIdInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseInstructorUserIdInput, UserUpdateWithoutCourseInstructorUserIdInput>, UserUncheckedUpdateWithoutCourseInstructorUserIdInput>
  }

  export type UserUpdateOneWithoutCourseInstructorUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutCourseInstructorUpdatedInput, UserUncheckedCreateWithoutCourseInstructorUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseInstructorUpdatedInput
    upsert?: UserUpsertWithoutCourseInstructorUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseInstructorUpdatedInput, UserUpdateWithoutCourseInstructorUpdatedInput>, UserUncheckedUpdateWithoutCourseInstructorUpdatedInput>
  }

  export type UserUpdateOneWithoutCourseInstructorDeletedNestedInput = {
    create?: XOR<UserCreateWithoutCourseInstructorDeletedInput, UserUncheckedCreateWithoutCourseInstructorDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseInstructorDeletedInput
    upsert?: UserUpsertWithoutCourseInstructorDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseInstructorDeletedInput, UserUpdateWithoutCourseInstructorDeletedInput>, UserUncheckedUpdateWithoutCourseInstructorDeletedInput>
  }

  export type LessonUpdateManyWithoutCourseInstructorNestedInput = {
    create?: XOR<LessonCreateWithoutCourseInstructorInput, LessonUncheckedCreateWithoutCourseInstructorInput> | LessonCreateWithoutCourseInstructorInput[] | LessonUncheckedCreateWithoutCourseInstructorInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInstructorInput | LessonCreateOrConnectWithoutCourseInstructorInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutCourseInstructorInput | LessonUpsertWithWhereUniqueWithoutCourseInstructorInput[]
    createMany?: LessonCreateManyCourseInstructorInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutCourseInstructorInput | LessonUpdateWithWhereUniqueWithoutCourseInstructorInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutCourseInstructorInput | LessonUpdateManyWithWhereWithoutCourseInstructorInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutCourseInstructorNestedInput = {
    create?: XOR<LessonCreateWithoutCourseInstructorInput, LessonUncheckedCreateWithoutCourseInstructorInput> | LessonCreateWithoutCourseInstructorInput[] | LessonUncheckedCreateWithoutCourseInstructorInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInstructorInput | LessonCreateOrConnectWithoutCourseInstructorInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutCourseInstructorInput | LessonUpsertWithWhereUniqueWithoutCourseInstructorInput[]
    createMany?: LessonCreateManyCourseInstructorInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutCourseInstructorInput | LessonUpdateWithWhereUniqueWithoutCourseInstructorInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutCourseInstructorInput | LessonUpdateManyWithWhereWithoutCourseInstructorInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<CategoryCreateWithoutCategoriesInput, CategoryUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCategoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseCreatedInput = {
    create?: XOR<UserCreateWithoutCourseCreatedInput, UserUncheckedCreateWithoutCourseCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseUpdatedInput = {
    create?: XOR<UserCreateWithoutCourseUpdatedInput, UserUncheckedCreateWithoutCourseUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseDeletedInput = {
    create?: XOR<UserCreateWithoutCourseDeletedInput, UserUncheckedCreateWithoutCourseDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type CourseInstructorCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseInstructorCreateWithoutCourseInput, CourseInstructorUncheckedCreateWithoutCourseInput> | CourseInstructorCreateWithoutCourseInput[] | CourseInstructorUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCourseInput | CourseInstructorCreateOrConnectWithoutCourseInput[]
    createMany?: CourseInstructorCreateManyCourseInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseCompletionCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseCompletionCreateWithoutCourseInput, CourseCompletionUncheckedCreateWithoutCourseInput> | CourseCompletionCreateWithoutCourseInput[] | CourseCompletionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutCourseInput | CourseCompletionCreateOrConnectWithoutCourseInput[]
    createMany?: CourseCompletionCreateManyCourseInputEnvelope
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
  }

  export type LessonCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonCreateWithoutCourseInput, LessonUncheckedCreateWithoutCourseInput> | LessonCreateWithoutCourseInput[] | LessonUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInput | LessonCreateOrConnectWithoutCourseInput[]
    createMany?: LessonCreateManyCourseInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutCourseInput = {
    create?: XOR<QuestionSetCreateWithoutCourseInput, QuestionSetUncheckedCreateWithoutCourseInput> | QuestionSetCreateWithoutCourseInput[] | QuestionSetUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCourseInput | QuestionSetCreateOrConnectWithoutCourseInput[]
    createMany?: QuestionSetCreateManyCourseInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type CourseInstructorUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseInstructorCreateWithoutCourseInput, CourseInstructorUncheckedCreateWithoutCourseInput> | CourseInstructorCreateWithoutCourseInput[] | CourseInstructorUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCourseInput | CourseInstructorCreateOrConnectWithoutCourseInput[]
    createMany?: CourseInstructorCreateManyCourseInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseCompletionUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseCompletionCreateWithoutCourseInput, CourseCompletionUncheckedCreateWithoutCourseInput> | CourseCompletionCreateWithoutCourseInput[] | CourseCompletionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutCourseInput | CourseCompletionCreateOrConnectWithoutCourseInput[]
    createMany?: CourseCompletionCreateManyCourseInputEnvelope
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonCreateWithoutCourseInput, LessonUncheckedCreateWithoutCourseInput> | LessonCreateWithoutCourseInput[] | LessonUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInput | LessonCreateOrConnectWithoutCourseInput[]
    createMany?: LessonCreateManyCourseInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<QuestionSetCreateWithoutCourseInput, QuestionSetUncheckedCreateWithoutCourseInput> | QuestionSetCreateWithoutCourseInput[] | QuestionSetUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCourseInput | QuestionSetCreateOrConnectWithoutCourseInput[]
    createMany?: QuestionSetCreateManyCourseInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutCategoriesInput, CategoryUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCategoriesInput
    upsert?: CategoryUpsertWithoutCategoriesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutCategoriesInput, CategoryUpdateWithoutCategoriesInput>, CategoryUncheckedUpdateWithoutCategoriesInput>
  }

  export type UserUpdateOneRequiredWithoutCourseCreatedNestedInput = {
    create?: XOR<UserCreateWithoutCourseCreatedInput, UserUncheckedCreateWithoutCourseCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseCreatedInput
    upsert?: UserUpsertWithoutCourseCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseCreatedInput, UserUpdateWithoutCourseCreatedInput>, UserUncheckedUpdateWithoutCourseCreatedInput>
  }

  export type UserUpdateOneWithoutCourseUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutCourseUpdatedInput, UserUncheckedCreateWithoutCourseUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseUpdatedInput
    upsert?: UserUpsertWithoutCourseUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseUpdatedInput, UserUpdateWithoutCourseUpdatedInput>, UserUncheckedUpdateWithoutCourseUpdatedInput>
  }

  export type UserUpdateOneWithoutCourseDeletedNestedInput = {
    create?: XOR<UserCreateWithoutCourseDeletedInput, UserUncheckedCreateWithoutCourseDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseDeletedInput
    upsert?: UserUpsertWithoutCourseDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseDeletedInput, UserUpdateWithoutCourseDeletedInput>, UserUncheckedUpdateWithoutCourseDeletedInput>
  }

  export type CourseInstructorUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutCourseInput, CourseInstructorUncheckedCreateWithoutCourseInput> | CourseInstructorCreateWithoutCourseInput[] | CourseInstructorUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCourseInput | CourseInstructorCreateOrConnectWithoutCourseInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutCourseInput | CourseInstructorUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseInstructorCreateManyCourseInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutCourseInput | CourseInstructorUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutCourseInput | CourseInstructorUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseCompletionUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseCompletionCreateWithoutCourseInput, CourseCompletionUncheckedCreateWithoutCourseInput> | CourseCompletionCreateWithoutCourseInput[] | CourseCompletionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutCourseInput | CourseCompletionCreateOrConnectWithoutCourseInput[]
    upsert?: CourseCompletionUpsertWithWhereUniqueWithoutCourseInput | CourseCompletionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseCompletionCreateManyCourseInputEnvelope
    set?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    disconnect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    delete?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    update?: CourseCompletionUpdateWithWhereUniqueWithoutCourseInput | CourseCompletionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseCompletionUpdateManyWithWhereWithoutCourseInput | CourseCompletionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseCompletionScalarWhereInput | CourseCompletionScalarWhereInput[]
  }

  export type LessonUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonCreateWithoutCourseInput, LessonUncheckedCreateWithoutCourseInput> | LessonCreateWithoutCourseInput[] | LessonUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInput | LessonCreateOrConnectWithoutCourseInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutCourseInput | LessonUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonCreateManyCourseInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutCourseInput | LessonUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutCourseInput | LessonUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutCourseNestedInput = {
    create?: XOR<QuestionSetCreateWithoutCourseInput, QuestionSetUncheckedCreateWithoutCourseInput> | QuestionSetCreateWithoutCourseInput[] | QuestionSetUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCourseInput | QuestionSetCreateOrConnectWithoutCourseInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutCourseInput | QuestionSetUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: QuestionSetCreateManyCourseInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutCourseInput | QuestionSetUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutCourseInput | QuestionSetUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutCourseInput, CourseInstructorUncheckedCreateWithoutCourseInput> | CourseInstructorCreateWithoutCourseInput[] | CourseInstructorUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCourseInput | CourseInstructorCreateOrConnectWithoutCourseInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutCourseInput | CourseInstructorUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseInstructorCreateManyCourseInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutCourseInput | CourseInstructorUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutCourseInput | CourseInstructorUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseCompletionCreateWithoutCourseInput, CourseCompletionUncheckedCreateWithoutCourseInput> | CourseCompletionCreateWithoutCourseInput[] | CourseCompletionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutCourseInput | CourseCompletionCreateOrConnectWithoutCourseInput[]
    upsert?: CourseCompletionUpsertWithWhereUniqueWithoutCourseInput | CourseCompletionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseCompletionCreateManyCourseInputEnvelope
    set?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    disconnect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    delete?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    update?: CourseCompletionUpdateWithWhereUniqueWithoutCourseInput | CourseCompletionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseCompletionUpdateManyWithWhereWithoutCourseInput | CourseCompletionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseCompletionScalarWhereInput | CourseCompletionScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonCreateWithoutCourseInput, LessonUncheckedCreateWithoutCourseInput> | LessonCreateWithoutCourseInput[] | LessonUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCourseInput | LessonCreateOrConnectWithoutCourseInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutCourseInput | LessonUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonCreateManyCourseInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutCourseInput | LessonUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutCourseInput | LessonUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<QuestionSetCreateWithoutCourseInput, QuestionSetUncheckedCreateWithoutCourseInput> | QuestionSetCreateWithoutCourseInput[] | QuestionSetUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCourseInput | QuestionSetCreateOrConnectWithoutCourseInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutCourseInput | QuestionSetUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: QuestionSetCreateManyCourseInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutCourseInput | QuestionSetUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutCourseInput | QuestionSetUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<OrganizationCreateWithoutDepartmentsInput, OrganizationUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutDepartmentsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<OrganizationCreateWithoutDepartmentsInput, OrganizationUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutDepartmentsInput
    upsert?: OrganizationUpsertWithoutDepartmentsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDepartmentsInput, OrganizationUpdateWithoutDepartmentsInput>, OrganizationUncheckedUpdateWithoutDepartmentsInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLessonAttemptUserIdInput = {
    create?: XOR<UserCreateWithoutLessonAttemptUserIdInput, UserUncheckedCreateWithoutLessonAttemptUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonAttemptUserIdInput
    connect?: UserWhereUniqueInput
  }

  export type LessonCreateNestedOneWithoutLessonAttemptLessonIdInput = {
    create?: XOR<LessonCreateWithoutLessonAttemptLessonIdInput, LessonUncheckedCreateWithoutLessonAttemptLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonAttemptLessonIdInput
    connect?: LessonWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLessonAttemptUserIdNestedInput = {
    create?: XOR<UserCreateWithoutLessonAttemptUserIdInput, UserUncheckedCreateWithoutLessonAttemptUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonAttemptUserIdInput
    upsert?: UserUpsertWithoutLessonAttemptUserIdInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonAttemptUserIdInput, UserUpdateWithoutLessonAttemptUserIdInput>, UserUncheckedUpdateWithoutLessonAttemptUserIdInput>
  }

  export type LessonUpdateOneRequiredWithoutLessonAttemptLessonIdNestedInput = {
    create?: XOR<LessonCreateWithoutLessonAttemptLessonIdInput, LessonUncheckedCreateWithoutLessonAttemptLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonAttemptLessonIdInput
    upsert?: LessonUpsertWithoutLessonAttemptLessonIdInput
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutLessonAttemptLessonIdInput, LessonUpdateWithoutLessonAttemptLessonIdInput>, LessonUncheckedUpdateWithoutLessonAttemptLessonIdInput>
  }

  export type LessonContentCreateNestedManyWithoutLessonContentTypeInput = {
    create?: XOR<LessonContentCreateWithoutLessonContentTypeInput, LessonContentUncheckedCreateWithoutLessonContentTypeInput> | LessonContentCreateWithoutLessonContentTypeInput[] | LessonContentUncheckedCreateWithoutLessonContentTypeInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonContentTypeInput | LessonContentCreateOrConnectWithoutLessonContentTypeInput[]
    createMany?: LessonContentCreateManyLessonContentTypeInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonContentUncheckedCreateNestedManyWithoutLessonContentTypeInput = {
    create?: XOR<LessonContentCreateWithoutLessonContentTypeInput, LessonContentUncheckedCreateWithoutLessonContentTypeInput> | LessonContentCreateWithoutLessonContentTypeInput[] | LessonContentUncheckedCreateWithoutLessonContentTypeInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonContentTypeInput | LessonContentCreateOrConnectWithoutLessonContentTypeInput[]
    createMany?: LessonContentCreateManyLessonContentTypeInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonContentUpdateManyWithoutLessonContentTypeNestedInput = {
    create?: XOR<LessonContentCreateWithoutLessonContentTypeInput, LessonContentUncheckedCreateWithoutLessonContentTypeInput> | LessonContentCreateWithoutLessonContentTypeInput[] | LessonContentUncheckedCreateWithoutLessonContentTypeInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonContentTypeInput | LessonContentCreateOrConnectWithoutLessonContentTypeInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutLessonContentTypeInput | LessonContentUpsertWithWhereUniqueWithoutLessonContentTypeInput[]
    createMany?: LessonContentCreateManyLessonContentTypeInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutLessonContentTypeInput | LessonContentUpdateWithWhereUniqueWithoutLessonContentTypeInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutLessonContentTypeInput | LessonContentUpdateManyWithWhereWithoutLessonContentTypeInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonContentUncheckedUpdateManyWithoutLessonContentTypeNestedInput = {
    create?: XOR<LessonContentCreateWithoutLessonContentTypeInput, LessonContentUncheckedCreateWithoutLessonContentTypeInput> | LessonContentCreateWithoutLessonContentTypeInput[] | LessonContentUncheckedCreateWithoutLessonContentTypeInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonContentTypeInput | LessonContentCreateOrConnectWithoutLessonContentTypeInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutLessonContentTypeInput | LessonContentUpsertWithWhereUniqueWithoutLessonContentTypeInput[]
    createMany?: LessonContentCreateManyLessonContentTypeInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutLessonContentTypeInput | LessonContentUpdateWithWhereUniqueWithoutLessonContentTypeInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutLessonContentTypeInput | LessonContentUpdateManyWithWhereWithoutLessonContentTypeInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonCreateNestedOneWithoutLessonContentInput = {
    create?: XOR<LessonCreateWithoutLessonContentInput, LessonUncheckedCreateWithoutLessonContentInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonContentInput
    connect?: LessonWhereUniqueInput
  }

  export type LessonContentTypeCreateNestedOneWithoutLessonContentInput = {
    create?: XOR<LessonContentTypeCreateWithoutLessonContentInput, LessonContentTypeUncheckedCreateWithoutLessonContentInput>
    connectOrCreate?: LessonContentTypeCreateOrConnectWithoutLessonContentInput
    connect?: LessonContentTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLessonContentUpdatedInput = {
    create?: XOR<UserCreateWithoutLessonContentUpdatedInput, UserUncheckedCreateWithoutLessonContentUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonContentUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLessonContentDeletedInput = {
    create?: XOR<UserCreateWithoutLessonContentDeletedInput, UserUncheckedCreateWithoutLessonContentDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonContentDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type LessonUpdateOneRequiredWithoutLessonContentNestedInput = {
    create?: XOR<LessonCreateWithoutLessonContentInput, LessonUncheckedCreateWithoutLessonContentInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonContentInput
    upsert?: LessonUpsertWithoutLessonContentInput
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutLessonContentInput, LessonUpdateWithoutLessonContentInput>, LessonUncheckedUpdateWithoutLessonContentInput>
  }

  export type LessonContentTypeUpdateOneRequiredWithoutLessonContentNestedInput = {
    create?: XOR<LessonContentTypeCreateWithoutLessonContentInput, LessonContentTypeUncheckedCreateWithoutLessonContentInput>
    connectOrCreate?: LessonContentTypeCreateOrConnectWithoutLessonContentInput
    upsert?: LessonContentTypeUpsertWithoutLessonContentInput
    connect?: LessonContentTypeWhereUniqueInput
    update?: XOR<XOR<LessonContentTypeUpdateToOneWithWhereWithoutLessonContentInput, LessonContentTypeUpdateWithoutLessonContentInput>, LessonContentTypeUncheckedUpdateWithoutLessonContentInput>
  }

  export type UserUpdateOneWithoutLessonContentUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutLessonContentUpdatedInput, UserUncheckedCreateWithoutLessonContentUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonContentUpdatedInput
    upsert?: UserUpsertWithoutLessonContentUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonContentUpdatedInput, UserUpdateWithoutLessonContentUpdatedInput>, UserUncheckedUpdateWithoutLessonContentUpdatedInput>
  }

  export type UserUpdateOneWithoutLessonContentDeletedNestedInput = {
    create?: XOR<UserCreateWithoutLessonContentDeletedInput, UserUncheckedCreateWithoutLessonContentDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonContentDeletedInput
    upsert?: UserUpsertWithoutLessonContentDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonContentDeletedInput, UserUpdateWithoutLessonContentDeletedInput>, UserUncheckedUpdateWithoutLessonContentDeletedInput>
  }

  export type LessonCreateNestedOneWithoutLessonPrerequisiteLessonIdInput = {
    create?: XOR<LessonCreateWithoutLessonPrerequisiteLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonPrerequisiteLessonIdInput
    connect?: LessonWhereUniqueInput
  }

  export type LessonCreateNestedOneWithoutLessonPrerequisiteRequiredLessonIdInput = {
    create?: XOR<LessonCreateWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteRequiredLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonPrerequisiteRequiredLessonIdInput
    connect?: LessonWhereUniqueInput
  }

  export type LessonUpdateOneRequiredWithoutLessonPrerequisiteLessonIdNestedInput = {
    create?: XOR<LessonCreateWithoutLessonPrerequisiteLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonPrerequisiteLessonIdInput
    upsert?: LessonUpsertWithoutLessonPrerequisiteLessonIdInput
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutLessonPrerequisiteLessonIdInput, LessonUpdateWithoutLessonPrerequisiteLessonIdInput>, LessonUncheckedUpdateWithoutLessonPrerequisiteLessonIdInput>
  }

  export type LessonUpdateOneRequiredWithoutLessonPrerequisiteRequiredLessonIdNestedInput = {
    create?: XOR<LessonCreateWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteRequiredLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonPrerequisiteRequiredLessonIdInput
    upsert?: LessonUpsertWithoutLessonPrerequisiteRequiredLessonIdInput
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUpdateWithoutLessonPrerequisiteRequiredLessonIdInput>, LessonUncheckedUpdateWithoutLessonPrerequisiteRequiredLessonIdInput>
  }

  export type LessonCreateNestedManyWithoutLessonTypeInput = {
    create?: XOR<LessonCreateWithoutLessonTypeInput, LessonUncheckedCreateWithoutLessonTypeInput> | LessonCreateWithoutLessonTypeInput[] | LessonUncheckedCreateWithoutLessonTypeInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutLessonTypeInput | LessonCreateOrConnectWithoutLessonTypeInput[]
    createMany?: LessonCreateManyLessonTypeInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutLessonTypeInput = {
    create?: XOR<LessonCreateWithoutLessonTypeInput, LessonUncheckedCreateWithoutLessonTypeInput> | LessonCreateWithoutLessonTypeInput[] | LessonUncheckedCreateWithoutLessonTypeInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutLessonTypeInput | LessonCreateOrConnectWithoutLessonTypeInput[]
    createMany?: LessonCreateManyLessonTypeInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonUpdateManyWithoutLessonTypeNestedInput = {
    create?: XOR<LessonCreateWithoutLessonTypeInput, LessonUncheckedCreateWithoutLessonTypeInput> | LessonCreateWithoutLessonTypeInput[] | LessonUncheckedCreateWithoutLessonTypeInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutLessonTypeInput | LessonCreateOrConnectWithoutLessonTypeInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutLessonTypeInput | LessonUpsertWithWhereUniqueWithoutLessonTypeInput[]
    createMany?: LessonCreateManyLessonTypeInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutLessonTypeInput | LessonUpdateWithWhereUniqueWithoutLessonTypeInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutLessonTypeInput | LessonUpdateManyWithWhereWithoutLessonTypeInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutLessonTypeNestedInput = {
    create?: XOR<LessonCreateWithoutLessonTypeInput, LessonUncheckedCreateWithoutLessonTypeInput> | LessonCreateWithoutLessonTypeInput[] | LessonUncheckedCreateWithoutLessonTypeInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutLessonTypeInput | LessonCreateOrConnectWithoutLessonTypeInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutLessonTypeInput | LessonUpsertWithWhereUniqueWithoutLessonTypeInput[]
    createMany?: LessonCreateManyLessonTypeInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutLessonTypeInput | LessonUpdateWithWhereUniqueWithoutLessonTypeInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutLessonTypeInput | LessonUpdateManyWithWhereWithoutLessonTypeInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLessonViewUserIdInput = {
    create?: XOR<UserCreateWithoutLessonViewUserIdInput, UserUncheckedCreateWithoutLessonViewUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonViewUserIdInput
    connect?: UserWhereUniqueInput
  }

  export type LessonCreateNestedOneWithoutLessonViewLessonIdInput = {
    create?: XOR<LessonCreateWithoutLessonViewLessonIdInput, LessonUncheckedCreateWithoutLessonViewLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonViewLessonIdInput
    connect?: LessonWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLessonViewUserIdNestedInput = {
    create?: XOR<UserCreateWithoutLessonViewUserIdInput, UserUncheckedCreateWithoutLessonViewUserIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonViewUserIdInput
    upsert?: UserUpsertWithoutLessonViewUserIdInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonViewUserIdInput, UserUpdateWithoutLessonViewUserIdInput>, UserUncheckedUpdateWithoutLessonViewUserIdInput>
  }

  export type LessonUpdateOneRequiredWithoutLessonViewLessonIdNestedInput = {
    create?: XOR<LessonCreateWithoutLessonViewLessonIdInput, LessonUncheckedCreateWithoutLessonViewLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutLessonViewLessonIdInput
    upsert?: LessonUpsertWithoutLessonViewLessonIdInput
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutLessonViewLessonIdInput, LessonUpdateWithoutLessonViewLessonIdInput>, LessonUncheckedUpdateWithoutLessonViewLessonIdInput>
  }

  export type LessonCreateNestedOneWithoutChildrenInput = {
    create?: XOR<LessonCreateWithoutChildrenInput, LessonUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: LessonCreateOrConnectWithoutChildrenInput
    connect?: LessonWhereUniqueInput
  }

  export type LessonCreateNestedManyWithoutParentInput = {
    create?: XOR<LessonCreateWithoutParentInput, LessonUncheckedCreateWithoutParentInput> | LessonCreateWithoutParentInput[] | LessonUncheckedCreateWithoutParentInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutParentInput | LessonCreateOrConnectWithoutParentInput[]
    createMany?: LessonCreateManyParentInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonTypeCreateNestedOneWithoutLessonTypeIdInput = {
    create?: XOR<LessonTypeCreateWithoutLessonTypeIdInput, LessonTypeUncheckedCreateWithoutLessonTypeIdInput>
    connectOrCreate?: LessonTypeCreateOrConnectWithoutLessonTypeIdInput
    connect?: LessonTypeWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutLessonCourseIdInput = {
    create?: XOR<CourseCreateWithoutLessonCourseIdInput, CourseUncheckedCreateWithoutLessonCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutLessonCourseIdInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseInstructorCreateNestedOneWithoutCourseInstructorInput = {
    create?: XOR<CourseInstructorCreateWithoutCourseInstructorInput, CourseInstructorUncheckedCreateWithoutCourseInstructorInput>
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCourseInstructorInput
    connect?: CourseInstructorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLessonCreatedInput = {
    create?: XOR<UserCreateWithoutLessonCreatedInput, UserUncheckedCreateWithoutLessonCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLessonUpdatedInput = {
    create?: XOR<UserCreateWithoutLessonUpdatedInput, UserUncheckedCreateWithoutLessonUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLessonDeletedInput = {
    create?: XOR<UserCreateWithoutLessonDeletedInput, UserUncheckedCreateWithoutLessonDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type LessonContentCreateNestedManyWithoutLessonInput = {
    create?: XOR<LessonContentCreateWithoutLessonInput, LessonContentUncheckedCreateWithoutLessonInput> | LessonContentCreateWithoutLessonInput[] | LessonContentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonInput | LessonContentCreateOrConnectWithoutLessonInput[]
    createMany?: LessonContentCreateManyLessonInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonViewCreateNestedManyWithoutLessonsInput = {
    create?: XOR<LessonViewCreateWithoutLessonsInput, LessonViewUncheckedCreateWithoutLessonsInput> | LessonViewCreateWithoutLessonsInput[] | LessonViewUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutLessonsInput | LessonViewCreateOrConnectWithoutLessonsInput[]
    createMany?: LessonViewCreateManyLessonsInputEnvelope
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
  }

  export type LessonAttemptCreateNestedManyWithoutLessonsInput = {
    create?: XOR<LessonAttemptCreateWithoutLessonsInput, LessonAttemptUncheckedCreateWithoutLessonsInput> | LessonAttemptCreateWithoutLessonsInput[] | LessonAttemptUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutLessonsInput | LessonAttemptCreateOrConnectWithoutLessonsInput[]
    createMany?: LessonAttemptCreateManyLessonsInputEnvelope
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
  }

  export type LessonPrerequisiteCreateNestedManyWithoutLessonsInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutLessonsInput, LessonPrerequisiteUncheckedCreateWithoutLessonsInput> | LessonPrerequisiteCreateWithoutLessonsInput[] | LessonPrerequisiteUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutLessonsInput | LessonPrerequisiteCreateOrConnectWithoutLessonsInput[]
    createMany?: LessonPrerequisiteCreateManyLessonsInputEnvelope
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
  }

  export type LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput> | LessonPrerequisiteCreateWithoutRequiredLessonInput[] | LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput | LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput[]
    createMany?: LessonPrerequisiteCreateManyRequiredLessonInputEnvelope
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutLessonInput = {
    create?: XOR<QuestionSetCreateWithoutLessonInput, QuestionSetUncheckedCreateWithoutLessonInput> | QuestionSetCreateWithoutLessonInput[] | QuestionSetUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutLessonInput | QuestionSetCreateOrConnectWithoutLessonInput[]
    createMany?: QuestionSetCreateManyLessonInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<LessonCreateWithoutParentInput, LessonUncheckedCreateWithoutParentInput> | LessonCreateWithoutParentInput[] | LessonUncheckedCreateWithoutParentInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutParentInput | LessonCreateOrConnectWithoutParentInput[]
    createMany?: LessonCreateManyParentInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonContentUncheckedCreateNestedManyWithoutLessonInput = {
    create?: XOR<LessonContentCreateWithoutLessonInput, LessonContentUncheckedCreateWithoutLessonInput> | LessonContentCreateWithoutLessonInput[] | LessonContentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonInput | LessonContentCreateOrConnectWithoutLessonInput[]
    createMany?: LessonContentCreateManyLessonInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonViewUncheckedCreateNestedManyWithoutLessonsInput = {
    create?: XOR<LessonViewCreateWithoutLessonsInput, LessonViewUncheckedCreateWithoutLessonsInput> | LessonViewCreateWithoutLessonsInput[] | LessonViewUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutLessonsInput | LessonViewCreateOrConnectWithoutLessonsInput[]
    createMany?: LessonViewCreateManyLessonsInputEnvelope
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
  }

  export type LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput = {
    create?: XOR<LessonAttemptCreateWithoutLessonsInput, LessonAttemptUncheckedCreateWithoutLessonsInput> | LessonAttemptCreateWithoutLessonsInput[] | LessonAttemptUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutLessonsInput | LessonAttemptCreateOrConnectWithoutLessonsInput[]
    createMany?: LessonAttemptCreateManyLessonsInputEnvelope
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
  }

  export type LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutLessonsInput, LessonPrerequisiteUncheckedCreateWithoutLessonsInput> | LessonPrerequisiteCreateWithoutLessonsInput[] | LessonPrerequisiteUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutLessonsInput | LessonPrerequisiteCreateOrConnectWithoutLessonsInput[]
    createMany?: LessonPrerequisiteCreateManyLessonsInputEnvelope
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
  }

  export type LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput> | LessonPrerequisiteCreateWithoutRequiredLessonInput[] | LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput | LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput[]
    createMany?: LessonPrerequisiteCreateManyRequiredLessonInputEnvelope
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutLessonInput = {
    create?: XOR<QuestionSetCreateWithoutLessonInput, QuestionSetUncheckedCreateWithoutLessonInput> | QuestionSetCreateWithoutLessonInput[] | QuestionSetUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutLessonInput | QuestionSetCreateOrConnectWithoutLessonInput[]
    createMany?: QuestionSetCreateManyLessonInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type LessonUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<LessonCreateWithoutChildrenInput, LessonUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: LessonCreateOrConnectWithoutChildrenInput
    upsert?: LessonUpsertWithoutChildrenInput
    disconnect?: LessonWhereInput | boolean
    delete?: LessonWhereInput | boolean
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutChildrenInput, LessonUpdateWithoutChildrenInput>, LessonUncheckedUpdateWithoutChildrenInput>
  }

  export type LessonUpdateManyWithoutParentNestedInput = {
    create?: XOR<LessonCreateWithoutParentInput, LessonUncheckedCreateWithoutParentInput> | LessonCreateWithoutParentInput[] | LessonUncheckedCreateWithoutParentInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutParentInput | LessonCreateOrConnectWithoutParentInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutParentInput | LessonUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: LessonCreateManyParentInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutParentInput | LessonUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutParentInput | LessonUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput = {
    create?: XOR<LessonTypeCreateWithoutLessonTypeIdInput, LessonTypeUncheckedCreateWithoutLessonTypeIdInput>
    connectOrCreate?: LessonTypeCreateOrConnectWithoutLessonTypeIdInput
    upsert?: LessonTypeUpsertWithoutLessonTypeIdInput
    connect?: LessonTypeWhereUniqueInput
    update?: XOR<XOR<LessonTypeUpdateToOneWithWhereWithoutLessonTypeIdInput, LessonTypeUpdateWithoutLessonTypeIdInput>, LessonTypeUncheckedUpdateWithoutLessonTypeIdInput>
  }

  export type CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput = {
    create?: XOR<CourseCreateWithoutLessonCourseIdInput, CourseUncheckedCreateWithoutLessonCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutLessonCourseIdInput
    upsert?: CourseUpsertWithoutLessonCourseIdInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutLessonCourseIdInput, CourseUpdateWithoutLessonCourseIdInput>, CourseUncheckedUpdateWithoutLessonCourseIdInput>
  }

  export type CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutCourseInstructorInput, CourseInstructorUncheckedCreateWithoutCourseInstructorInput>
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCourseInstructorInput
    upsert?: CourseInstructorUpsertWithoutCourseInstructorInput
    connect?: CourseInstructorWhereUniqueInput
    update?: XOR<XOR<CourseInstructorUpdateToOneWithWhereWithoutCourseInstructorInput, CourseInstructorUpdateWithoutCourseInstructorInput>, CourseInstructorUncheckedUpdateWithoutCourseInstructorInput>
  }

  export type UserUpdateOneRequiredWithoutLessonCreatedNestedInput = {
    create?: XOR<UserCreateWithoutLessonCreatedInput, UserUncheckedCreateWithoutLessonCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonCreatedInput
    upsert?: UserUpsertWithoutLessonCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonCreatedInput, UserUpdateWithoutLessonCreatedInput>, UserUncheckedUpdateWithoutLessonCreatedInput>
  }

  export type UserUpdateOneWithoutLessonUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutLessonUpdatedInput, UserUncheckedCreateWithoutLessonUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonUpdatedInput
    upsert?: UserUpsertWithoutLessonUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonUpdatedInput, UserUpdateWithoutLessonUpdatedInput>, UserUncheckedUpdateWithoutLessonUpdatedInput>
  }

  export type UserUpdateOneWithoutLessonDeletedNestedInput = {
    create?: XOR<UserCreateWithoutLessonDeletedInput, UserUncheckedCreateWithoutLessonDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutLessonDeletedInput
    upsert?: UserUpsertWithoutLessonDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLessonDeletedInput, UserUpdateWithoutLessonDeletedInput>, UserUncheckedUpdateWithoutLessonDeletedInput>
  }

  export type LessonContentUpdateManyWithoutLessonNestedInput = {
    create?: XOR<LessonContentCreateWithoutLessonInput, LessonContentUncheckedCreateWithoutLessonInput> | LessonContentCreateWithoutLessonInput[] | LessonContentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonInput | LessonContentCreateOrConnectWithoutLessonInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutLessonInput | LessonContentUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: LessonContentCreateManyLessonInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutLessonInput | LessonContentUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutLessonInput | LessonContentUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonViewUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<LessonViewCreateWithoutLessonsInput, LessonViewUncheckedCreateWithoutLessonsInput> | LessonViewCreateWithoutLessonsInput[] | LessonViewUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutLessonsInput | LessonViewCreateOrConnectWithoutLessonsInput[]
    upsert?: LessonViewUpsertWithWhereUniqueWithoutLessonsInput | LessonViewUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: LessonViewCreateManyLessonsInputEnvelope
    set?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    disconnect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    delete?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    update?: LessonViewUpdateWithWhereUniqueWithoutLessonsInput | LessonViewUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: LessonViewUpdateManyWithWhereWithoutLessonsInput | LessonViewUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: LessonViewScalarWhereInput | LessonViewScalarWhereInput[]
  }

  export type LessonAttemptUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<LessonAttemptCreateWithoutLessonsInput, LessonAttemptUncheckedCreateWithoutLessonsInput> | LessonAttemptCreateWithoutLessonsInput[] | LessonAttemptUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutLessonsInput | LessonAttemptCreateOrConnectWithoutLessonsInput[]
    upsert?: LessonAttemptUpsertWithWhereUniqueWithoutLessonsInput | LessonAttemptUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: LessonAttemptCreateManyLessonsInputEnvelope
    set?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    disconnect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    delete?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    update?: LessonAttemptUpdateWithWhereUniqueWithoutLessonsInput | LessonAttemptUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: LessonAttemptUpdateManyWithWhereWithoutLessonsInput | LessonAttemptUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: LessonAttemptScalarWhereInput | LessonAttemptScalarWhereInput[]
  }

  export type LessonPrerequisiteUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutLessonsInput, LessonPrerequisiteUncheckedCreateWithoutLessonsInput> | LessonPrerequisiteCreateWithoutLessonsInput[] | LessonPrerequisiteUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutLessonsInput | LessonPrerequisiteCreateOrConnectWithoutLessonsInput[]
    upsert?: LessonPrerequisiteUpsertWithWhereUniqueWithoutLessonsInput | LessonPrerequisiteUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: LessonPrerequisiteCreateManyLessonsInputEnvelope
    set?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    disconnect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    delete?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    update?: LessonPrerequisiteUpdateWithWhereUniqueWithoutLessonsInput | LessonPrerequisiteUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: LessonPrerequisiteUpdateManyWithWhereWithoutLessonsInput | LessonPrerequisiteUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: LessonPrerequisiteScalarWhereInput | LessonPrerequisiteScalarWhereInput[]
  }

  export type LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput> | LessonPrerequisiteCreateWithoutRequiredLessonInput[] | LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput | LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput[]
    upsert?: LessonPrerequisiteUpsertWithWhereUniqueWithoutRequiredLessonInput | LessonPrerequisiteUpsertWithWhereUniqueWithoutRequiredLessonInput[]
    createMany?: LessonPrerequisiteCreateManyRequiredLessonInputEnvelope
    set?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    disconnect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    delete?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    update?: LessonPrerequisiteUpdateWithWhereUniqueWithoutRequiredLessonInput | LessonPrerequisiteUpdateWithWhereUniqueWithoutRequiredLessonInput[]
    updateMany?: LessonPrerequisiteUpdateManyWithWhereWithoutRequiredLessonInput | LessonPrerequisiteUpdateManyWithWhereWithoutRequiredLessonInput[]
    deleteMany?: LessonPrerequisiteScalarWhereInput | LessonPrerequisiteScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutLessonNestedInput = {
    create?: XOR<QuestionSetCreateWithoutLessonInput, QuestionSetUncheckedCreateWithoutLessonInput> | QuestionSetCreateWithoutLessonInput[] | QuestionSetUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutLessonInput | QuestionSetCreateOrConnectWithoutLessonInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutLessonInput | QuestionSetUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: QuestionSetCreateManyLessonInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutLessonInput | QuestionSetUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutLessonInput | QuestionSetUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<LessonCreateWithoutParentInput, LessonUncheckedCreateWithoutParentInput> | LessonCreateWithoutParentInput[] | LessonUncheckedCreateWithoutParentInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutParentInput | LessonCreateOrConnectWithoutParentInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutParentInput | LessonUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: LessonCreateManyParentInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutParentInput | LessonUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutParentInput | LessonUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonContentUncheckedUpdateManyWithoutLessonNestedInput = {
    create?: XOR<LessonContentCreateWithoutLessonInput, LessonContentUncheckedCreateWithoutLessonInput> | LessonContentCreateWithoutLessonInput[] | LessonContentUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutLessonInput | LessonContentCreateOrConnectWithoutLessonInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutLessonInput | LessonContentUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: LessonContentCreateManyLessonInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutLessonInput | LessonContentUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutLessonInput | LessonContentUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonViewUncheckedUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<LessonViewCreateWithoutLessonsInput, LessonViewUncheckedCreateWithoutLessonsInput> | LessonViewCreateWithoutLessonsInput[] | LessonViewUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutLessonsInput | LessonViewCreateOrConnectWithoutLessonsInput[]
    upsert?: LessonViewUpsertWithWhereUniqueWithoutLessonsInput | LessonViewUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: LessonViewCreateManyLessonsInputEnvelope
    set?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    disconnect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    delete?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    update?: LessonViewUpdateWithWhereUniqueWithoutLessonsInput | LessonViewUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: LessonViewUpdateManyWithWhereWithoutLessonsInput | LessonViewUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: LessonViewScalarWhereInput | LessonViewScalarWhereInput[]
  }

  export type LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<LessonAttemptCreateWithoutLessonsInput, LessonAttemptUncheckedCreateWithoutLessonsInput> | LessonAttemptCreateWithoutLessonsInput[] | LessonAttemptUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutLessonsInput | LessonAttemptCreateOrConnectWithoutLessonsInput[]
    upsert?: LessonAttemptUpsertWithWhereUniqueWithoutLessonsInput | LessonAttemptUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: LessonAttemptCreateManyLessonsInputEnvelope
    set?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    disconnect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    delete?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    update?: LessonAttemptUpdateWithWhereUniqueWithoutLessonsInput | LessonAttemptUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: LessonAttemptUpdateManyWithWhereWithoutLessonsInput | LessonAttemptUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: LessonAttemptScalarWhereInput | LessonAttemptScalarWhereInput[]
  }

  export type LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutLessonsInput, LessonPrerequisiteUncheckedCreateWithoutLessonsInput> | LessonPrerequisiteCreateWithoutLessonsInput[] | LessonPrerequisiteUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutLessonsInput | LessonPrerequisiteCreateOrConnectWithoutLessonsInput[]
    upsert?: LessonPrerequisiteUpsertWithWhereUniqueWithoutLessonsInput | LessonPrerequisiteUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: LessonPrerequisiteCreateManyLessonsInputEnvelope
    set?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    disconnect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    delete?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    update?: LessonPrerequisiteUpdateWithWhereUniqueWithoutLessonsInput | LessonPrerequisiteUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: LessonPrerequisiteUpdateManyWithWhereWithoutLessonsInput | LessonPrerequisiteUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: LessonPrerequisiteScalarWhereInput | LessonPrerequisiteScalarWhereInput[]
  }

  export type LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput = {
    create?: XOR<LessonPrerequisiteCreateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput> | LessonPrerequisiteCreateWithoutRequiredLessonInput[] | LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput[]
    connectOrCreate?: LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput | LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput[]
    upsert?: LessonPrerequisiteUpsertWithWhereUniqueWithoutRequiredLessonInput | LessonPrerequisiteUpsertWithWhereUniqueWithoutRequiredLessonInput[]
    createMany?: LessonPrerequisiteCreateManyRequiredLessonInputEnvelope
    set?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    disconnect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    delete?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    connect?: LessonPrerequisiteWhereUniqueInput | LessonPrerequisiteWhereUniqueInput[]
    update?: LessonPrerequisiteUpdateWithWhereUniqueWithoutRequiredLessonInput | LessonPrerequisiteUpdateWithWhereUniqueWithoutRequiredLessonInput[]
    updateMany?: LessonPrerequisiteUpdateManyWithWhereWithoutRequiredLessonInput | LessonPrerequisiteUpdateManyWithWhereWithoutRequiredLessonInput[]
    deleteMany?: LessonPrerequisiteScalarWhereInput | LessonPrerequisiteScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutLessonNestedInput = {
    create?: XOR<QuestionSetCreateWithoutLessonInput, QuestionSetUncheckedCreateWithoutLessonInput> | QuestionSetCreateWithoutLessonInput[] | QuestionSetUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutLessonInput | QuestionSetCreateOrConnectWithoutLessonInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutLessonInput | QuestionSetUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: QuestionSetCreateManyLessonInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutLessonInput | QuestionSetUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutLessonInput | QuestionSetUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrganizationsCreatedInput = {
    create?: XOR<UserCreateWithoutOrganizationsCreatedInput, UserUncheckedCreateWithoutOrganizationsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrganizationsUpdatedInput = {
    create?: XOR<UserCreateWithoutOrganizationsUpdatedInput, UserUncheckedCreateWithoutOrganizationsUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrganizationsDeletedInput = {
    create?: XOR<UserCreateWithoutOrganizationsDeletedInput, UserUncheckedCreateWithoutOrganizationsDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<DepartmentCreateWithoutOrganizationInput, DepartmentUncheckedCreateWithoutOrganizationInput> | DepartmentCreateWithoutOrganizationInput[] | DepartmentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutOrganizationInput | DepartmentCreateOrConnectWithoutOrganizationInput[]
    createMany?: DepartmentCreateManyOrganizationInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<DepartmentCreateWithoutOrganizationInput, DepartmentUncheckedCreateWithoutOrganizationInput> | DepartmentCreateWithoutOrganizationInput[] | DepartmentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutOrganizationInput | DepartmentCreateOrConnectWithoutOrganizationInput[]
    createMany?: DepartmentCreateManyOrganizationInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOrganizationsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationsCreatedInput, UserUncheckedCreateWithoutOrganizationsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsCreatedInput
    upsert?: UserUpsertWithoutOrganizationsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizationsCreatedInput, UserUpdateWithoutOrganizationsCreatedInput>, UserUncheckedUpdateWithoutOrganizationsCreatedInput>
  }

  export type UserUpdateOneWithoutOrganizationsUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationsUpdatedInput, UserUncheckedCreateWithoutOrganizationsUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsUpdatedInput
    upsert?: UserUpsertWithoutOrganizationsUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizationsUpdatedInput, UserUpdateWithoutOrganizationsUpdatedInput>, UserUncheckedUpdateWithoutOrganizationsUpdatedInput>
  }

  export type UserUpdateOneWithoutOrganizationsDeletedNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationsDeletedInput, UserUncheckedCreateWithoutOrganizationsDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationsDeletedInput
    upsert?: UserUpsertWithoutOrganizationsDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrganizationsDeletedInput, UserUpdateWithoutOrganizationsDeletedInput>, UserUncheckedUpdateWithoutOrganizationsDeletedInput>
  }

  export type DepartmentUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<DepartmentCreateWithoutOrganizationInput, DepartmentUncheckedCreateWithoutOrganizationInput> | DepartmentCreateWithoutOrganizationInput[] | DepartmentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutOrganizationInput | DepartmentCreateOrConnectWithoutOrganizationInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutOrganizationInput | DepartmentUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: DepartmentCreateManyOrganizationInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutOrganizationInput | DepartmentUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutOrganizationInput | DepartmentUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<DepartmentCreateWithoutOrganizationInput, DepartmentUncheckedCreateWithoutOrganizationInput> | DepartmentCreateWithoutOrganizationInput[] | DepartmentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutOrganizationInput | DepartmentCreateOrConnectWithoutOrganizationInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutOrganizationInput | DepartmentUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: DepartmentCreateManyOrganizationInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutOrganizationInput | DepartmentUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutOrganizationInput | DepartmentUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type QuestionTypeCreateNestedOneWithoutQuestionBankInput = {
    create?: XOR<QuestionTypeCreateWithoutQuestionBankInput, QuestionTypeUncheckedCreateWithoutQuestionBankInput>
    connectOrCreate?: QuestionTypeCreateOrConnectWithoutQuestionBankInput
    connect?: QuestionTypeWhereUniqueInput
  }

  export type QuestionLevelCreateNestedOneWithoutQuestionBankInput = {
    create?: XOR<QuestionLevelCreateWithoutQuestionBankInput, QuestionLevelUncheckedCreateWithoutQuestionBankInput>
    connectOrCreate?: QuestionLevelCreateOrConnectWithoutQuestionBankInput
    connect?: QuestionLevelWhereUniqueInput
  }

  export type QuestionSetCreateNestedOneWithoutQuestionBankInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionBankInput, QuestionSetUncheckedCreateWithoutQuestionBankInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionBankInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionBankCreatedInput = {
    create?: XOR<UserCreateWithoutQuestionBankCreatedInput, UserUncheckedCreateWithoutQuestionBankCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBankCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionBankUpdatedInput = {
    create?: XOR<UserCreateWithoutQuestionBankUpdatedInput, UserUncheckedCreateWithoutQuestionBankUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBankUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionBankDeletedInput = {
    create?: XOR<UserCreateWithoutQuestionBankDeletedInput, UserUncheckedCreateWithoutQuestionBankDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBankDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type AnswerSubmissionCreateNestedManyWithoutQuestionBankInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionBankInput, AnswerSubmissionUncheckedCreateWithoutQuestionBankInput> | AnswerSubmissionCreateWithoutQuestionBankInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionBankInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionBankInput | AnswerSubmissionCreateOrConnectWithoutQuestionBankInput[]
    createMany?: AnswerSubmissionCreateManyQuestionBankInputEnvelope
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
  }

  export type AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionBankInput, AnswerSubmissionUncheckedCreateWithoutQuestionBankInput> | AnswerSubmissionCreateWithoutQuestionBankInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionBankInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionBankInput | AnswerSubmissionCreateOrConnectWithoutQuestionBankInput[]
    createMany?: AnswerSubmissionCreateManyQuestionBankInputEnvelope
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
  }

  export type EnumCreationMethodFieldUpdateOperationsInput = {
    set?: $Enums.CreationMethod
  }

  export type QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput = {
    create?: XOR<QuestionTypeCreateWithoutQuestionBankInput, QuestionTypeUncheckedCreateWithoutQuestionBankInput>
    connectOrCreate?: QuestionTypeCreateOrConnectWithoutQuestionBankInput
    upsert?: QuestionTypeUpsertWithoutQuestionBankInput
    connect?: QuestionTypeWhereUniqueInput
    update?: XOR<XOR<QuestionTypeUpdateToOneWithWhereWithoutQuestionBankInput, QuestionTypeUpdateWithoutQuestionBankInput>, QuestionTypeUncheckedUpdateWithoutQuestionBankInput>
  }

  export type QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput = {
    create?: XOR<QuestionLevelCreateWithoutQuestionBankInput, QuestionLevelUncheckedCreateWithoutQuestionBankInput>
    connectOrCreate?: QuestionLevelCreateOrConnectWithoutQuestionBankInput
    upsert?: QuestionLevelUpsertWithoutQuestionBankInput
    connect?: QuestionLevelWhereUniqueInput
    update?: XOR<XOR<QuestionLevelUpdateToOneWithWhereWithoutQuestionBankInput, QuestionLevelUpdateWithoutQuestionBankInput>, QuestionLevelUncheckedUpdateWithoutQuestionBankInput>
  }

  export type QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionBankInput, QuestionSetUncheckedCreateWithoutQuestionBankInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionBankInput
    upsert?: QuestionSetUpsertWithoutQuestionBankInput
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutQuestionBankInput, QuestionSetUpdateWithoutQuestionBankInput>, QuestionSetUncheckedUpdateWithoutQuestionBankInput>
  }

  export type UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput = {
    create?: XOR<UserCreateWithoutQuestionBankCreatedInput, UserUncheckedCreateWithoutQuestionBankCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBankCreatedInput
    upsert?: UserUpsertWithoutQuestionBankCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionBankCreatedInput, UserUpdateWithoutQuestionBankCreatedInput>, UserUncheckedUpdateWithoutQuestionBankCreatedInput>
  }

  export type UserUpdateOneWithoutQuestionBankUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutQuestionBankUpdatedInput, UserUncheckedCreateWithoutQuestionBankUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBankUpdatedInput
    upsert?: UserUpsertWithoutQuestionBankUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionBankUpdatedInput, UserUpdateWithoutQuestionBankUpdatedInput>, UserUncheckedUpdateWithoutQuestionBankUpdatedInput>
  }

  export type UserUpdateOneWithoutQuestionBankDeletedNestedInput = {
    create?: XOR<UserCreateWithoutQuestionBankDeletedInput, UserUncheckedCreateWithoutQuestionBankDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionBankDeletedInput
    upsert?: UserUpsertWithoutQuestionBankDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionBankDeletedInput, UserUpdateWithoutQuestionBankDeletedInput>, UserUncheckedUpdateWithoutQuestionBankDeletedInput>
  }

  export type AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionBankInput, AnswerSubmissionUncheckedCreateWithoutQuestionBankInput> | AnswerSubmissionCreateWithoutQuestionBankInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionBankInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionBankInput | AnswerSubmissionCreateOrConnectWithoutQuestionBankInput[]
    upsert?: AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionBankInput | AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionBankInput[]
    createMany?: AnswerSubmissionCreateManyQuestionBankInputEnvelope
    set?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    disconnect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    delete?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    update?: AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionBankInput | AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionBankInput[]
    updateMany?: AnswerSubmissionUpdateManyWithWhereWithoutQuestionBankInput | AnswerSubmissionUpdateManyWithWhereWithoutQuestionBankInput[]
    deleteMany?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
  }

  export type AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionBankInput, AnswerSubmissionUncheckedCreateWithoutQuestionBankInput> | AnswerSubmissionCreateWithoutQuestionBankInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionBankInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionBankInput | AnswerSubmissionCreateOrConnectWithoutQuestionBankInput[]
    upsert?: AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionBankInput | AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionBankInput[]
    createMany?: AnswerSubmissionCreateManyQuestionBankInputEnvelope
    set?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    disconnect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    delete?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    update?: AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionBankInput | AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionBankInput[]
    updateMany?: AnswerSubmissionUpdateManyWithWhereWithoutQuestionBankInput | AnswerSubmissionUpdateManyWithWhereWithoutQuestionBankInput[]
    deleteMany?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
  }

  export type QuestionBankCreateNestedManyWithoutQuestionLevelInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionLevelInput, QuestionBankUncheckedCreateWithoutQuestionLevelInput> | QuestionBankCreateWithoutQuestionLevelInput[] | QuestionBankUncheckedCreateWithoutQuestionLevelInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionLevelInput | QuestionBankCreateOrConnectWithoutQuestionLevelInput[]
    createMany?: QuestionBankCreateManyQuestionLevelInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutQuestionLevelInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionLevelInput, QuestionBankUncheckedCreateWithoutQuestionLevelInput> | QuestionBankCreateWithoutQuestionLevelInput[] | QuestionBankUncheckedCreateWithoutQuestionLevelInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionLevelInput | QuestionBankCreateOrConnectWithoutQuestionLevelInput[]
    createMany?: QuestionBankCreateManyQuestionLevelInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankUpdateManyWithoutQuestionLevelNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionLevelInput, QuestionBankUncheckedCreateWithoutQuestionLevelInput> | QuestionBankCreateWithoutQuestionLevelInput[] | QuestionBankUncheckedCreateWithoutQuestionLevelInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionLevelInput | QuestionBankCreateOrConnectWithoutQuestionLevelInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutQuestionLevelInput | QuestionBankUpsertWithWhereUniqueWithoutQuestionLevelInput[]
    createMany?: QuestionBankCreateManyQuestionLevelInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutQuestionLevelInput | QuestionBankUpdateWithWhereUniqueWithoutQuestionLevelInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutQuestionLevelInput | QuestionBankUpdateManyWithWhereWithoutQuestionLevelInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutQuestionLevelNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionLevelInput, QuestionBankUncheckedCreateWithoutQuestionLevelInput> | QuestionBankCreateWithoutQuestionLevelInput[] | QuestionBankUncheckedCreateWithoutQuestionLevelInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionLevelInput | QuestionBankCreateOrConnectWithoutQuestionLevelInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutQuestionLevelInput | QuestionBankUpsertWithWhereUniqueWithoutQuestionLevelInput[]
    createMany?: QuestionBankCreateManyQuestionLevelInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutQuestionLevelInput | QuestionBankUpdateWithWhereUniqueWithoutQuestionLevelInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutQuestionLevelInput | QuestionBankUpdateManyWithWhereWithoutQuestionLevelInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutQuestionSetCourseIdInput = {
    create?: XOR<CourseCreateWithoutQuestionSetCourseIdInput, CourseUncheckedCreateWithoutQuestionSetCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutQuestionSetCourseIdInput
    connect?: CourseWhereUniqueInput
  }

  export type LessonCreateNestedOneWithoutQuestionSetLessonIdInput = {
    create?: XOR<LessonCreateWithoutQuestionSetLessonIdInput, LessonUncheckedCreateWithoutQuestionSetLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutQuestionSetLessonIdInput
    connect?: LessonWhereUniqueInput
  }

  export type TestTypeCreateNestedOneWithoutQuestionSetInput = {
    create?: XOR<TestTypeCreateWithoutQuestionSetInput, TestTypeUncheckedCreateWithoutQuestionSetInput>
    connectOrCreate?: TestTypeCreateOrConnectWithoutQuestionSetInput
    connect?: TestTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionSetCreatedInput = {
    create?: XOR<UserCreateWithoutQuestionSetCreatedInput, UserUncheckedCreateWithoutQuestionSetCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionSetCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionSetUpdatedInput = {
    create?: XOR<UserCreateWithoutQuestionSetUpdatedInput, UserUncheckedCreateWithoutQuestionSetUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionSetUpdatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuestionSetDeletedInput = {
    create?: XOR<UserCreateWithoutQuestionSetDeletedInput, UserUncheckedCreateWithoutQuestionSetDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionSetDeletedInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionBankCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionSetInput, QuestionBankUncheckedCreateWithoutQuestionSetInput> | QuestionBankCreateWithoutQuestionSetInput[] | QuestionBankUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionSetInput | QuestionBankCreateOrConnectWithoutQuestionSetInput[]
    createMany?: QuestionBankCreateManyQuestionSetInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type ScoreCriteriaCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<ScoreCriteriaCreateWithoutQuestionSetInput, ScoreCriteriaUncheckedCreateWithoutQuestionSetInput> | ScoreCriteriaCreateWithoutQuestionSetInput[] | ScoreCriteriaUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutQuestionSetInput | ScoreCriteriaCreateOrConnectWithoutQuestionSetInput[]
    createMany?: ScoreCriteriaCreateManyQuestionSetInputEnvelope
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
  }

  export type TestResultCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<TestResultCreateWithoutQuestionSetInput, TestResultUncheckedCreateWithoutQuestionSetInput> | TestResultCreateWithoutQuestionSetInput[] | TestResultUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutQuestionSetInput | TestResultCreateOrConnectWithoutQuestionSetInput[]
    createMany?: TestResultCreateManyQuestionSetInputEnvelope
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
  }

  export type AnswerSubmissionCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionSetInput, AnswerSubmissionUncheckedCreateWithoutQuestionSetInput> | AnswerSubmissionCreateWithoutQuestionSetInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionSetInput | AnswerSubmissionCreateOrConnectWithoutQuestionSetInput[]
    createMany?: AnswerSubmissionCreateManyQuestionSetInputEnvelope
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionSetInput, QuestionBankUncheckedCreateWithoutQuestionSetInput> | QuestionBankCreateWithoutQuestionSetInput[] | QuestionBankUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionSetInput | QuestionBankCreateOrConnectWithoutQuestionSetInput[]
    createMany?: QuestionBankCreateManyQuestionSetInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<ScoreCriteriaCreateWithoutQuestionSetInput, ScoreCriteriaUncheckedCreateWithoutQuestionSetInput> | ScoreCriteriaCreateWithoutQuestionSetInput[] | ScoreCriteriaUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutQuestionSetInput | ScoreCriteriaCreateOrConnectWithoutQuestionSetInput[]
    createMany?: ScoreCriteriaCreateManyQuestionSetInputEnvelope
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
  }

  export type TestResultUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<TestResultCreateWithoutQuestionSetInput, TestResultUncheckedCreateWithoutQuestionSetInput> | TestResultCreateWithoutQuestionSetInput[] | TestResultUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutQuestionSetInput | TestResultCreateOrConnectWithoutQuestionSetInput[]
    createMany?: TestResultCreateManyQuestionSetInputEnvelope
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
  }

  export type AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionSetInput, AnswerSubmissionUncheckedCreateWithoutQuestionSetInput> | AnswerSubmissionCreateWithoutQuestionSetInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionSetInput | AnswerSubmissionCreateOrConnectWithoutQuestionSetInput[]
    createMany?: AnswerSubmissionCreateManyQuestionSetInputEnvelope
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput = {
    create?: XOR<CourseCreateWithoutQuestionSetCourseIdInput, CourseUncheckedCreateWithoutQuestionSetCourseIdInput>
    connectOrCreate?: CourseCreateOrConnectWithoutQuestionSetCourseIdInput
    upsert?: CourseUpsertWithoutQuestionSetCourseIdInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutQuestionSetCourseIdInput, CourseUpdateWithoutQuestionSetCourseIdInput>, CourseUncheckedUpdateWithoutQuestionSetCourseIdInput>
  }

  export type LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput = {
    create?: XOR<LessonCreateWithoutQuestionSetLessonIdInput, LessonUncheckedCreateWithoutQuestionSetLessonIdInput>
    connectOrCreate?: LessonCreateOrConnectWithoutQuestionSetLessonIdInput
    upsert?: LessonUpsertWithoutQuestionSetLessonIdInput
    connect?: LessonWhereUniqueInput
    update?: XOR<XOR<LessonUpdateToOneWithWhereWithoutQuestionSetLessonIdInput, LessonUpdateWithoutQuestionSetLessonIdInput>, LessonUncheckedUpdateWithoutQuestionSetLessonIdInput>
  }

  export type TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput = {
    create?: XOR<TestTypeCreateWithoutQuestionSetInput, TestTypeUncheckedCreateWithoutQuestionSetInput>
    connectOrCreate?: TestTypeCreateOrConnectWithoutQuestionSetInput
    upsert?: TestTypeUpsertWithoutQuestionSetInput
    connect?: TestTypeWhereUniqueInput
    update?: XOR<XOR<TestTypeUpdateToOneWithWhereWithoutQuestionSetInput, TestTypeUpdateWithoutQuestionSetInput>, TestTypeUncheckedUpdateWithoutQuestionSetInput>
  }

  export type UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput = {
    create?: XOR<UserCreateWithoutQuestionSetCreatedInput, UserUncheckedCreateWithoutQuestionSetCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionSetCreatedInput
    upsert?: UserUpsertWithoutQuestionSetCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionSetCreatedInput, UserUpdateWithoutQuestionSetCreatedInput>, UserUncheckedUpdateWithoutQuestionSetCreatedInput>
  }

  export type UserUpdateOneWithoutQuestionSetUpdatedNestedInput = {
    create?: XOR<UserCreateWithoutQuestionSetUpdatedInput, UserUncheckedCreateWithoutQuestionSetUpdatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionSetUpdatedInput
    upsert?: UserUpsertWithoutQuestionSetUpdatedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionSetUpdatedInput, UserUpdateWithoutQuestionSetUpdatedInput>, UserUncheckedUpdateWithoutQuestionSetUpdatedInput>
  }

  export type UserUpdateOneWithoutQuestionSetDeletedNestedInput = {
    create?: XOR<UserCreateWithoutQuestionSetDeletedInput, UserUncheckedCreateWithoutQuestionSetDeletedInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuestionSetDeletedInput
    upsert?: UserUpsertWithoutQuestionSetDeletedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuestionSetDeletedInput, UserUpdateWithoutQuestionSetDeletedInput>, UserUncheckedUpdateWithoutQuestionSetDeletedInput>
  }

  export type QuestionBankUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionSetInput, QuestionBankUncheckedCreateWithoutQuestionSetInput> | QuestionBankCreateWithoutQuestionSetInput[] | QuestionBankUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionSetInput | QuestionBankCreateOrConnectWithoutQuestionSetInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutQuestionSetInput | QuestionBankUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: QuestionBankCreateManyQuestionSetInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutQuestionSetInput | QuestionBankUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutQuestionSetInput | QuestionBankUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<ScoreCriteriaCreateWithoutQuestionSetInput, ScoreCriteriaUncheckedCreateWithoutQuestionSetInput> | ScoreCriteriaCreateWithoutQuestionSetInput[] | ScoreCriteriaUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutQuestionSetInput | ScoreCriteriaCreateOrConnectWithoutQuestionSetInput[]
    upsert?: ScoreCriteriaUpsertWithWhereUniqueWithoutQuestionSetInput | ScoreCriteriaUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: ScoreCriteriaCreateManyQuestionSetInputEnvelope
    set?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    disconnect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    delete?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    update?: ScoreCriteriaUpdateWithWhereUniqueWithoutQuestionSetInput | ScoreCriteriaUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: ScoreCriteriaUpdateManyWithWhereWithoutQuestionSetInput | ScoreCriteriaUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: ScoreCriteriaScalarWhereInput | ScoreCriteriaScalarWhereInput[]
  }

  export type TestResultUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<TestResultCreateWithoutQuestionSetInput, TestResultUncheckedCreateWithoutQuestionSetInput> | TestResultCreateWithoutQuestionSetInput[] | TestResultUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutQuestionSetInput | TestResultCreateOrConnectWithoutQuestionSetInput[]
    upsert?: TestResultUpsertWithWhereUniqueWithoutQuestionSetInput | TestResultUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: TestResultCreateManyQuestionSetInputEnvelope
    set?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    disconnect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    delete?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    update?: TestResultUpdateWithWhereUniqueWithoutQuestionSetInput | TestResultUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: TestResultUpdateManyWithWhereWithoutQuestionSetInput | TestResultUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
  }

  export type AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionSetInput, AnswerSubmissionUncheckedCreateWithoutQuestionSetInput> | AnswerSubmissionCreateWithoutQuestionSetInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionSetInput | AnswerSubmissionCreateOrConnectWithoutQuestionSetInput[]
    upsert?: AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionSetInput | AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: AnswerSubmissionCreateManyQuestionSetInputEnvelope
    set?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    disconnect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    delete?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    update?: AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionSetInput | AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: AnswerSubmissionUpdateManyWithWhereWithoutQuestionSetInput | AnswerSubmissionUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionSetInput, QuestionBankUncheckedCreateWithoutQuestionSetInput> | QuestionBankCreateWithoutQuestionSetInput[] | QuestionBankUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionSetInput | QuestionBankCreateOrConnectWithoutQuestionSetInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutQuestionSetInput | QuestionBankUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: QuestionBankCreateManyQuestionSetInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutQuestionSetInput | QuestionBankUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutQuestionSetInput | QuestionBankUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<ScoreCriteriaCreateWithoutQuestionSetInput, ScoreCriteriaUncheckedCreateWithoutQuestionSetInput> | ScoreCriteriaCreateWithoutQuestionSetInput[] | ScoreCriteriaUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutQuestionSetInput | ScoreCriteriaCreateOrConnectWithoutQuestionSetInput[]
    upsert?: ScoreCriteriaUpsertWithWhereUniqueWithoutQuestionSetInput | ScoreCriteriaUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: ScoreCriteriaCreateManyQuestionSetInputEnvelope
    set?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    disconnect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    delete?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    update?: ScoreCriteriaUpdateWithWhereUniqueWithoutQuestionSetInput | ScoreCriteriaUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: ScoreCriteriaUpdateManyWithWhereWithoutQuestionSetInput | ScoreCriteriaUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: ScoreCriteriaScalarWhereInput | ScoreCriteriaScalarWhereInput[]
  }

  export type TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<TestResultCreateWithoutQuestionSetInput, TestResultUncheckedCreateWithoutQuestionSetInput> | TestResultCreateWithoutQuestionSetInput[] | TestResultUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutQuestionSetInput | TestResultCreateOrConnectWithoutQuestionSetInput[]
    upsert?: TestResultUpsertWithWhereUniqueWithoutQuestionSetInput | TestResultUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: TestResultCreateManyQuestionSetInputEnvelope
    set?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    disconnect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    delete?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    update?: TestResultUpdateWithWhereUniqueWithoutQuestionSetInput | TestResultUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: TestResultUpdateManyWithWhereWithoutQuestionSetInput | TestResultUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
  }

  export type AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput = {
    create?: XOR<AnswerSubmissionCreateWithoutQuestionSetInput, AnswerSubmissionUncheckedCreateWithoutQuestionSetInput> | AnswerSubmissionCreateWithoutQuestionSetInput[] | AnswerSubmissionUncheckedCreateWithoutQuestionSetInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutQuestionSetInput | AnswerSubmissionCreateOrConnectWithoutQuestionSetInput[]
    upsert?: AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionSetInput | AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionSetInput[]
    createMany?: AnswerSubmissionCreateManyQuestionSetInputEnvelope
    set?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    disconnect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    delete?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    update?: AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionSetInput | AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionSetInput[]
    updateMany?: AnswerSubmissionUpdateManyWithWhereWithoutQuestionSetInput | AnswerSubmissionUpdateManyWithWhereWithoutQuestionSetInput[]
    deleteMany?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
  }

  export type QuestionBankCreateNestedManyWithoutQuestionTypeInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionTypeInput, QuestionBankUncheckedCreateWithoutQuestionTypeInput> | QuestionBankCreateWithoutQuestionTypeInput[] | QuestionBankUncheckedCreateWithoutQuestionTypeInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionTypeInput | QuestionBankCreateOrConnectWithoutQuestionTypeInput[]
    createMany?: QuestionBankCreateManyQuestionTypeInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutQuestionTypeInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionTypeInput, QuestionBankUncheckedCreateWithoutQuestionTypeInput> | QuestionBankCreateWithoutQuestionTypeInput[] | QuestionBankUncheckedCreateWithoutQuestionTypeInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionTypeInput | QuestionBankCreateOrConnectWithoutQuestionTypeInput[]
    createMany?: QuestionBankCreateManyQuestionTypeInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankUpdateManyWithoutQuestionTypeNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionTypeInput, QuestionBankUncheckedCreateWithoutQuestionTypeInput> | QuestionBankCreateWithoutQuestionTypeInput[] | QuestionBankUncheckedCreateWithoutQuestionTypeInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionTypeInput | QuestionBankCreateOrConnectWithoutQuestionTypeInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutQuestionTypeInput | QuestionBankUpsertWithWhereUniqueWithoutQuestionTypeInput[]
    createMany?: QuestionBankCreateManyQuestionTypeInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutQuestionTypeInput | QuestionBankUpdateWithWhereUniqueWithoutQuestionTypeInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutQuestionTypeInput | QuestionBankUpdateManyWithWhereWithoutQuestionTypeInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutQuestionTypeNestedInput = {
    create?: XOR<QuestionBankCreateWithoutQuestionTypeInput, QuestionBankUncheckedCreateWithoutQuestionTypeInput> | QuestionBankCreateWithoutQuestionTypeInput[] | QuestionBankUncheckedCreateWithoutQuestionTypeInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutQuestionTypeInput | QuestionBankCreateOrConnectWithoutQuestionTypeInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutQuestionTypeInput | QuestionBankUpsertWithWhereUniqueWithoutQuestionTypeInput[]
    createMany?: QuestionBankCreateManyQuestionTypeInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutQuestionTypeInput | QuestionBankUpdateWithWhereUniqueWithoutQuestionTypeInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutQuestionTypeInput | QuestionBankUpdateManyWithWhereWithoutQuestionTypeInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type ScoreCriteriaCreateNestedManyWithoutResultLevelInput = {
    create?: XOR<ScoreCriteriaCreateWithoutResultLevelInput, ScoreCriteriaUncheckedCreateWithoutResultLevelInput> | ScoreCriteriaCreateWithoutResultLevelInput[] | ScoreCriteriaUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutResultLevelInput | ScoreCriteriaCreateOrConnectWithoutResultLevelInput[]
    createMany?: ScoreCriteriaCreateManyResultLevelInputEnvelope
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
  }

  export type TestResultCreateNestedManyWithoutResultLevelInput = {
    create?: XOR<TestResultCreateWithoutResultLevelInput, TestResultUncheckedCreateWithoutResultLevelInput> | TestResultCreateWithoutResultLevelInput[] | TestResultUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutResultLevelInput | TestResultCreateOrConnectWithoutResultLevelInput[]
    createMany?: TestResultCreateManyResultLevelInputEnvelope
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
  }

  export type ScoreCriteriaUncheckedCreateNestedManyWithoutResultLevelInput = {
    create?: XOR<ScoreCriteriaCreateWithoutResultLevelInput, ScoreCriteriaUncheckedCreateWithoutResultLevelInput> | ScoreCriteriaCreateWithoutResultLevelInput[] | ScoreCriteriaUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutResultLevelInput | ScoreCriteriaCreateOrConnectWithoutResultLevelInput[]
    createMany?: ScoreCriteriaCreateManyResultLevelInputEnvelope
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
  }

  export type TestResultUncheckedCreateNestedManyWithoutResultLevelInput = {
    create?: XOR<TestResultCreateWithoutResultLevelInput, TestResultUncheckedCreateWithoutResultLevelInput> | TestResultCreateWithoutResultLevelInput[] | TestResultUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutResultLevelInput | TestResultCreateOrConnectWithoutResultLevelInput[]
    createMany?: TestResultCreateManyResultLevelInputEnvelope
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
  }

  export type ScoreCriteriaUpdateManyWithoutResultLevelNestedInput = {
    create?: XOR<ScoreCriteriaCreateWithoutResultLevelInput, ScoreCriteriaUncheckedCreateWithoutResultLevelInput> | ScoreCriteriaCreateWithoutResultLevelInput[] | ScoreCriteriaUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutResultLevelInput | ScoreCriteriaCreateOrConnectWithoutResultLevelInput[]
    upsert?: ScoreCriteriaUpsertWithWhereUniqueWithoutResultLevelInput | ScoreCriteriaUpsertWithWhereUniqueWithoutResultLevelInput[]
    createMany?: ScoreCriteriaCreateManyResultLevelInputEnvelope
    set?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    disconnect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    delete?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    update?: ScoreCriteriaUpdateWithWhereUniqueWithoutResultLevelInput | ScoreCriteriaUpdateWithWhereUniqueWithoutResultLevelInput[]
    updateMany?: ScoreCriteriaUpdateManyWithWhereWithoutResultLevelInput | ScoreCriteriaUpdateManyWithWhereWithoutResultLevelInput[]
    deleteMany?: ScoreCriteriaScalarWhereInput | ScoreCriteriaScalarWhereInput[]
  }

  export type TestResultUpdateManyWithoutResultLevelNestedInput = {
    create?: XOR<TestResultCreateWithoutResultLevelInput, TestResultUncheckedCreateWithoutResultLevelInput> | TestResultCreateWithoutResultLevelInput[] | TestResultUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutResultLevelInput | TestResultCreateOrConnectWithoutResultLevelInput[]
    upsert?: TestResultUpsertWithWhereUniqueWithoutResultLevelInput | TestResultUpsertWithWhereUniqueWithoutResultLevelInput[]
    createMany?: TestResultCreateManyResultLevelInputEnvelope
    set?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    disconnect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    delete?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    update?: TestResultUpdateWithWhereUniqueWithoutResultLevelInput | TestResultUpdateWithWhereUniqueWithoutResultLevelInput[]
    updateMany?: TestResultUpdateManyWithWhereWithoutResultLevelInput | TestResultUpdateManyWithWhereWithoutResultLevelInput[]
    deleteMany?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
  }

  export type ScoreCriteriaUncheckedUpdateManyWithoutResultLevelNestedInput = {
    create?: XOR<ScoreCriteriaCreateWithoutResultLevelInput, ScoreCriteriaUncheckedCreateWithoutResultLevelInput> | ScoreCriteriaCreateWithoutResultLevelInput[] | ScoreCriteriaUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: ScoreCriteriaCreateOrConnectWithoutResultLevelInput | ScoreCriteriaCreateOrConnectWithoutResultLevelInput[]
    upsert?: ScoreCriteriaUpsertWithWhereUniqueWithoutResultLevelInput | ScoreCriteriaUpsertWithWhereUniqueWithoutResultLevelInput[]
    createMany?: ScoreCriteriaCreateManyResultLevelInputEnvelope
    set?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    disconnect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    delete?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    connect?: ScoreCriteriaWhereUniqueInput | ScoreCriteriaWhereUniqueInput[]
    update?: ScoreCriteriaUpdateWithWhereUniqueWithoutResultLevelInput | ScoreCriteriaUpdateWithWhereUniqueWithoutResultLevelInput[]
    updateMany?: ScoreCriteriaUpdateManyWithWhereWithoutResultLevelInput | ScoreCriteriaUpdateManyWithWhereWithoutResultLevelInput[]
    deleteMany?: ScoreCriteriaScalarWhereInput | ScoreCriteriaScalarWhereInput[]
  }

  export type TestResultUncheckedUpdateManyWithoutResultLevelNestedInput = {
    create?: XOR<TestResultCreateWithoutResultLevelInput, TestResultUncheckedCreateWithoutResultLevelInput> | TestResultCreateWithoutResultLevelInput[] | TestResultUncheckedCreateWithoutResultLevelInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutResultLevelInput | TestResultCreateOrConnectWithoutResultLevelInput[]
    upsert?: TestResultUpsertWithWhereUniqueWithoutResultLevelInput | TestResultUpsertWithWhereUniqueWithoutResultLevelInput[]
    createMany?: TestResultCreateManyResultLevelInputEnvelope
    set?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    disconnect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    delete?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    update?: TestResultUpdateWithWhereUniqueWithoutResultLevelInput | TestResultUpdateWithWhereUniqueWithoutResultLevelInput[]
    updateMany?: TestResultUpdateManyWithWhereWithoutResultLevelInput | TestResultUpdateManyWithWhereWithoutResultLevelInput[]
    deleteMany?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
  }

  export type QuestionSetCreateNestedOneWithoutScoreCriteriaInput = {
    create?: XOR<QuestionSetCreateWithoutScoreCriteriaInput, QuestionSetUncheckedCreateWithoutScoreCriteriaInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutScoreCriteriaInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type ResultLevelCreateNestedOneWithoutScoreCriteriaInput = {
    create?: XOR<ResultLevelCreateWithoutScoreCriteriaInput, ResultLevelUncheckedCreateWithoutScoreCriteriaInput>
    connectOrCreate?: ResultLevelCreateOrConnectWithoutScoreCriteriaInput
    connect?: ResultLevelWhereUniqueInput
  }

  export type QuestionSetUpdateOneRequiredWithoutScoreCriteriaNestedInput = {
    create?: XOR<QuestionSetCreateWithoutScoreCriteriaInput, QuestionSetUncheckedCreateWithoutScoreCriteriaInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutScoreCriteriaInput
    upsert?: QuestionSetUpsertWithoutScoreCriteriaInput
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutScoreCriteriaInput, QuestionSetUpdateWithoutScoreCriteriaInput>, QuestionSetUncheckedUpdateWithoutScoreCriteriaInput>
  }

  export type ResultLevelUpdateOneRequiredWithoutScoreCriteriaNestedInput = {
    create?: XOR<ResultLevelCreateWithoutScoreCriteriaInput, ResultLevelUncheckedCreateWithoutScoreCriteriaInput>
    connectOrCreate?: ResultLevelCreateOrConnectWithoutScoreCriteriaInput
    upsert?: ResultLevelUpsertWithoutScoreCriteriaInput
    connect?: ResultLevelWhereUniqueInput
    update?: XOR<XOR<ResultLevelUpdateToOneWithWhereWithoutScoreCriteriaInput, ResultLevelUpdateWithoutScoreCriteriaInput>, ResultLevelUncheckedUpdateWithoutScoreCriteriaInput>
  }

  export type UserCreateNestedOneWithoutTestResultUserInput = {
    create?: XOR<UserCreateWithoutTestResultUserInput, UserUncheckedCreateWithoutTestResultUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestResultUserInput
    connect?: UserWhereUniqueInput
  }

  export type QuestionSetCreateNestedOneWithoutTestResultInput = {
    create?: XOR<QuestionSetCreateWithoutTestResultInput, QuestionSetUncheckedCreateWithoutTestResultInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutTestResultInput
    connect?: QuestionSetWhereUniqueInput
  }

  export type ResultLevelCreateNestedOneWithoutTestResultInput = {
    create?: XOR<ResultLevelCreateWithoutTestResultInput, ResultLevelUncheckedCreateWithoutTestResultInput>
    connectOrCreate?: ResultLevelCreateOrConnectWithoutTestResultInput
    connect?: ResultLevelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTestResultUserNestedInput = {
    create?: XOR<UserCreateWithoutTestResultUserInput, UserUncheckedCreateWithoutTestResultUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestResultUserInput
    upsert?: UserUpsertWithoutTestResultUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTestResultUserInput, UserUpdateWithoutTestResultUserInput>, UserUncheckedUpdateWithoutTestResultUserInput>
  }

  export type QuestionSetUpdateOneRequiredWithoutTestResultNestedInput = {
    create?: XOR<QuestionSetCreateWithoutTestResultInput, QuestionSetUncheckedCreateWithoutTestResultInput>
    connectOrCreate?: QuestionSetCreateOrConnectWithoutTestResultInput
    upsert?: QuestionSetUpsertWithoutTestResultInput
    connect?: QuestionSetWhereUniqueInput
    update?: XOR<XOR<QuestionSetUpdateToOneWithWhereWithoutTestResultInput, QuestionSetUpdateWithoutTestResultInput>, QuestionSetUncheckedUpdateWithoutTestResultInput>
  }

  export type ResultLevelUpdateOneRequiredWithoutTestResultNestedInput = {
    create?: XOR<ResultLevelCreateWithoutTestResultInput, ResultLevelUncheckedCreateWithoutTestResultInput>
    connectOrCreate?: ResultLevelCreateOrConnectWithoutTestResultInput
    upsert?: ResultLevelUpsertWithoutTestResultInput
    connect?: ResultLevelWhereUniqueInput
    update?: XOR<XOR<ResultLevelUpdateToOneWithWhereWithoutTestResultInput, ResultLevelUpdateWithoutTestResultInput>, ResultLevelUncheckedUpdateWithoutTestResultInput>
  }

  export type QuestionSetCreateNestedManyWithoutTestTypeInput = {
    create?: XOR<QuestionSetCreateWithoutTestTypeInput, QuestionSetUncheckedCreateWithoutTestTypeInput> | QuestionSetCreateWithoutTestTypeInput[] | QuestionSetUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutTestTypeInput | QuestionSetCreateOrConnectWithoutTestTypeInput[]
    createMany?: QuestionSetCreateManyTestTypeInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutTestTypeInput = {
    create?: XOR<QuestionSetCreateWithoutTestTypeInput, QuestionSetUncheckedCreateWithoutTestTypeInput> | QuestionSetCreateWithoutTestTypeInput[] | QuestionSetUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutTestTypeInput | QuestionSetCreateOrConnectWithoutTestTypeInput[]
    createMany?: QuestionSetCreateManyTestTypeInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionSetUpdateManyWithoutTestTypeNestedInput = {
    create?: XOR<QuestionSetCreateWithoutTestTypeInput, QuestionSetUncheckedCreateWithoutTestTypeInput> | QuestionSetCreateWithoutTestTypeInput[] | QuestionSetUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutTestTypeInput | QuestionSetCreateOrConnectWithoutTestTypeInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutTestTypeInput | QuestionSetUpsertWithWhereUniqueWithoutTestTypeInput[]
    createMany?: QuestionSetCreateManyTestTypeInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutTestTypeInput | QuestionSetUpdateWithWhereUniqueWithoutTestTypeInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutTestTypeInput | QuestionSetUpdateManyWithWhereWithoutTestTypeInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutTestTypeNestedInput = {
    create?: XOR<QuestionSetCreateWithoutTestTypeInput, QuestionSetUncheckedCreateWithoutTestTypeInput> | QuestionSetCreateWithoutTestTypeInput[] | QuestionSetUncheckedCreateWithoutTestTypeInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutTestTypeInput | QuestionSetCreateOrConnectWithoutTestTypeInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutTestTypeInput | QuestionSetUpsertWithWhereUniqueWithoutTestTypeInput[]
    createMany?: QuestionSetCreateManyTestTypeInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutTestTypeInput | QuestionSetUpdateWithWhereUniqueWithoutTestTypeInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutTestTypeInput | QuestionSetUpdateManyWithWhereWithoutTestTypeInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutTitleInput = {
    create?: XOR<UserCreateWithoutTitleInput, UserUncheckedCreateWithoutTitleInput> | UserCreateWithoutTitleInput[] | UserUncheckedCreateWithoutTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTitleInput | UserCreateOrConnectWithoutTitleInput[]
    createMany?: UserCreateManyTitleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTitleInput = {
    create?: XOR<UserCreateWithoutTitleInput, UserUncheckedCreateWithoutTitleInput> | UserCreateWithoutTitleInput[] | UserUncheckedCreateWithoutTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTitleInput | UserCreateOrConnectWithoutTitleInput[]
    createMany?: UserCreateManyTitleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTitleNestedInput = {
    create?: XOR<UserCreateWithoutTitleInput, UserUncheckedCreateWithoutTitleInput> | UserCreateWithoutTitleInput[] | UserUncheckedCreateWithoutTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTitleInput | UserCreateOrConnectWithoutTitleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTitleInput | UserUpsertWithWhereUniqueWithoutTitleInput[]
    createMany?: UserCreateManyTitleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTitleInput | UserUpdateWithWhereUniqueWithoutTitleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTitleInput | UserUpdateManyWithWhereWithoutTitleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTitleNestedInput = {
    create?: XOR<UserCreateWithoutTitleInput, UserUncheckedCreateWithoutTitleInput> | UserCreateWithoutTitleInput[] | UserUncheckedCreateWithoutTitleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTitleInput | UserCreateOrConnectWithoutTitleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTitleInput | UserUpsertWithWhereUniqueWithoutTitleInput[]
    createMany?: UserCreateManyTitleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTitleInput | UserUpdateWithWhereUniqueWithoutTitleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTitleInput | UserUpdateManyWithWhereWithoutTitleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutUserRoleInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput> | UserCreateWithoutUserRoleInput[] | UserUncheckedCreateWithoutUserRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput | UserCreateOrConnectWithoutUserRoleInput[]
    createMany?: UserCreateManyUserRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUserRoleInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput> | UserCreateWithoutUserRoleInput[] | UserUncheckedCreateWithoutUserRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput | UserCreateOrConnectWithoutUserRoleInput[]
    createMany?: UserCreateManyUserRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutUserRoleNestedInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput> | UserCreateWithoutUserRoleInput[] | UserUncheckedCreateWithoutUserRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput | UserCreateOrConnectWithoutUserRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUserRoleInput | UserUpsertWithWhereUniqueWithoutUserRoleInput[]
    createMany?: UserCreateManyUserRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUserRoleInput | UserUpdateWithWhereUniqueWithoutUserRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUserRoleInput | UserUpdateManyWithWhereWithoutUserRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUserRoleNestedInput = {
    create?: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput> | UserCreateWithoutUserRoleInput[] | UserUncheckedCreateWithoutUserRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserRoleInput | UserCreateOrConnectWithoutUserRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUserRoleInput | UserUpsertWithWhereUniqueWithoutUserRoleInput[]
    createMany?: UserCreateManyUserRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUserRoleInput | UserUpdateWithWhereUniqueWithoutUserRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUserRoleInput | UserUpdateManyWithWhereWithoutUserRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserRoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<UserRoleCreateWithoutUsersInput, UserRoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUsersInput
    connect?: UserRoleWhereUniqueInput
  }

  export type TitleCreateNestedOneWithoutUsersInput = {
    create?: XOR<TitleCreateWithoutUsersInput, TitleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TitleCreateOrConnectWithoutUsersInput
    connect?: TitleWhereUniqueInput
  }

  export type AcademicTitleCreateNestedOneWithoutUsersInput = {
    create?: XOR<AcademicTitleCreateWithoutUsersInput, AcademicTitleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AcademicTitleCreateOrConnectWithoutUsersInput
    connect?: AcademicTitleWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type OrganizationCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<OrganizationCreateWithoutCreatedByUserInput, OrganizationUncheckedCreateWithoutCreatedByUserInput> | OrganizationCreateWithoutCreatedByUserInput[] | OrganizationUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutCreatedByUserInput | OrganizationCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: OrganizationCreateManyCreatedByUserInputEnvelope
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
  }

  export type OrganizationCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<OrganizationCreateWithoutUpdatedByUserInput, OrganizationUncheckedCreateWithoutUpdatedByUserInput> | OrganizationCreateWithoutUpdatedByUserInput[] | OrganizationUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutUpdatedByUserInput | OrganizationCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: OrganizationCreateManyUpdatedByUserInputEnvelope
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
  }

  export type OrganizationCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<OrganizationCreateWithoutDeletedByUserInput, OrganizationUncheckedCreateWithoutDeletedByUserInput> | OrganizationCreateWithoutDeletedByUserInput[] | OrganizationUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutDeletedByUserInput | OrganizationCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: OrganizationCreateManyDeletedByUserInputEnvelope
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<CategoryCreateWithoutCreatedByUserInput, CategoryUncheckedCreateWithoutCreatedByUserInput> | CategoryCreateWithoutCreatedByUserInput[] | CategoryUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByUserInput | CategoryCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: CategoryCreateManyCreatedByUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByUserInput, CategoryUncheckedCreateWithoutUpdatedByUserInput> | CategoryCreateWithoutUpdatedByUserInput[] | CategoryUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByUserInput | CategoryCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: CategoryCreateManyUpdatedByUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<CategoryCreateWithoutDeletedByUserInput, CategoryUncheckedCreateWithoutDeletedByUserInput> | CategoryCreateWithoutDeletedByUserInput[] | CategoryUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutDeletedByUserInput | CategoryCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: CategoryCreateManyDeletedByUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<CourseCreateWithoutCreatedByUserInput, CourseUncheckedCreateWithoutCreatedByUserInput> | CourseCreateWithoutCreatedByUserInput[] | CourseUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByUserInput | CourseCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: CourseCreateManyCreatedByUserInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<CourseCreateWithoutUpdatedByUserInput, CourseUncheckedCreateWithoutUpdatedByUserInput> | CourseCreateWithoutUpdatedByUserInput[] | CourseUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByUserInput | CourseCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: CourseCreateManyUpdatedByUserInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<CourseCreateWithoutDeletedByUserInput, CourseUncheckedCreateWithoutDeletedByUserInput> | CourseCreateWithoutDeletedByUserInput[] | CourseUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDeletedByUserInput | CourseCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: CourseCreateManyDeletedByUserInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseInstructorCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<CourseInstructorCreateWithoutUpdatedByUserInput, CourseInstructorUncheckedCreateWithoutUpdatedByUserInput> | CourseInstructorCreateWithoutUpdatedByUserInput[] | CourseInstructorUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUpdatedByUserInput | CourseInstructorCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: CourseInstructorCreateManyUpdatedByUserInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseInstructorCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<CourseInstructorCreateWithoutDeletedByUserInput, CourseInstructorUncheckedCreateWithoutDeletedByUserInput> | CourseInstructorCreateWithoutDeletedByUserInput[] | CourseInstructorUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutDeletedByUserInput | CourseInstructorCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: CourseInstructorCreateManyDeletedByUserInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseInstructorCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseInstructorCreateWithoutUserInput, CourseInstructorUncheckedCreateWithoutUserInput> | CourseInstructorCreateWithoutUserInput[] | CourseInstructorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUserInput | CourseInstructorCreateOrConnectWithoutUserInput[]
    createMany?: CourseInstructorCreateManyUserInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseCompletionCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseCompletionCreateWithoutUserInput, CourseCompletionUncheckedCreateWithoutUserInput> | CourseCompletionCreateWithoutUserInput[] | CourseCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutUserInput | CourseCompletionCreateOrConnectWithoutUserInput[]
    createMany?: CourseCompletionCreateManyUserInputEnvelope
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
  }

  export type LessonCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<LessonCreateWithoutCreatedByUserInput, LessonUncheckedCreateWithoutCreatedByUserInput> | LessonCreateWithoutCreatedByUserInput[] | LessonUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCreatedByUserInput | LessonCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: LessonCreateManyCreatedByUserInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<LessonCreateWithoutUpdatedByUserInput, LessonUncheckedCreateWithoutUpdatedByUserInput> | LessonCreateWithoutUpdatedByUserInput[] | LessonUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutUpdatedByUserInput | LessonCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: LessonCreateManyUpdatedByUserInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<LessonCreateWithoutDeletedByUserInput, LessonUncheckedCreateWithoutDeletedByUserInput> | LessonCreateWithoutDeletedByUserInput[] | LessonUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutDeletedByUserInput | LessonCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: LessonCreateManyDeletedByUserInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonContentCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<LessonContentCreateWithoutUpdatedByUserInput, LessonContentUncheckedCreateWithoutUpdatedByUserInput> | LessonContentCreateWithoutUpdatedByUserInput[] | LessonContentUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutUpdatedByUserInput | LessonContentCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: LessonContentCreateManyUpdatedByUserInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonContentCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<LessonContentCreateWithoutDeletedByUserInput, LessonContentUncheckedCreateWithoutDeletedByUserInput> | LessonContentCreateWithoutDeletedByUserInput[] | LessonContentUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutDeletedByUserInput | LessonContentCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: LessonContentCreateManyDeletedByUserInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonViewCreateNestedManyWithoutUsersInput = {
    create?: XOR<LessonViewCreateWithoutUsersInput, LessonViewUncheckedCreateWithoutUsersInput> | LessonViewCreateWithoutUsersInput[] | LessonViewUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutUsersInput | LessonViewCreateOrConnectWithoutUsersInput[]
    createMany?: LessonViewCreateManyUsersInputEnvelope
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
  }

  export type LessonAttemptCreateNestedManyWithoutUsersInput = {
    create?: XOR<LessonAttemptCreateWithoutUsersInput, LessonAttemptUncheckedCreateWithoutUsersInput> | LessonAttemptCreateWithoutUsersInput[] | LessonAttemptUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutUsersInput | LessonAttemptCreateOrConnectWithoutUsersInput[]
    createMany?: LessonAttemptCreateManyUsersInputEnvelope
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<QuestionSetCreateWithoutCreatedByUserInput, QuestionSetUncheckedCreateWithoutCreatedByUserInput> | QuestionSetCreateWithoutCreatedByUserInput[] | QuestionSetUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCreatedByUserInput | QuestionSetCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: QuestionSetCreateManyCreatedByUserInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<QuestionSetCreateWithoutUpdatedByUserInput, QuestionSetUncheckedCreateWithoutUpdatedByUserInput> | QuestionSetCreateWithoutUpdatedByUserInput[] | QuestionSetUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutUpdatedByUserInput | QuestionSetCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: QuestionSetCreateManyUpdatedByUserInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<QuestionSetCreateWithoutDeletedByUserInput, QuestionSetUncheckedCreateWithoutDeletedByUserInput> | QuestionSetCreateWithoutDeletedByUserInput[] | QuestionSetUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutDeletedByUserInput | QuestionSetCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: QuestionSetCreateManyDeletedByUserInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionBankCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<QuestionBankCreateWithoutCreatedByUserInput, QuestionBankUncheckedCreateWithoutCreatedByUserInput> | QuestionBankCreateWithoutCreatedByUserInput[] | QuestionBankUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutCreatedByUserInput | QuestionBankCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: QuestionBankCreateManyCreatedByUserInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<QuestionBankCreateWithoutUpdatedByUserInput, QuestionBankUncheckedCreateWithoutUpdatedByUserInput> | QuestionBankCreateWithoutUpdatedByUserInput[] | QuestionBankUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutUpdatedByUserInput | QuestionBankCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: QuestionBankCreateManyUpdatedByUserInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<QuestionBankCreateWithoutDeletedByUserInput, QuestionBankUncheckedCreateWithoutDeletedByUserInput> | QuestionBankCreateWithoutDeletedByUserInput[] | QuestionBankUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutDeletedByUserInput | QuestionBankCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: QuestionBankCreateManyDeletedByUserInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type TestResultCreateNestedManyWithoutUserInput = {
    create?: XOR<TestResultCreateWithoutUserInput, TestResultUncheckedCreateWithoutUserInput> | TestResultCreateWithoutUserInput[] | TestResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutUserInput | TestResultCreateOrConnectWithoutUserInput[]
    createMany?: TestResultCreateManyUserInputEnvelope
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
  }

  export type AnswerSubmissionCreateNestedManyWithoutUserInput = {
    create?: XOR<AnswerSubmissionCreateWithoutUserInput, AnswerSubmissionUncheckedCreateWithoutUserInput> | AnswerSubmissionCreateWithoutUserInput[] | AnswerSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutUserInput | AnswerSubmissionCreateOrConnectWithoutUserInput[]
    createMany?: AnswerSubmissionCreateManyUserInputEnvelope
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
  }

  export type OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<OrganizationCreateWithoutCreatedByUserInput, OrganizationUncheckedCreateWithoutCreatedByUserInput> | OrganizationCreateWithoutCreatedByUserInput[] | OrganizationUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutCreatedByUserInput | OrganizationCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: OrganizationCreateManyCreatedByUserInputEnvelope
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
  }

  export type OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<OrganizationCreateWithoutUpdatedByUserInput, OrganizationUncheckedCreateWithoutUpdatedByUserInput> | OrganizationCreateWithoutUpdatedByUserInput[] | OrganizationUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutUpdatedByUserInput | OrganizationCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: OrganizationCreateManyUpdatedByUserInputEnvelope
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
  }

  export type OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<OrganizationCreateWithoutDeletedByUserInput, OrganizationUncheckedCreateWithoutDeletedByUserInput> | OrganizationCreateWithoutDeletedByUserInput[] | OrganizationUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutDeletedByUserInput | OrganizationCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: OrganizationCreateManyDeletedByUserInputEnvelope
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<CategoryCreateWithoutCreatedByUserInput, CategoryUncheckedCreateWithoutCreatedByUserInput> | CategoryCreateWithoutCreatedByUserInput[] | CategoryUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByUserInput | CategoryCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: CategoryCreateManyCreatedByUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByUserInput, CategoryUncheckedCreateWithoutUpdatedByUserInput> | CategoryCreateWithoutUpdatedByUserInput[] | CategoryUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByUserInput | CategoryCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: CategoryCreateManyUpdatedByUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<CategoryCreateWithoutDeletedByUserInput, CategoryUncheckedCreateWithoutDeletedByUserInput> | CategoryCreateWithoutDeletedByUserInput[] | CategoryUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutDeletedByUserInput | CategoryCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: CategoryCreateManyDeletedByUserInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<CourseCreateWithoutCreatedByUserInput, CourseUncheckedCreateWithoutCreatedByUserInput> | CourseCreateWithoutCreatedByUserInput[] | CourseUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByUserInput | CourseCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: CourseCreateManyCreatedByUserInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<CourseCreateWithoutUpdatedByUserInput, CourseUncheckedCreateWithoutUpdatedByUserInput> | CourseCreateWithoutUpdatedByUserInput[] | CourseUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByUserInput | CourseCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: CourseCreateManyUpdatedByUserInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<CourseCreateWithoutDeletedByUserInput, CourseUncheckedCreateWithoutDeletedByUserInput> | CourseCreateWithoutDeletedByUserInput[] | CourseUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDeletedByUserInput | CourseCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: CourseCreateManyDeletedByUserInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<CourseInstructorCreateWithoutUpdatedByUserInput, CourseInstructorUncheckedCreateWithoutUpdatedByUserInput> | CourseInstructorCreateWithoutUpdatedByUserInput[] | CourseInstructorUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUpdatedByUserInput | CourseInstructorCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: CourseInstructorCreateManyUpdatedByUserInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<CourseInstructorCreateWithoutDeletedByUserInput, CourseInstructorUncheckedCreateWithoutDeletedByUserInput> | CourseInstructorCreateWithoutDeletedByUserInput[] | CourseInstructorUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutDeletedByUserInput | CourseInstructorCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: CourseInstructorCreateManyDeletedByUserInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseInstructorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseInstructorCreateWithoutUserInput, CourseInstructorUncheckedCreateWithoutUserInput> | CourseInstructorCreateWithoutUserInput[] | CourseInstructorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUserInput | CourseInstructorCreateOrConnectWithoutUserInput[]
    createMany?: CourseInstructorCreateManyUserInputEnvelope
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
  }

  export type CourseCompletionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseCompletionCreateWithoutUserInput, CourseCompletionUncheckedCreateWithoutUserInput> | CourseCompletionCreateWithoutUserInput[] | CourseCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutUserInput | CourseCompletionCreateOrConnectWithoutUserInput[]
    createMany?: CourseCompletionCreateManyUserInputEnvelope
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<LessonCreateWithoutCreatedByUserInput, LessonUncheckedCreateWithoutCreatedByUserInput> | LessonCreateWithoutCreatedByUserInput[] | LessonUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCreatedByUserInput | LessonCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: LessonCreateManyCreatedByUserInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<LessonCreateWithoutUpdatedByUserInput, LessonUncheckedCreateWithoutUpdatedByUserInput> | LessonCreateWithoutUpdatedByUserInput[] | LessonUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutUpdatedByUserInput | LessonCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: LessonCreateManyUpdatedByUserInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<LessonCreateWithoutDeletedByUserInput, LessonUncheckedCreateWithoutDeletedByUserInput> | LessonCreateWithoutDeletedByUserInput[] | LessonUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutDeletedByUserInput | LessonCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: LessonCreateManyDeletedByUserInputEnvelope
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
  }

  export type LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<LessonContentCreateWithoutUpdatedByUserInput, LessonContentUncheckedCreateWithoutUpdatedByUserInput> | LessonContentCreateWithoutUpdatedByUserInput[] | LessonContentUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutUpdatedByUserInput | LessonContentCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: LessonContentCreateManyUpdatedByUserInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<LessonContentCreateWithoutDeletedByUserInput, LessonContentUncheckedCreateWithoutDeletedByUserInput> | LessonContentCreateWithoutDeletedByUserInput[] | LessonContentUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutDeletedByUserInput | LessonContentCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: LessonContentCreateManyDeletedByUserInputEnvelope
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
  }

  export type LessonViewUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<LessonViewCreateWithoutUsersInput, LessonViewUncheckedCreateWithoutUsersInput> | LessonViewCreateWithoutUsersInput[] | LessonViewUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutUsersInput | LessonViewCreateOrConnectWithoutUsersInput[]
    createMany?: LessonViewCreateManyUsersInputEnvelope
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
  }

  export type LessonAttemptUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<LessonAttemptCreateWithoutUsersInput, LessonAttemptUncheckedCreateWithoutUsersInput> | LessonAttemptCreateWithoutUsersInput[] | LessonAttemptUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutUsersInput | LessonAttemptCreateOrConnectWithoutUsersInput[]
    createMany?: LessonAttemptCreateManyUsersInputEnvelope
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<QuestionSetCreateWithoutCreatedByUserInput, QuestionSetUncheckedCreateWithoutCreatedByUserInput> | QuestionSetCreateWithoutCreatedByUserInput[] | QuestionSetUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCreatedByUserInput | QuestionSetCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: QuestionSetCreateManyCreatedByUserInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<QuestionSetCreateWithoutUpdatedByUserInput, QuestionSetUncheckedCreateWithoutUpdatedByUserInput> | QuestionSetCreateWithoutUpdatedByUserInput[] | QuestionSetUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutUpdatedByUserInput | QuestionSetCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: QuestionSetCreateManyUpdatedByUserInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<QuestionSetCreateWithoutDeletedByUserInput, QuestionSetUncheckedCreateWithoutDeletedByUserInput> | QuestionSetCreateWithoutDeletedByUserInput[] | QuestionSetUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutDeletedByUserInput | QuestionSetCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: QuestionSetCreateManyDeletedByUserInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<QuestionBankCreateWithoutCreatedByUserInput, QuestionBankUncheckedCreateWithoutCreatedByUserInput> | QuestionBankCreateWithoutCreatedByUserInput[] | QuestionBankUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutCreatedByUserInput | QuestionBankCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: QuestionBankCreateManyCreatedByUserInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<QuestionBankCreateWithoutUpdatedByUserInput, QuestionBankUncheckedCreateWithoutUpdatedByUserInput> | QuestionBankCreateWithoutUpdatedByUserInput[] | QuestionBankUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutUpdatedByUserInput | QuestionBankCreateOrConnectWithoutUpdatedByUserInput[]
    createMany?: QuestionBankCreateManyUpdatedByUserInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput = {
    create?: XOR<QuestionBankCreateWithoutDeletedByUserInput, QuestionBankUncheckedCreateWithoutDeletedByUserInput> | QuestionBankCreateWithoutDeletedByUserInput[] | QuestionBankUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutDeletedByUserInput | QuestionBankCreateOrConnectWithoutDeletedByUserInput[]
    createMany?: QuestionBankCreateManyDeletedByUserInputEnvelope
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
  }

  export type TestResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TestResultCreateWithoutUserInput, TestResultUncheckedCreateWithoutUserInput> | TestResultCreateWithoutUserInput[] | TestResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutUserInput | TestResultCreateOrConnectWithoutUserInput[]
    createMany?: TestResultCreateManyUserInputEnvelope
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
  }

  export type AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnswerSubmissionCreateWithoutUserInput, AnswerSubmissionUncheckedCreateWithoutUserInput> | AnswerSubmissionCreateWithoutUserInput[] | AnswerSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutUserInput | AnswerSubmissionCreateOrConnectWithoutUserInput[]
    createMany?: AnswerSubmissionCreateManyUserInputEnvelope
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
  }

  export type UserRoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<UserRoleCreateWithoutUsersInput, UserRoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUsersInput
    upsert?: UserRoleUpsertWithoutUsersInput
    connect?: UserRoleWhereUniqueInput
    update?: XOR<XOR<UserRoleUpdateToOneWithWhereWithoutUsersInput, UserRoleUpdateWithoutUsersInput>, UserRoleUncheckedUpdateWithoutUsersInput>
  }

  export type TitleUpdateOneWithoutUsersNestedInput = {
    create?: XOR<TitleCreateWithoutUsersInput, TitleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TitleCreateOrConnectWithoutUsersInput
    upsert?: TitleUpsertWithoutUsersInput
    disconnect?: TitleWhereInput | boolean
    delete?: TitleWhereInput | boolean
    connect?: TitleWhereUniqueInput
    update?: XOR<XOR<TitleUpdateToOneWithWhereWithoutUsersInput, TitleUpdateWithoutUsersInput>, TitleUncheckedUpdateWithoutUsersInput>
  }

  export type AcademicTitleUpdateOneWithoutUsersNestedInput = {
    create?: XOR<AcademicTitleCreateWithoutUsersInput, AcademicTitleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AcademicTitleCreateOrConnectWithoutUsersInput
    upsert?: AcademicTitleUpsertWithoutUsersInput
    disconnect?: AcademicTitleWhereInput | boolean
    delete?: AcademicTitleWhereInput | boolean
    connect?: AcademicTitleWhereUniqueInput
    update?: XOR<XOR<AcademicTitleUpdateToOneWithWhereWithoutUsersInput, AcademicTitleUpdateWithoutUsersInput>, AcademicTitleUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<OrganizationCreateWithoutCreatedByUserInput, OrganizationUncheckedCreateWithoutCreatedByUserInput> | OrganizationCreateWithoutCreatedByUserInput[] | OrganizationUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutCreatedByUserInput | OrganizationCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: OrganizationUpsertWithWhereUniqueWithoutCreatedByUserInput | OrganizationUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: OrganizationCreateManyCreatedByUserInputEnvelope
    set?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    disconnect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    delete?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    update?: OrganizationUpdateWithWhereUniqueWithoutCreatedByUserInput | OrganizationUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: OrganizationUpdateManyWithWhereWithoutCreatedByUserInput | OrganizationUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
  }

  export type OrganizationUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<OrganizationCreateWithoutUpdatedByUserInput, OrganizationUncheckedCreateWithoutUpdatedByUserInput> | OrganizationCreateWithoutUpdatedByUserInput[] | OrganizationUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutUpdatedByUserInput | OrganizationCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: OrganizationUpsertWithWhereUniqueWithoutUpdatedByUserInput | OrganizationUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: OrganizationCreateManyUpdatedByUserInputEnvelope
    set?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    disconnect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    delete?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    update?: OrganizationUpdateWithWhereUniqueWithoutUpdatedByUserInput | OrganizationUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: OrganizationUpdateManyWithWhereWithoutUpdatedByUserInput | OrganizationUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
  }

  export type OrganizationUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<OrganizationCreateWithoutDeletedByUserInput, OrganizationUncheckedCreateWithoutDeletedByUserInput> | OrganizationCreateWithoutDeletedByUserInput[] | OrganizationUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutDeletedByUserInput | OrganizationCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: OrganizationUpsertWithWhereUniqueWithoutDeletedByUserInput | OrganizationUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: OrganizationCreateManyDeletedByUserInputEnvelope
    set?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    disconnect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    delete?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    update?: OrganizationUpdateWithWhereUniqueWithoutDeletedByUserInput | OrganizationUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: OrganizationUpdateManyWithWhereWithoutDeletedByUserInput | OrganizationUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedByUserInput, CategoryUncheckedCreateWithoutCreatedByUserInput> | CategoryCreateWithoutCreatedByUserInput[] | CategoryUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByUserInput | CategoryCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedByUserInput | CategoryUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: CategoryCreateManyCreatedByUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedByUserInput | CategoryUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedByUserInput | CategoryUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByUserInput, CategoryUncheckedCreateWithoutUpdatedByUserInput> | CategoryCreateWithoutUpdatedByUserInput[] | CategoryUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByUserInput | CategoryCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUpdatedByUserInput | CategoryUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: CategoryCreateManyUpdatedByUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUpdatedByUserInput | CategoryUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUpdatedByUserInput | CategoryUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<CategoryCreateWithoutDeletedByUserInput, CategoryUncheckedCreateWithoutDeletedByUserInput> | CategoryCreateWithoutDeletedByUserInput[] | CategoryUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutDeletedByUserInput | CategoryCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutDeletedByUserInput | CategoryUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: CategoryCreateManyDeletedByUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutDeletedByUserInput | CategoryUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutDeletedByUserInput | CategoryUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<CourseCreateWithoutCreatedByUserInput, CourseUncheckedCreateWithoutCreatedByUserInput> | CourseCreateWithoutCreatedByUserInput[] | CourseUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByUserInput | CourseCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatedByUserInput | CourseUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: CourseCreateManyCreatedByUserInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatedByUserInput | CourseUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatedByUserInput | CourseUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<CourseCreateWithoutUpdatedByUserInput, CourseUncheckedCreateWithoutUpdatedByUserInput> | CourseCreateWithoutUpdatedByUserInput[] | CourseUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByUserInput | CourseCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutUpdatedByUserInput | CourseUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: CourseCreateManyUpdatedByUserInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutUpdatedByUserInput | CourseUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutUpdatedByUserInput | CourseUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<CourseCreateWithoutDeletedByUserInput, CourseUncheckedCreateWithoutDeletedByUserInput> | CourseCreateWithoutDeletedByUserInput[] | CourseUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDeletedByUserInput | CourseCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDeletedByUserInput | CourseUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: CourseCreateManyDeletedByUserInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDeletedByUserInput | CourseUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDeletedByUserInput | CourseUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutUpdatedByUserInput, CourseInstructorUncheckedCreateWithoutUpdatedByUserInput> | CourseInstructorCreateWithoutUpdatedByUserInput[] | CourseInstructorUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUpdatedByUserInput | CourseInstructorCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutUpdatedByUserInput | CourseInstructorUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: CourseInstructorCreateManyUpdatedByUserInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutUpdatedByUserInput | CourseInstructorUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutUpdatedByUserInput | CourseInstructorUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseInstructorUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutDeletedByUserInput, CourseInstructorUncheckedCreateWithoutDeletedByUserInput> | CourseInstructorCreateWithoutDeletedByUserInput[] | CourseInstructorUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutDeletedByUserInput | CourseInstructorCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutDeletedByUserInput | CourseInstructorUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: CourseInstructorCreateManyDeletedByUserInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutDeletedByUserInput | CourseInstructorUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutDeletedByUserInput | CourseInstructorUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseInstructorUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutUserInput, CourseInstructorUncheckedCreateWithoutUserInput> | CourseInstructorCreateWithoutUserInput[] | CourseInstructorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUserInput | CourseInstructorCreateOrConnectWithoutUserInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutUserInput | CourseInstructorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseInstructorCreateManyUserInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutUserInput | CourseInstructorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutUserInput | CourseInstructorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseCompletionUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseCompletionCreateWithoutUserInput, CourseCompletionUncheckedCreateWithoutUserInput> | CourseCompletionCreateWithoutUserInput[] | CourseCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutUserInput | CourseCompletionCreateOrConnectWithoutUserInput[]
    upsert?: CourseCompletionUpsertWithWhereUniqueWithoutUserInput | CourseCompletionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseCompletionCreateManyUserInputEnvelope
    set?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    disconnect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    delete?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    update?: CourseCompletionUpdateWithWhereUniqueWithoutUserInput | CourseCompletionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseCompletionUpdateManyWithWhereWithoutUserInput | CourseCompletionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseCompletionScalarWhereInput | CourseCompletionScalarWhereInput[]
  }

  export type LessonUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<LessonCreateWithoutCreatedByUserInput, LessonUncheckedCreateWithoutCreatedByUserInput> | LessonCreateWithoutCreatedByUserInput[] | LessonUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCreatedByUserInput | LessonCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutCreatedByUserInput | LessonUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: LessonCreateManyCreatedByUserInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutCreatedByUserInput | LessonUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutCreatedByUserInput | LessonUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<LessonCreateWithoutUpdatedByUserInput, LessonUncheckedCreateWithoutUpdatedByUserInput> | LessonCreateWithoutUpdatedByUserInput[] | LessonUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutUpdatedByUserInput | LessonCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutUpdatedByUserInput | LessonUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: LessonCreateManyUpdatedByUserInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutUpdatedByUserInput | LessonUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutUpdatedByUserInput | LessonUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<LessonCreateWithoutDeletedByUserInput, LessonUncheckedCreateWithoutDeletedByUserInput> | LessonCreateWithoutDeletedByUserInput[] | LessonUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutDeletedByUserInput | LessonCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutDeletedByUserInput | LessonUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: LessonCreateManyDeletedByUserInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutDeletedByUserInput | LessonUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutDeletedByUserInput | LessonUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonContentUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<LessonContentCreateWithoutUpdatedByUserInput, LessonContentUncheckedCreateWithoutUpdatedByUserInput> | LessonContentCreateWithoutUpdatedByUserInput[] | LessonContentUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutUpdatedByUserInput | LessonContentCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutUpdatedByUserInput | LessonContentUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: LessonContentCreateManyUpdatedByUserInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutUpdatedByUserInput | LessonContentUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutUpdatedByUserInput | LessonContentUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonContentUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<LessonContentCreateWithoutDeletedByUserInput, LessonContentUncheckedCreateWithoutDeletedByUserInput> | LessonContentCreateWithoutDeletedByUserInput[] | LessonContentUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutDeletedByUserInput | LessonContentCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutDeletedByUserInput | LessonContentUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: LessonContentCreateManyDeletedByUserInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutDeletedByUserInput | LessonContentUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutDeletedByUserInput | LessonContentUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonViewUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LessonViewCreateWithoutUsersInput, LessonViewUncheckedCreateWithoutUsersInput> | LessonViewCreateWithoutUsersInput[] | LessonViewUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutUsersInput | LessonViewCreateOrConnectWithoutUsersInput[]
    upsert?: LessonViewUpsertWithWhereUniqueWithoutUsersInput | LessonViewUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LessonViewCreateManyUsersInputEnvelope
    set?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    disconnect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    delete?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    update?: LessonViewUpdateWithWhereUniqueWithoutUsersInput | LessonViewUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LessonViewUpdateManyWithWhereWithoutUsersInput | LessonViewUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LessonViewScalarWhereInput | LessonViewScalarWhereInput[]
  }

  export type LessonAttemptUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LessonAttemptCreateWithoutUsersInput, LessonAttemptUncheckedCreateWithoutUsersInput> | LessonAttemptCreateWithoutUsersInput[] | LessonAttemptUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutUsersInput | LessonAttemptCreateOrConnectWithoutUsersInput[]
    upsert?: LessonAttemptUpsertWithWhereUniqueWithoutUsersInput | LessonAttemptUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LessonAttemptCreateManyUsersInputEnvelope
    set?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    disconnect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    delete?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    update?: LessonAttemptUpdateWithWhereUniqueWithoutUsersInput | LessonAttemptUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LessonAttemptUpdateManyWithWhereWithoutUsersInput | LessonAttemptUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LessonAttemptScalarWhereInput | LessonAttemptScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<QuestionSetCreateWithoutCreatedByUserInput, QuestionSetUncheckedCreateWithoutCreatedByUserInput> | QuestionSetCreateWithoutCreatedByUserInput[] | QuestionSetUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCreatedByUserInput | QuestionSetCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutCreatedByUserInput | QuestionSetUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: QuestionSetCreateManyCreatedByUserInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutCreatedByUserInput | QuestionSetUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutCreatedByUserInput | QuestionSetUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<QuestionSetCreateWithoutUpdatedByUserInput, QuestionSetUncheckedCreateWithoutUpdatedByUserInput> | QuestionSetCreateWithoutUpdatedByUserInput[] | QuestionSetUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutUpdatedByUserInput | QuestionSetCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutUpdatedByUserInput | QuestionSetUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: QuestionSetCreateManyUpdatedByUserInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutUpdatedByUserInput | QuestionSetUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutUpdatedByUserInput | QuestionSetUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<QuestionSetCreateWithoutDeletedByUserInput, QuestionSetUncheckedCreateWithoutDeletedByUserInput> | QuestionSetCreateWithoutDeletedByUserInput[] | QuestionSetUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutDeletedByUserInput | QuestionSetCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutDeletedByUserInput | QuestionSetUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: QuestionSetCreateManyDeletedByUserInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutDeletedByUserInput | QuestionSetUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutDeletedByUserInput | QuestionSetUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionBankUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<QuestionBankCreateWithoutCreatedByUserInput, QuestionBankUncheckedCreateWithoutCreatedByUserInput> | QuestionBankCreateWithoutCreatedByUserInput[] | QuestionBankUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutCreatedByUserInput | QuestionBankCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutCreatedByUserInput | QuestionBankUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: QuestionBankCreateManyCreatedByUserInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutCreatedByUserInput | QuestionBankUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutCreatedByUserInput | QuestionBankUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuestionBankUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<QuestionBankCreateWithoutUpdatedByUserInput, QuestionBankUncheckedCreateWithoutUpdatedByUserInput> | QuestionBankCreateWithoutUpdatedByUserInput[] | QuestionBankUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutUpdatedByUserInput | QuestionBankCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutUpdatedByUserInput | QuestionBankUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: QuestionBankCreateManyUpdatedByUserInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutUpdatedByUserInput | QuestionBankUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutUpdatedByUserInput | QuestionBankUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuestionBankUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<QuestionBankCreateWithoutDeletedByUserInput, QuestionBankUncheckedCreateWithoutDeletedByUserInput> | QuestionBankCreateWithoutDeletedByUserInput[] | QuestionBankUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutDeletedByUserInput | QuestionBankCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutDeletedByUserInput | QuestionBankUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: QuestionBankCreateManyDeletedByUserInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutDeletedByUserInput | QuestionBankUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutDeletedByUserInput | QuestionBankUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type TestResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<TestResultCreateWithoutUserInput, TestResultUncheckedCreateWithoutUserInput> | TestResultCreateWithoutUserInput[] | TestResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutUserInput | TestResultCreateOrConnectWithoutUserInput[]
    upsert?: TestResultUpsertWithWhereUniqueWithoutUserInput | TestResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TestResultCreateManyUserInputEnvelope
    set?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    disconnect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    delete?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    update?: TestResultUpdateWithWhereUniqueWithoutUserInput | TestResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TestResultUpdateManyWithWhereWithoutUserInput | TestResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
  }

  export type AnswerSubmissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnswerSubmissionCreateWithoutUserInput, AnswerSubmissionUncheckedCreateWithoutUserInput> | AnswerSubmissionCreateWithoutUserInput[] | AnswerSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutUserInput | AnswerSubmissionCreateOrConnectWithoutUserInput[]
    upsert?: AnswerSubmissionUpsertWithWhereUniqueWithoutUserInput | AnswerSubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnswerSubmissionCreateManyUserInputEnvelope
    set?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    disconnect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    delete?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    update?: AnswerSubmissionUpdateWithWhereUniqueWithoutUserInput | AnswerSubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnswerSubmissionUpdateManyWithWhereWithoutUserInput | AnswerSubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
  }

  export type OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<OrganizationCreateWithoutCreatedByUserInput, OrganizationUncheckedCreateWithoutCreatedByUserInput> | OrganizationCreateWithoutCreatedByUserInput[] | OrganizationUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutCreatedByUserInput | OrganizationCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: OrganizationUpsertWithWhereUniqueWithoutCreatedByUserInput | OrganizationUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: OrganizationCreateManyCreatedByUserInputEnvelope
    set?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    disconnect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    delete?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    update?: OrganizationUpdateWithWhereUniqueWithoutCreatedByUserInput | OrganizationUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: OrganizationUpdateManyWithWhereWithoutCreatedByUserInput | OrganizationUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
  }

  export type OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<OrganizationCreateWithoutUpdatedByUserInput, OrganizationUncheckedCreateWithoutUpdatedByUserInput> | OrganizationCreateWithoutUpdatedByUserInput[] | OrganizationUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutUpdatedByUserInput | OrganizationCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: OrganizationUpsertWithWhereUniqueWithoutUpdatedByUserInput | OrganizationUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: OrganizationCreateManyUpdatedByUserInputEnvelope
    set?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    disconnect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    delete?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    update?: OrganizationUpdateWithWhereUniqueWithoutUpdatedByUserInput | OrganizationUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: OrganizationUpdateManyWithWhereWithoutUpdatedByUserInput | OrganizationUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
  }

  export type OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<OrganizationCreateWithoutDeletedByUserInput, OrganizationUncheckedCreateWithoutDeletedByUserInput> | OrganizationCreateWithoutDeletedByUserInput[] | OrganizationUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: OrganizationCreateOrConnectWithoutDeletedByUserInput | OrganizationCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: OrganizationUpsertWithWhereUniqueWithoutDeletedByUserInput | OrganizationUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: OrganizationCreateManyDeletedByUserInputEnvelope
    set?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    disconnect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    delete?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    connect?: OrganizationWhereUniqueInput | OrganizationWhereUniqueInput[]
    update?: OrganizationUpdateWithWhereUniqueWithoutDeletedByUserInput | OrganizationUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: OrganizationUpdateManyWithWhereWithoutDeletedByUserInput | OrganizationUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedByUserInput, CategoryUncheckedCreateWithoutCreatedByUserInput> | CategoryCreateWithoutCreatedByUserInput[] | CategoryUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByUserInput | CategoryCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedByUserInput | CategoryUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: CategoryCreateManyCreatedByUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedByUserInput | CategoryUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedByUserInput | CategoryUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByUserInput, CategoryUncheckedCreateWithoutUpdatedByUserInput> | CategoryCreateWithoutUpdatedByUserInput[] | CategoryUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByUserInput | CategoryCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUpdatedByUserInput | CategoryUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: CategoryCreateManyUpdatedByUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUpdatedByUserInput | CategoryUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUpdatedByUserInput | CategoryUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<CategoryCreateWithoutDeletedByUserInput, CategoryUncheckedCreateWithoutDeletedByUserInput> | CategoryCreateWithoutDeletedByUserInput[] | CategoryUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutDeletedByUserInput | CategoryCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutDeletedByUserInput | CategoryUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: CategoryCreateManyDeletedByUserInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutDeletedByUserInput | CategoryUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutDeletedByUserInput | CategoryUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<CourseCreateWithoutCreatedByUserInput, CourseUncheckedCreateWithoutCreatedByUserInput> | CourseCreateWithoutCreatedByUserInput[] | CourseUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByUserInput | CourseCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatedByUserInput | CourseUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: CourseCreateManyCreatedByUserInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatedByUserInput | CourseUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatedByUserInput | CourseUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<CourseCreateWithoutUpdatedByUserInput, CourseUncheckedCreateWithoutUpdatedByUserInput> | CourseCreateWithoutUpdatedByUserInput[] | CourseUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByUserInput | CourseCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutUpdatedByUserInput | CourseUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: CourseCreateManyUpdatedByUserInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutUpdatedByUserInput | CourseUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutUpdatedByUserInput | CourseUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<CourseCreateWithoutDeletedByUserInput, CourseUncheckedCreateWithoutDeletedByUserInput> | CourseCreateWithoutDeletedByUserInput[] | CourseUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDeletedByUserInput | CourseCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDeletedByUserInput | CourseUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: CourseCreateManyDeletedByUserInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDeletedByUserInput | CourseUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDeletedByUserInput | CourseUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutUpdatedByUserInput, CourseInstructorUncheckedCreateWithoutUpdatedByUserInput> | CourseInstructorCreateWithoutUpdatedByUserInput[] | CourseInstructorUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUpdatedByUserInput | CourseInstructorCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutUpdatedByUserInput | CourseInstructorUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: CourseInstructorCreateManyUpdatedByUserInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutUpdatedByUserInput | CourseInstructorUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutUpdatedByUserInput | CourseInstructorUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutDeletedByUserInput, CourseInstructorUncheckedCreateWithoutDeletedByUserInput> | CourseInstructorCreateWithoutDeletedByUserInput[] | CourseInstructorUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutDeletedByUserInput | CourseInstructorCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutDeletedByUserInput | CourseInstructorUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: CourseInstructorCreateManyDeletedByUserInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutDeletedByUserInput | CourseInstructorUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutDeletedByUserInput | CourseInstructorUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseInstructorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutUserInput, CourseInstructorUncheckedCreateWithoutUserInput> | CourseInstructorCreateWithoutUserInput[] | CourseInstructorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutUserInput | CourseInstructorCreateOrConnectWithoutUserInput[]
    upsert?: CourseInstructorUpsertWithWhereUniqueWithoutUserInput | CourseInstructorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseInstructorCreateManyUserInputEnvelope
    set?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    disconnect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    delete?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    connect?: CourseInstructorWhereUniqueInput | CourseInstructorWhereUniqueInput[]
    update?: CourseInstructorUpdateWithWhereUniqueWithoutUserInput | CourseInstructorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseInstructorUpdateManyWithWhereWithoutUserInput | CourseInstructorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
  }

  export type CourseCompletionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseCompletionCreateWithoutUserInput, CourseCompletionUncheckedCreateWithoutUserInput> | CourseCompletionCreateWithoutUserInput[] | CourseCompletionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseCompletionCreateOrConnectWithoutUserInput | CourseCompletionCreateOrConnectWithoutUserInput[]
    upsert?: CourseCompletionUpsertWithWhereUniqueWithoutUserInput | CourseCompletionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseCompletionCreateManyUserInputEnvelope
    set?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    disconnect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    delete?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    connect?: CourseCompletionWhereUniqueInput | CourseCompletionWhereUniqueInput[]
    update?: CourseCompletionUpdateWithWhereUniqueWithoutUserInput | CourseCompletionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseCompletionUpdateManyWithWhereWithoutUserInput | CourseCompletionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseCompletionScalarWhereInput | CourseCompletionScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<LessonCreateWithoutCreatedByUserInput, LessonUncheckedCreateWithoutCreatedByUserInput> | LessonCreateWithoutCreatedByUserInput[] | LessonUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutCreatedByUserInput | LessonCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutCreatedByUserInput | LessonUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: LessonCreateManyCreatedByUserInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutCreatedByUserInput | LessonUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutCreatedByUserInput | LessonUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<LessonCreateWithoutUpdatedByUserInput, LessonUncheckedCreateWithoutUpdatedByUserInput> | LessonCreateWithoutUpdatedByUserInput[] | LessonUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutUpdatedByUserInput | LessonCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutUpdatedByUserInput | LessonUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: LessonCreateManyUpdatedByUserInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutUpdatedByUserInput | LessonUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutUpdatedByUserInput | LessonUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<LessonCreateWithoutDeletedByUserInput, LessonUncheckedCreateWithoutDeletedByUserInput> | LessonCreateWithoutDeletedByUserInput[] | LessonUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonCreateOrConnectWithoutDeletedByUserInput | LessonCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: LessonUpsertWithWhereUniqueWithoutDeletedByUserInput | LessonUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: LessonCreateManyDeletedByUserInputEnvelope
    set?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    disconnect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    delete?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    connect?: LessonWhereUniqueInput | LessonWhereUniqueInput[]
    update?: LessonUpdateWithWhereUniqueWithoutDeletedByUserInput | LessonUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: LessonUpdateManyWithWhereWithoutDeletedByUserInput | LessonUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: LessonScalarWhereInput | LessonScalarWhereInput[]
  }

  export type LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<LessonContentCreateWithoutUpdatedByUserInput, LessonContentUncheckedCreateWithoutUpdatedByUserInput> | LessonContentCreateWithoutUpdatedByUserInput[] | LessonContentUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutUpdatedByUserInput | LessonContentCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutUpdatedByUserInput | LessonContentUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: LessonContentCreateManyUpdatedByUserInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutUpdatedByUserInput | LessonContentUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutUpdatedByUserInput | LessonContentUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<LessonContentCreateWithoutDeletedByUserInput, LessonContentUncheckedCreateWithoutDeletedByUserInput> | LessonContentCreateWithoutDeletedByUserInput[] | LessonContentUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: LessonContentCreateOrConnectWithoutDeletedByUserInput | LessonContentCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: LessonContentUpsertWithWhereUniqueWithoutDeletedByUserInput | LessonContentUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: LessonContentCreateManyDeletedByUserInputEnvelope
    set?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    disconnect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    delete?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    connect?: LessonContentWhereUniqueInput | LessonContentWhereUniqueInput[]
    update?: LessonContentUpdateWithWhereUniqueWithoutDeletedByUserInput | LessonContentUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: LessonContentUpdateManyWithWhereWithoutDeletedByUserInput | LessonContentUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
  }

  export type LessonViewUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LessonViewCreateWithoutUsersInput, LessonViewUncheckedCreateWithoutUsersInput> | LessonViewCreateWithoutUsersInput[] | LessonViewUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonViewCreateOrConnectWithoutUsersInput | LessonViewCreateOrConnectWithoutUsersInput[]
    upsert?: LessonViewUpsertWithWhereUniqueWithoutUsersInput | LessonViewUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LessonViewCreateManyUsersInputEnvelope
    set?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    disconnect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    delete?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    connect?: LessonViewWhereUniqueInput | LessonViewWhereUniqueInput[]
    update?: LessonViewUpdateWithWhereUniqueWithoutUsersInput | LessonViewUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LessonViewUpdateManyWithWhereWithoutUsersInput | LessonViewUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LessonViewScalarWhereInput | LessonViewScalarWhereInput[]
  }

  export type LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LessonAttemptCreateWithoutUsersInput, LessonAttemptUncheckedCreateWithoutUsersInput> | LessonAttemptCreateWithoutUsersInput[] | LessonAttemptUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LessonAttemptCreateOrConnectWithoutUsersInput | LessonAttemptCreateOrConnectWithoutUsersInput[]
    upsert?: LessonAttemptUpsertWithWhereUniqueWithoutUsersInput | LessonAttemptUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LessonAttemptCreateManyUsersInputEnvelope
    set?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    disconnect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    delete?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    connect?: LessonAttemptWhereUniqueInput | LessonAttemptWhereUniqueInput[]
    update?: LessonAttemptUpdateWithWhereUniqueWithoutUsersInput | LessonAttemptUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LessonAttemptUpdateManyWithWhereWithoutUsersInput | LessonAttemptUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LessonAttemptScalarWhereInput | LessonAttemptScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<QuestionSetCreateWithoutCreatedByUserInput, QuestionSetUncheckedCreateWithoutCreatedByUserInput> | QuestionSetCreateWithoutCreatedByUserInput[] | QuestionSetUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCreatedByUserInput | QuestionSetCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutCreatedByUserInput | QuestionSetUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: QuestionSetCreateManyCreatedByUserInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutCreatedByUserInput | QuestionSetUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutCreatedByUserInput | QuestionSetUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<QuestionSetCreateWithoutUpdatedByUserInput, QuestionSetUncheckedCreateWithoutUpdatedByUserInput> | QuestionSetCreateWithoutUpdatedByUserInput[] | QuestionSetUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutUpdatedByUserInput | QuestionSetCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutUpdatedByUserInput | QuestionSetUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: QuestionSetCreateManyUpdatedByUserInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutUpdatedByUserInput | QuestionSetUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutUpdatedByUserInput | QuestionSetUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<QuestionSetCreateWithoutDeletedByUserInput, QuestionSetUncheckedCreateWithoutDeletedByUserInput> | QuestionSetCreateWithoutDeletedByUserInput[] | QuestionSetUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutDeletedByUserInput | QuestionSetCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutDeletedByUserInput | QuestionSetUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: QuestionSetCreateManyDeletedByUserInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutDeletedByUserInput | QuestionSetUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutDeletedByUserInput | QuestionSetUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<QuestionBankCreateWithoutCreatedByUserInput, QuestionBankUncheckedCreateWithoutCreatedByUserInput> | QuestionBankCreateWithoutCreatedByUserInput[] | QuestionBankUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutCreatedByUserInput | QuestionBankCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutCreatedByUserInput | QuestionBankUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: QuestionBankCreateManyCreatedByUserInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutCreatedByUserInput | QuestionBankUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutCreatedByUserInput | QuestionBankUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
    create?: XOR<QuestionBankCreateWithoutUpdatedByUserInput, QuestionBankUncheckedCreateWithoutUpdatedByUserInput> | QuestionBankCreateWithoutUpdatedByUserInput[] | QuestionBankUncheckedCreateWithoutUpdatedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutUpdatedByUserInput | QuestionBankCreateOrConnectWithoutUpdatedByUserInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutUpdatedByUserInput | QuestionBankUpsertWithWhereUniqueWithoutUpdatedByUserInput[]
    createMany?: QuestionBankCreateManyUpdatedByUserInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutUpdatedByUserInput | QuestionBankUpdateWithWhereUniqueWithoutUpdatedByUserInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutUpdatedByUserInput | QuestionBankUpdateManyWithWhereWithoutUpdatedByUserInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput = {
    create?: XOR<QuestionBankCreateWithoutDeletedByUserInput, QuestionBankUncheckedCreateWithoutDeletedByUserInput> | QuestionBankCreateWithoutDeletedByUserInput[] | QuestionBankUncheckedCreateWithoutDeletedByUserInput[]
    connectOrCreate?: QuestionBankCreateOrConnectWithoutDeletedByUserInput | QuestionBankCreateOrConnectWithoutDeletedByUserInput[]
    upsert?: QuestionBankUpsertWithWhereUniqueWithoutDeletedByUserInput | QuestionBankUpsertWithWhereUniqueWithoutDeletedByUserInput[]
    createMany?: QuestionBankCreateManyDeletedByUserInputEnvelope
    set?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    disconnect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    delete?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    connect?: QuestionBankWhereUniqueInput | QuestionBankWhereUniqueInput[]
    update?: QuestionBankUpdateWithWhereUniqueWithoutDeletedByUserInput | QuestionBankUpdateWithWhereUniqueWithoutDeletedByUserInput[]
    updateMany?: QuestionBankUpdateManyWithWhereWithoutDeletedByUserInput | QuestionBankUpdateManyWithWhereWithoutDeletedByUserInput[]
    deleteMany?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
  }

  export type TestResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TestResultCreateWithoutUserInput, TestResultUncheckedCreateWithoutUserInput> | TestResultCreateWithoutUserInput[] | TestResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TestResultCreateOrConnectWithoutUserInput | TestResultCreateOrConnectWithoutUserInput[]
    upsert?: TestResultUpsertWithWhereUniqueWithoutUserInput | TestResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TestResultCreateManyUserInputEnvelope
    set?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    disconnect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    delete?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    connect?: TestResultWhereUniqueInput | TestResultWhereUniqueInput[]
    update?: TestResultUpdateWithWhereUniqueWithoutUserInput | TestResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TestResultUpdateManyWithWhereWithoutUserInput | TestResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
  }

  export type AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnswerSubmissionCreateWithoutUserInput, AnswerSubmissionUncheckedCreateWithoutUserInput> | AnswerSubmissionCreateWithoutUserInput[] | AnswerSubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnswerSubmissionCreateOrConnectWithoutUserInput | AnswerSubmissionCreateOrConnectWithoutUserInput[]
    upsert?: AnswerSubmissionUpsertWithWhereUniqueWithoutUserInput | AnswerSubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnswerSubmissionCreateManyUserInputEnvelope
    set?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    disconnect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    delete?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    connect?: AnswerSubmissionWhereUniqueInput | AnswerSubmissionWhereUniqueInput[]
    update?: AnswerSubmissionUpdateWithWhereUniqueWithoutUserInput | AnswerSubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnswerSubmissionUpdateManyWithWhereWithoutUserInput | AnswerSubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumCreationMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.CreationMethod | EnumCreationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCreationMethodFilter<$PrismaModel> | $Enums.CreationMethod
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumCreationMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CreationMethod | EnumCreationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.CreationMethod[] | ListEnumCreationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumCreationMethodWithAggregatesFilter<$PrismaModel> | $Enums.CreationMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCreationMethodFilter<$PrismaModel>
    _max?: NestedEnumCreationMethodFilter<$PrismaModel>
  }

  export type UserCreateWithoutAcademicTitleInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAcademicTitleInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAcademicTitleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAcademicTitleInput, UserUncheckedCreateWithoutAcademicTitleInput>
  }

  export type UserCreateManyAcademicTitleInputEnvelope = {
    data: UserCreateManyAcademicTitleInput | UserCreateManyAcademicTitleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAcademicTitleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAcademicTitleInput, UserUncheckedUpdateWithoutAcademicTitleInput>
    create: XOR<UserCreateWithoutAcademicTitleInput, UserUncheckedCreateWithoutAcademicTitleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAcademicTitleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAcademicTitleInput, UserUncheckedUpdateWithoutAcademicTitleInput>
  }

  export type UserUpdateManyWithWhereWithoutAcademicTitleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAcademicTitleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    userRoleId?: IntFilter<"User"> | number
    titleId?: IntNullableFilter<"User"> | number | null
    academicTitleId?: IntNullableFilter<"User"> | number | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    departmentId?: IntNullableFilter<"User"> | number | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type UserCreateWithoutAnswerSubmissionUserInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnswerSubmissionUserInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnswerSubmissionUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnswerSubmissionUserInput, UserUncheckedCreateWithoutAnswerSubmissionUserInput>
  }

  export type QuestionSetCreateWithoutAnswerSubmissionInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutAnswerSubmissionInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutAnswerSubmissionInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutAnswerSubmissionInput, QuestionSetUncheckedCreateWithoutAnswerSubmissionInput>
  }

  export type QuestionBankCreateWithoutAnswerSubmissionInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
  }

  export type QuestionBankUncheckedCreateWithoutAnswerSubmissionInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankCreateOrConnectWithoutAnswerSubmissionInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutAnswerSubmissionInput, QuestionBankUncheckedCreateWithoutAnswerSubmissionInput>
  }

  export type UserUpsertWithoutAnswerSubmissionUserInput = {
    update: XOR<UserUpdateWithoutAnswerSubmissionUserInput, UserUncheckedUpdateWithoutAnswerSubmissionUserInput>
    create: XOR<UserCreateWithoutAnswerSubmissionUserInput, UserUncheckedCreateWithoutAnswerSubmissionUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnswerSubmissionUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnswerSubmissionUserInput, UserUncheckedUpdateWithoutAnswerSubmissionUserInput>
  }

  export type UserUpdateWithoutAnswerSubmissionUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnswerSubmissionUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionSetUpsertWithoutAnswerSubmissionInput = {
    update: XOR<QuestionSetUpdateWithoutAnswerSubmissionInput, QuestionSetUncheckedUpdateWithoutAnswerSubmissionInput>
    create: XOR<QuestionSetCreateWithoutAnswerSubmissionInput, QuestionSetUncheckedCreateWithoutAnswerSubmissionInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutAnswerSubmissionInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutAnswerSubmissionInput, QuestionSetUncheckedUpdateWithoutAnswerSubmissionInput>
  }

  export type QuestionSetUpdateWithoutAnswerSubmissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutAnswerSubmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionBankUpsertWithoutAnswerSubmissionInput = {
    update: XOR<QuestionBankUpdateWithoutAnswerSubmissionInput, QuestionBankUncheckedUpdateWithoutAnswerSubmissionInput>
    create: XOR<QuestionBankCreateWithoutAnswerSubmissionInput, QuestionBankUncheckedCreateWithoutAnswerSubmissionInput>
    where?: QuestionBankWhereInput
  }

  export type QuestionBankUpdateToOneWithWhereWithoutAnswerSubmissionInput = {
    where?: QuestionBankWhereInput
    data: XOR<QuestionBankUpdateWithoutAnswerSubmissionInput, QuestionBankUncheckedUpdateWithoutAnswerSubmissionInput>
  }

  export type QuestionBankUpdateWithoutAnswerSubmissionInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutAnswerSubmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutCategoryCreatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoryCreatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoryCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoryCreatedInput, UserUncheckedCreateWithoutCategoryCreatedInput>
  }

  export type UserCreateWithoutCategoryUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoryUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoryUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoryUpdatedInput, UserUncheckedCreateWithoutCategoryUpdatedInput>
  }

  export type UserCreateWithoutCategoryDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoryDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoryDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoryDeletedInput, UserUncheckedCreateWithoutCategoryDeletedInput>
  }

  export type CourseCreateWithoutCategoryInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCategoryInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput>
  }

  export type CourseCreateManyCategoryInputEnvelope = {
    data: CourseCreateManyCategoryInput | CourseCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCategoryCreatedInput = {
    update: XOR<UserUpdateWithoutCategoryCreatedInput, UserUncheckedUpdateWithoutCategoryCreatedInput>
    create: XOR<UserCreateWithoutCategoryCreatedInput, UserUncheckedCreateWithoutCategoryCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategoryCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategoryCreatedInput, UserUncheckedUpdateWithoutCategoryCreatedInput>
  }

  export type UserUpdateWithoutCategoryCreatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoryCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCategoryUpdatedInput = {
    update: XOR<UserUpdateWithoutCategoryUpdatedInput, UserUncheckedUpdateWithoutCategoryUpdatedInput>
    create: XOR<UserCreateWithoutCategoryUpdatedInput, UserUncheckedCreateWithoutCategoryUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategoryUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategoryUpdatedInput, UserUncheckedUpdateWithoutCategoryUpdatedInput>
  }

  export type UserUpdateWithoutCategoryUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoryUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCategoryDeletedInput = {
    update: XOR<UserUpdateWithoutCategoryDeletedInput, UserUncheckedUpdateWithoutCategoryDeletedInput>
    create: XOR<UserCreateWithoutCategoryDeletedInput, UserUncheckedCreateWithoutCategoryDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategoryDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategoryDeletedInput, UserUncheckedUpdateWithoutCategoryDeletedInput>
  }

  export type UserUpdateWithoutCategoryDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoryDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCategoryInput, CourseUncheckedUpdateWithoutCategoryInput>
    create: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCategoryInput, CourseUncheckedUpdateWithoutCategoryInput>
  }

  export type CourseUpdateManyWithWhereWithoutCategoryInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: IntFilter<"Course"> | number
    categoryId?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    imageUrl?: StringFilter<"Course"> | string
    fee?: IntFilter<"Course"> | number
    isActive?: BoolFilter<"Course"> | boolean
    createdBy?: IntFilter<"Course"> | number
    updatedBy?: IntNullableFilter<"Course"> | number | null
    deletedBy?: IntNullableFilter<"Course"> | number | null
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Course"> | Date | string | null
  }

  export type CourseCreateWithoutCourseCompletionCourseIdInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCourseCompletionCourseIdInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCourseCompletionCourseIdInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCourseCompletionCourseIdInput, CourseUncheckedCreateWithoutCourseCompletionCourseIdInput>
  }

  export type UserCreateWithoutCourseCompletionUserIdInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseCompletionUserIdInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseCompletionUserIdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseCompletionUserIdInput, UserUncheckedCreateWithoutCourseCompletionUserIdInput>
  }

  export type CourseUpsertWithoutCourseCompletionCourseIdInput = {
    update: XOR<CourseUpdateWithoutCourseCompletionCourseIdInput, CourseUncheckedUpdateWithoutCourseCompletionCourseIdInput>
    create: XOR<CourseCreateWithoutCourseCompletionCourseIdInput, CourseUncheckedCreateWithoutCourseCompletionCourseIdInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCourseCompletionCourseIdInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCourseCompletionCourseIdInput, CourseUncheckedUpdateWithoutCourseCompletionCourseIdInput>
  }

  export type CourseUpdateWithoutCourseCompletionCourseIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCourseCompletionCourseIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCourseCompletionUserIdInput = {
    update: XOR<UserUpdateWithoutCourseCompletionUserIdInput, UserUncheckedUpdateWithoutCourseCompletionUserIdInput>
    create: XOR<UserCreateWithoutCourseCompletionUserIdInput, UserUncheckedCreateWithoutCourseCompletionUserIdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseCompletionUserIdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseCompletionUserIdInput, UserUncheckedUpdateWithoutCourseCompletionUserIdInput>
  }

  export type UserUpdateWithoutCourseCompletionUserIdInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseCompletionUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseCreateWithoutCourseInstructorCourseIdInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCourseInstructorCourseIdInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCourseInstructorCourseIdInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCourseInstructorCourseIdInput, CourseUncheckedCreateWithoutCourseInstructorCourseIdInput>
  }

  export type UserCreateWithoutCourseInstructorUserIdInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseInstructorUserIdInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseInstructorUserIdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseInstructorUserIdInput, UserUncheckedCreateWithoutCourseInstructorUserIdInput>
  }

  export type UserCreateWithoutCourseInstructorUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseInstructorUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseInstructorUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseInstructorUpdatedInput, UserUncheckedCreateWithoutCourseInstructorUpdatedInput>
  }

  export type UserCreateWithoutCourseInstructorDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseInstructorDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseInstructorDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseInstructorDeletedInput, UserUncheckedCreateWithoutCourseInstructorDeletedInput>
  }

  export type LessonCreateWithoutCourseInstructorInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutCourseInstructorInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutCourseInstructorInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutCourseInstructorInput, LessonUncheckedCreateWithoutCourseInstructorInput>
  }

  export type LessonCreateManyCourseInstructorInputEnvelope = {
    data: LessonCreateManyCourseInstructorInput | LessonCreateManyCourseInstructorInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutCourseInstructorCourseIdInput = {
    update: XOR<CourseUpdateWithoutCourseInstructorCourseIdInput, CourseUncheckedUpdateWithoutCourseInstructorCourseIdInput>
    create: XOR<CourseCreateWithoutCourseInstructorCourseIdInput, CourseUncheckedCreateWithoutCourseInstructorCourseIdInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCourseInstructorCourseIdInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCourseInstructorCourseIdInput, CourseUncheckedUpdateWithoutCourseInstructorCourseIdInput>
  }

  export type CourseUpdateWithoutCourseInstructorCourseIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCourseInstructorCourseIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCourseInstructorUserIdInput = {
    update: XOR<UserUpdateWithoutCourseInstructorUserIdInput, UserUncheckedUpdateWithoutCourseInstructorUserIdInput>
    create: XOR<UserCreateWithoutCourseInstructorUserIdInput, UserUncheckedCreateWithoutCourseInstructorUserIdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseInstructorUserIdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseInstructorUserIdInput, UserUncheckedUpdateWithoutCourseInstructorUserIdInput>
  }

  export type UserUpdateWithoutCourseInstructorUserIdInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseInstructorUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCourseInstructorUpdatedInput = {
    update: XOR<UserUpdateWithoutCourseInstructorUpdatedInput, UserUncheckedUpdateWithoutCourseInstructorUpdatedInput>
    create: XOR<UserCreateWithoutCourseInstructorUpdatedInput, UserUncheckedCreateWithoutCourseInstructorUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseInstructorUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseInstructorUpdatedInput, UserUncheckedUpdateWithoutCourseInstructorUpdatedInput>
  }

  export type UserUpdateWithoutCourseInstructorUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseInstructorUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCourseInstructorDeletedInput = {
    update: XOR<UserUpdateWithoutCourseInstructorDeletedInput, UserUncheckedUpdateWithoutCourseInstructorDeletedInput>
    create: XOR<UserCreateWithoutCourseInstructorDeletedInput, UserUncheckedCreateWithoutCourseInstructorDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseInstructorDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseInstructorDeletedInput, UserUncheckedUpdateWithoutCourseInstructorDeletedInput>
  }

  export type UserUpdateWithoutCourseInstructorDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseInstructorDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LessonUpsertWithWhereUniqueWithoutCourseInstructorInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutCourseInstructorInput, LessonUncheckedUpdateWithoutCourseInstructorInput>
    create: XOR<LessonCreateWithoutCourseInstructorInput, LessonUncheckedCreateWithoutCourseInstructorInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutCourseInstructorInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutCourseInstructorInput, LessonUncheckedUpdateWithoutCourseInstructorInput>
  }

  export type LessonUpdateManyWithWhereWithoutCourseInstructorInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutCourseInstructorInput>
  }

  export type LessonScalarWhereInput = {
    AND?: LessonScalarWhereInput | LessonScalarWhereInput[]
    OR?: LessonScalarWhereInput[]
    NOT?: LessonScalarWhereInput | LessonScalarWhereInput[]
    id?: IntFilter<"Lesson"> | number
    lessonTypeId?: IntFilter<"Lesson"> | number
    courseId?: IntFilter<"Lesson"> | number
    courseInstructorId?: IntFilter<"Lesson"> | number
    name?: StringFilter<"Lesson"> | string
    description?: StringNullableFilter<"Lesson"> | string | null
    imageUrl?: StringNullableFilter<"Lesson"> | string | null
    sortOrder?: IntFilter<"Lesson"> | number
    parentId?: IntNullableFilter<"Lesson"> | number | null
    isActive?: BoolFilter<"Lesson"> | boolean
    createdBy?: IntFilter<"Lesson"> | number
    updatedBy?: IntNullableFilter<"Lesson"> | number | null
    deletedBy?: IntNullableFilter<"Lesson"> | number | null
    createdAt?: DateTimeFilter<"Lesson"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Lesson"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Lesson"> | Date | string | null
  }

  export type CategoryCreateWithoutCategoriesInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutCategoryCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCategoryUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCategoryDeletedInput
  }

  export type CategoryUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CategoryCreateOrConnectWithoutCategoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCategoriesInput, CategoryUncheckedCreateWithoutCategoriesInput>
  }

  export type UserCreateWithoutCourseCreatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseCreatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseCreatedInput, UserUncheckedCreateWithoutCourseCreatedInput>
  }

  export type UserCreateWithoutCourseUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseUpdatedInput, UserUncheckedCreateWithoutCourseUpdatedInput>
  }

  export type UserCreateWithoutCourseDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseDeletedInput, UserUncheckedCreateWithoutCourseDeletedInput>
  }

  export type CourseInstructorCreateWithoutCourseInput = {
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutCourseInstructorUserIdInput
    updatedByUser?: UserCreateNestedOneWithoutCourseInstructorUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseInstructorDeletedInput
    courseInstructor?: LessonCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorUncheckedCreateWithoutCourseInput = {
    id?: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructor?: LessonUncheckedCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorCreateOrConnectWithoutCourseInput = {
    where: CourseInstructorWhereUniqueInput
    create: XOR<CourseInstructorCreateWithoutCourseInput, CourseInstructorUncheckedCreateWithoutCourseInput>
  }

  export type CourseInstructorCreateManyCourseInputEnvelope = {
    data: CourseInstructorCreateManyCourseInput | CourseInstructorCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseCompletionCreateWithoutCourseInput = {
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
    user?: UserCreateNestedOneWithoutCourseCompletionUserIdInput
  }

  export type CourseCompletionUncheckedCreateWithoutCourseInput = {
    id?: number
    userId: number
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
  }

  export type CourseCompletionCreateOrConnectWithoutCourseInput = {
    where: CourseCompletionWhereUniqueInput
    create: XOR<CourseCompletionCreateWithoutCourseInput, CourseCompletionUncheckedCreateWithoutCourseInput>
  }

  export type CourseCompletionCreateManyCourseInputEnvelope = {
    data: CourseCompletionCreateManyCourseInput | CourseCompletionCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type LessonCreateWithoutCourseInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutCourseInput = {
    id?: number
    lessonTypeId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutCourseInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutCourseInput, LessonUncheckedCreateWithoutCourseInput>
  }

  export type LessonCreateManyCourseInputEnvelope = {
    data: LessonCreateManyCourseInput | LessonCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutCourseInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutCourseInput = {
    id?: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutCourseInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutCourseInput, QuestionSetUncheckedCreateWithoutCourseInput>
  }

  export type QuestionSetCreateManyCourseInputEnvelope = {
    data: QuestionSetCreateManyCourseInput | QuestionSetCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutCategoriesInput = {
    update: XOR<CategoryUpdateWithoutCategoriesInput, CategoryUncheckedUpdateWithoutCategoriesInput>
    create: XOR<CategoryCreateWithoutCategoriesInput, CategoryUncheckedCreateWithoutCategoriesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutCategoriesInput, CategoryUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutCategoryCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCategoryUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCategoryDeletedNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutCourseCreatedInput = {
    update: XOR<UserUpdateWithoutCourseCreatedInput, UserUncheckedUpdateWithoutCourseCreatedInput>
    create: XOR<UserCreateWithoutCourseCreatedInput, UserUncheckedCreateWithoutCourseCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseCreatedInput, UserUncheckedUpdateWithoutCourseCreatedInput>
  }

  export type UserUpdateWithoutCourseCreatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCourseUpdatedInput = {
    update: XOR<UserUpdateWithoutCourseUpdatedInput, UserUncheckedUpdateWithoutCourseUpdatedInput>
    create: XOR<UserCreateWithoutCourseUpdatedInput, UserUncheckedCreateWithoutCourseUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseUpdatedInput, UserUncheckedUpdateWithoutCourseUpdatedInput>
  }

  export type UserUpdateWithoutCourseUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCourseDeletedInput = {
    update: XOR<UserUpdateWithoutCourseDeletedInput, UserUncheckedUpdateWithoutCourseDeletedInput>
    create: XOR<UserCreateWithoutCourseDeletedInput, UserUncheckedCreateWithoutCourseDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseDeletedInput, UserUncheckedUpdateWithoutCourseDeletedInput>
  }

  export type UserUpdateWithoutCourseDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseInstructorUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseInstructorWhereUniqueInput
    update: XOR<CourseInstructorUpdateWithoutCourseInput, CourseInstructorUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseInstructorCreateWithoutCourseInput, CourseInstructorUncheckedCreateWithoutCourseInput>
  }

  export type CourseInstructorUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseInstructorWhereUniqueInput
    data: XOR<CourseInstructorUpdateWithoutCourseInput, CourseInstructorUncheckedUpdateWithoutCourseInput>
  }

  export type CourseInstructorUpdateManyWithWhereWithoutCourseInput = {
    where: CourseInstructorScalarWhereInput
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseInstructorScalarWhereInput = {
    AND?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
    OR?: CourseInstructorScalarWhereInput[]
    NOT?: CourseInstructorScalarWhereInput | CourseInstructorScalarWhereInput[]
    id?: IntFilter<"CourseInstructor"> | number
    courseId?: IntFilter<"CourseInstructor"> | number
    userId?: IntNullableFilter<"CourseInstructor"> | number | null
    fullName?: StringNullableFilter<"CourseInstructor"> | string | null
    role?: EnumRoleFilter<"CourseInstructor"> | $Enums.Role
    isActive?: BoolFilter<"CourseInstructor"> | boolean
    updatedBy?: IntNullableFilter<"CourseInstructor"> | number | null
    deletedBy?: IntNullableFilter<"CourseInstructor"> | number | null
    updatedAt?: DateTimeNullableFilter<"CourseInstructor"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"CourseInstructor"> | Date | string | null
  }

  export type CourseCompletionUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseCompletionWhereUniqueInput
    update: XOR<CourseCompletionUpdateWithoutCourseInput, CourseCompletionUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseCompletionCreateWithoutCourseInput, CourseCompletionUncheckedCreateWithoutCourseInput>
  }

  export type CourseCompletionUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseCompletionWhereUniqueInput
    data: XOR<CourseCompletionUpdateWithoutCourseInput, CourseCompletionUncheckedUpdateWithoutCourseInput>
  }

  export type CourseCompletionUpdateManyWithWhereWithoutCourseInput = {
    where: CourseCompletionScalarWhereInput
    data: XOR<CourseCompletionUpdateManyMutationInput, CourseCompletionUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseCompletionScalarWhereInput = {
    AND?: CourseCompletionScalarWhereInput | CourseCompletionScalarWhereInput[]
    OR?: CourseCompletionScalarWhereInput[]
    NOT?: CourseCompletionScalarWhereInput | CourseCompletionScalarWhereInput[]
    id?: IntFilter<"CourseCompletion"> | number
    courseId?: IntFilter<"CourseCompletion"> | number
    userId?: IntFilter<"CourseCompletion"> | number
    completedAt?: DateTimeFilter<"CourseCompletion"> | Date | string
    finalScore?: IntFilter<"CourseCompletion"> | number
    isCertified?: BoolFilter<"CourseCompletion"> | boolean
    certificateUrl?: StringFilter<"CourseCompletion"> | string
  }

  export type LessonUpsertWithWhereUniqueWithoutCourseInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutCourseInput, LessonUncheckedUpdateWithoutCourseInput>
    create: XOR<LessonCreateWithoutCourseInput, LessonUncheckedCreateWithoutCourseInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutCourseInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutCourseInput, LessonUncheckedUpdateWithoutCourseInput>
  }

  export type LessonUpdateManyWithWhereWithoutCourseInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutCourseInput>
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutCourseInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutCourseInput, QuestionSetUncheckedUpdateWithoutCourseInput>
    create: XOR<QuestionSetCreateWithoutCourseInput, QuestionSetUncheckedCreateWithoutCourseInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutCourseInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutCourseInput, QuestionSetUncheckedUpdateWithoutCourseInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutCourseInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutCourseInput>
  }

  export type QuestionSetScalarWhereInput = {
    AND?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
    OR?: QuestionSetScalarWhereInput[]
    NOT?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
    id?: IntFilter<"QuestionSet"> | number
    courseId?: IntFilter<"QuestionSet"> | number
    lessonId?: IntFilter<"QuestionSet"> | number
    testTypeId?: IntFilter<"QuestionSet"> | number
    name?: StringFilter<"QuestionSet"> | string
    description?: StringNullableFilter<"QuestionSet"> | string | null
    passScore?: IntFilter<"QuestionSet"> | number
    attemptLimit?: IntFilter<"QuestionSet"> | number
    isActive?: BoolFilter<"QuestionSet"> | boolean
    createdBy?: IntFilter<"QuestionSet"> | number
    updatedBy?: IntNullableFilter<"QuestionSet"> | number | null
    deletedBy?: IntNullableFilter<"QuestionSet"> | number | null
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"QuestionSet"> | Date | string | null
  }

  export type OrganizationCreateWithoutDepartmentsInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutOrganizationsCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutOrganizationsUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutOrganizationsDeletedInput
  }

  export type OrganizationUncheckedCreateWithoutDepartmentsInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type OrganizationCreateOrConnectWithoutDepartmentsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutDepartmentsInput, OrganizationUncheckedCreateWithoutDepartmentsInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutDepartmentsInput = {
    update: XOR<OrganizationUpdateWithoutDepartmentsInput, OrganizationUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<OrganizationCreateWithoutDepartmentsInput, OrganizationUncheckedCreateWithoutDepartmentsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutDepartmentsInput, OrganizationUncheckedUpdateWithoutDepartmentsInput>
  }

  export type OrganizationUpdateWithoutDepartmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutOrganizationsCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutOrganizationsUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutOrganizationsDeletedNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutDepartmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutLessonAttemptUserIdInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonAttemptUserIdInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonAttemptUserIdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonAttemptUserIdInput, UserUncheckedCreateWithoutLessonAttemptUserIdInput>
  }

  export type LessonCreateWithoutLessonAttemptLessonIdInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutLessonAttemptLessonIdInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutLessonAttemptLessonIdInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutLessonAttemptLessonIdInput, LessonUncheckedCreateWithoutLessonAttemptLessonIdInput>
  }

  export type UserUpsertWithoutLessonAttemptUserIdInput = {
    update: XOR<UserUpdateWithoutLessonAttemptUserIdInput, UserUncheckedUpdateWithoutLessonAttemptUserIdInput>
    create: XOR<UserCreateWithoutLessonAttemptUserIdInput, UserUncheckedCreateWithoutLessonAttemptUserIdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonAttemptUserIdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonAttemptUserIdInput, UserUncheckedUpdateWithoutLessonAttemptUserIdInput>
  }

  export type UserUpdateWithoutLessonAttemptUserIdInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonAttemptUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LessonUpsertWithoutLessonAttemptLessonIdInput = {
    update: XOR<LessonUpdateWithoutLessonAttemptLessonIdInput, LessonUncheckedUpdateWithoutLessonAttemptLessonIdInput>
    create: XOR<LessonCreateWithoutLessonAttemptLessonIdInput, LessonUncheckedCreateWithoutLessonAttemptLessonIdInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutLessonAttemptLessonIdInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutLessonAttemptLessonIdInput, LessonUncheckedUpdateWithoutLessonAttemptLessonIdInput>
  }

  export type LessonUpdateWithoutLessonAttemptLessonIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutLessonAttemptLessonIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonContentCreateWithoutLessonContentTypeInput = {
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lesson: LessonCreateNestedOneWithoutLessonContentInput
    updatedByUser?: UserCreateNestedOneWithoutLessonContentUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonContentDeletedInput
  }

  export type LessonContentUncheckedCreateWithoutLessonContentTypeInput = {
    id?: number
    lessonId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateOrConnectWithoutLessonContentTypeInput = {
    where: LessonContentWhereUniqueInput
    create: XOR<LessonContentCreateWithoutLessonContentTypeInput, LessonContentUncheckedCreateWithoutLessonContentTypeInput>
  }

  export type LessonContentCreateManyLessonContentTypeInputEnvelope = {
    data: LessonContentCreateManyLessonContentTypeInput | LessonContentCreateManyLessonContentTypeInput[]
    skipDuplicates?: boolean
  }

  export type LessonContentUpsertWithWhereUniqueWithoutLessonContentTypeInput = {
    where: LessonContentWhereUniqueInput
    update: XOR<LessonContentUpdateWithoutLessonContentTypeInput, LessonContentUncheckedUpdateWithoutLessonContentTypeInput>
    create: XOR<LessonContentCreateWithoutLessonContentTypeInput, LessonContentUncheckedCreateWithoutLessonContentTypeInput>
  }

  export type LessonContentUpdateWithWhereUniqueWithoutLessonContentTypeInput = {
    where: LessonContentWhereUniqueInput
    data: XOR<LessonContentUpdateWithoutLessonContentTypeInput, LessonContentUncheckedUpdateWithoutLessonContentTypeInput>
  }

  export type LessonContentUpdateManyWithWhereWithoutLessonContentTypeInput = {
    where: LessonContentScalarWhereInput
    data: XOR<LessonContentUpdateManyMutationInput, LessonContentUncheckedUpdateManyWithoutLessonContentTypeInput>
  }

  export type LessonContentScalarWhereInput = {
    AND?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
    OR?: LessonContentScalarWhereInput[]
    NOT?: LessonContentScalarWhereInput | LessonContentScalarWhereInput[]
    id?: IntFilter<"LessonContent"> | number
    lessonId?: IntFilter<"LessonContent"> | number
    contentTypeId?: IntFilter<"LessonContent"> | number
    contentUrl?: StringNullableFilter<"LessonContent"> | string | null
    duration?: IntNullableFilter<"LessonContent"> | number | null
    pages?: IntNullableFilter<"LessonContent"> | number | null
    sortOrder?: IntFilter<"LessonContent"> | number
    isActive?: BoolFilter<"LessonContent"> | boolean
    updatedBy?: IntNullableFilter<"LessonContent"> | number | null
    deletedBy?: IntNullableFilter<"LessonContent"> | number | null
    updatedAt?: DateTimeNullableFilter<"LessonContent"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"LessonContent"> | Date | string | null
  }

  export type LessonCreateWithoutLessonContentInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutLessonContentInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutLessonContentInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutLessonContentInput, LessonUncheckedCreateWithoutLessonContentInput>
  }

  export type LessonContentTypeCreateWithoutLessonContentInput = {
    name: string
  }

  export type LessonContentTypeUncheckedCreateWithoutLessonContentInput = {
    id?: number
    name: string
  }

  export type LessonContentTypeCreateOrConnectWithoutLessonContentInput = {
    where: LessonContentTypeWhereUniqueInput
    create: XOR<LessonContentTypeCreateWithoutLessonContentInput, LessonContentTypeUncheckedCreateWithoutLessonContentInput>
  }

  export type UserCreateWithoutLessonContentUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonContentUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonContentUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonContentUpdatedInput, UserUncheckedCreateWithoutLessonContentUpdatedInput>
  }

  export type UserCreateWithoutLessonContentDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonContentDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonContentDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonContentDeletedInput, UserUncheckedCreateWithoutLessonContentDeletedInput>
  }

  export type LessonUpsertWithoutLessonContentInput = {
    update: XOR<LessonUpdateWithoutLessonContentInput, LessonUncheckedUpdateWithoutLessonContentInput>
    create: XOR<LessonCreateWithoutLessonContentInput, LessonUncheckedCreateWithoutLessonContentInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutLessonContentInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutLessonContentInput, LessonUncheckedUpdateWithoutLessonContentInput>
  }

  export type LessonUpdateWithoutLessonContentInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutLessonContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonContentTypeUpsertWithoutLessonContentInput = {
    update: XOR<LessonContentTypeUpdateWithoutLessonContentInput, LessonContentTypeUncheckedUpdateWithoutLessonContentInput>
    create: XOR<LessonContentTypeCreateWithoutLessonContentInput, LessonContentTypeUncheckedCreateWithoutLessonContentInput>
    where?: LessonContentTypeWhereInput
  }

  export type LessonContentTypeUpdateToOneWithWhereWithoutLessonContentInput = {
    where?: LessonContentTypeWhereInput
    data: XOR<LessonContentTypeUpdateWithoutLessonContentInput, LessonContentTypeUncheckedUpdateWithoutLessonContentInput>
  }

  export type LessonContentTypeUpdateWithoutLessonContentInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LessonContentTypeUncheckedUpdateWithoutLessonContentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutLessonContentUpdatedInput = {
    update: XOR<UserUpdateWithoutLessonContentUpdatedInput, UserUncheckedUpdateWithoutLessonContentUpdatedInput>
    create: XOR<UserCreateWithoutLessonContentUpdatedInput, UserUncheckedCreateWithoutLessonContentUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonContentUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonContentUpdatedInput, UserUncheckedUpdateWithoutLessonContentUpdatedInput>
  }

  export type UserUpdateWithoutLessonContentUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonContentUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutLessonContentDeletedInput = {
    update: XOR<UserUpdateWithoutLessonContentDeletedInput, UserUncheckedUpdateWithoutLessonContentDeletedInput>
    create: XOR<UserCreateWithoutLessonContentDeletedInput, UserUncheckedCreateWithoutLessonContentDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonContentDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonContentDeletedInput, UserUncheckedUpdateWithoutLessonContentDeletedInput>
  }

  export type UserUpdateWithoutLessonContentDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonContentDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LessonCreateWithoutLessonPrerequisiteLessonIdInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutLessonPrerequisiteLessonIdInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutLessonPrerequisiteLessonIdInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutLessonPrerequisiteLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteLessonIdInput>
  }

  export type LessonCreateWithoutLessonPrerequisiteRequiredLessonIdInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutLessonPrerequisiteRequiredLessonIdInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutLessonPrerequisiteRequiredLessonIdInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteRequiredLessonIdInput>
  }

  export type LessonUpsertWithoutLessonPrerequisiteLessonIdInput = {
    update: XOR<LessonUpdateWithoutLessonPrerequisiteLessonIdInput, LessonUncheckedUpdateWithoutLessonPrerequisiteLessonIdInput>
    create: XOR<LessonCreateWithoutLessonPrerequisiteLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteLessonIdInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutLessonPrerequisiteLessonIdInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutLessonPrerequisiteLessonIdInput, LessonUncheckedUpdateWithoutLessonPrerequisiteLessonIdInput>
  }

  export type LessonUpdateWithoutLessonPrerequisiteLessonIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutLessonPrerequisiteLessonIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUpsertWithoutLessonPrerequisiteRequiredLessonIdInput = {
    update: XOR<LessonUpdateWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUncheckedUpdateWithoutLessonPrerequisiteRequiredLessonIdInput>
    create: XOR<LessonCreateWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUncheckedCreateWithoutLessonPrerequisiteRequiredLessonIdInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutLessonPrerequisiteRequiredLessonIdInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutLessonPrerequisiteRequiredLessonIdInput, LessonUncheckedUpdateWithoutLessonPrerequisiteRequiredLessonIdInput>
  }

  export type LessonUpdateWithoutLessonPrerequisiteRequiredLessonIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutLessonPrerequisiteRequiredLessonIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonCreateWithoutLessonTypeInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutLessonTypeInput = {
    id?: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutLessonTypeInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutLessonTypeInput, LessonUncheckedCreateWithoutLessonTypeInput>
  }

  export type LessonCreateManyLessonTypeInputEnvelope = {
    data: LessonCreateManyLessonTypeInput | LessonCreateManyLessonTypeInput[]
    skipDuplicates?: boolean
  }

  export type LessonUpsertWithWhereUniqueWithoutLessonTypeInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutLessonTypeInput, LessonUncheckedUpdateWithoutLessonTypeInput>
    create: XOR<LessonCreateWithoutLessonTypeInput, LessonUncheckedCreateWithoutLessonTypeInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutLessonTypeInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutLessonTypeInput, LessonUncheckedUpdateWithoutLessonTypeInput>
  }

  export type LessonUpdateManyWithWhereWithoutLessonTypeInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutLessonTypeInput>
  }

  export type UserCreateWithoutLessonViewUserIdInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonViewUserIdInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonViewUserIdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonViewUserIdInput, UserUncheckedCreateWithoutLessonViewUserIdInput>
  }

  export type LessonCreateWithoutLessonViewLessonIdInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutLessonViewLessonIdInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutLessonViewLessonIdInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutLessonViewLessonIdInput, LessonUncheckedCreateWithoutLessonViewLessonIdInput>
  }

  export type UserUpsertWithoutLessonViewUserIdInput = {
    update: XOR<UserUpdateWithoutLessonViewUserIdInput, UserUncheckedUpdateWithoutLessonViewUserIdInput>
    create: XOR<UserCreateWithoutLessonViewUserIdInput, UserUncheckedCreateWithoutLessonViewUserIdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonViewUserIdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonViewUserIdInput, UserUncheckedUpdateWithoutLessonViewUserIdInput>
  }

  export type UserUpdateWithoutLessonViewUserIdInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonViewUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LessonUpsertWithoutLessonViewLessonIdInput = {
    update: XOR<LessonUpdateWithoutLessonViewLessonIdInput, LessonUncheckedUpdateWithoutLessonViewLessonIdInput>
    create: XOR<LessonCreateWithoutLessonViewLessonIdInput, LessonUncheckedCreateWithoutLessonViewLessonIdInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutLessonViewLessonIdInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutLessonViewLessonIdInput, LessonUncheckedUpdateWithoutLessonViewLessonIdInput>
  }

  export type LessonUpdateWithoutLessonViewLessonIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutLessonViewLessonIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonCreateWithoutChildrenInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutChildrenInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutChildrenInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutChildrenInput, LessonUncheckedCreateWithoutChildrenInput>
  }

  export type LessonCreateWithoutParentInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutParentInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutParentInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutParentInput, LessonUncheckedCreateWithoutParentInput>
  }

  export type LessonCreateManyParentInputEnvelope = {
    data: LessonCreateManyParentInput | LessonCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type LessonTypeCreateWithoutLessonTypeIdInput = {
    name: string
  }

  export type LessonTypeUncheckedCreateWithoutLessonTypeIdInput = {
    id?: number
    name: string
  }

  export type LessonTypeCreateOrConnectWithoutLessonTypeIdInput = {
    where: LessonTypeWhereUniqueInput
    create: XOR<LessonTypeCreateWithoutLessonTypeIdInput, LessonTypeUncheckedCreateWithoutLessonTypeIdInput>
  }

  export type CourseCreateWithoutLessonCourseIdInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutLessonCourseIdInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutLessonCourseIdInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutLessonCourseIdInput, CourseUncheckedCreateWithoutLessonCourseIdInput>
  }

  export type CourseInstructorCreateWithoutCourseInstructorInput = {
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutCourseInstructorCourseIdInput
    user?: UserCreateNestedOneWithoutCourseInstructorUserIdInput
    updatedByUser?: UserCreateNestedOneWithoutCourseInstructorUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseInstructorDeletedInput
  }

  export type CourseInstructorUncheckedCreateWithoutCourseInstructorInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseInstructorCreateOrConnectWithoutCourseInstructorInput = {
    where: CourseInstructorWhereUniqueInput
    create: XOR<CourseInstructorCreateWithoutCourseInstructorInput, CourseInstructorUncheckedCreateWithoutCourseInstructorInput>
  }

  export type UserCreateWithoutLessonCreatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonCreatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonCreatedInput, UserUncheckedCreateWithoutLessonCreatedInput>
  }

  export type UserCreateWithoutLessonUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonUpdatedInput, UserUncheckedCreateWithoutLessonUpdatedInput>
  }

  export type UserCreateWithoutLessonDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLessonDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLessonDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLessonDeletedInput, UserUncheckedCreateWithoutLessonDeletedInput>
  }

  export type LessonContentCreateWithoutLessonInput = {
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lessonContentType: LessonContentTypeCreateNestedOneWithoutLessonContentInput
    updatedByUser?: UserCreateNestedOneWithoutLessonContentUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonContentDeletedInput
  }

  export type LessonContentUncheckedCreateWithoutLessonInput = {
    id?: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateOrConnectWithoutLessonInput = {
    where: LessonContentWhereUniqueInput
    create: XOR<LessonContentCreateWithoutLessonInput, LessonContentUncheckedCreateWithoutLessonInput>
  }

  export type LessonContentCreateManyLessonInputEnvelope = {
    data: LessonContentCreateManyLessonInput | LessonContentCreateManyLessonInput[]
    skipDuplicates?: boolean
  }

  export type LessonViewCreateWithoutLessonsInput = {
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
    users: UserCreateNestedOneWithoutLessonViewUserIdInput
  }

  export type LessonViewUncheckedCreateWithoutLessonsInput = {
    id?: number
    userId: number
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonViewCreateOrConnectWithoutLessonsInput = {
    where: LessonViewWhereUniqueInput
    create: XOR<LessonViewCreateWithoutLessonsInput, LessonViewUncheckedCreateWithoutLessonsInput>
  }

  export type LessonViewCreateManyLessonsInputEnvelope = {
    data: LessonViewCreateManyLessonsInput | LessonViewCreateManyLessonsInput[]
    skipDuplicates?: boolean
  }

  export type LessonAttemptCreateWithoutLessonsInput = {
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
    users: UserCreateNestedOneWithoutLessonAttemptUserIdInput
  }

  export type LessonAttemptUncheckedCreateWithoutLessonsInput = {
    id?: number
    userId: number
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonAttemptCreateOrConnectWithoutLessonsInput = {
    where: LessonAttemptWhereUniqueInput
    create: XOR<LessonAttemptCreateWithoutLessonsInput, LessonAttemptUncheckedCreateWithoutLessonsInput>
  }

  export type LessonAttemptCreateManyLessonsInputEnvelope = {
    data: LessonAttemptCreateManyLessonsInput | LessonAttemptCreateManyLessonsInput[]
    skipDuplicates?: boolean
  }

  export type LessonPrerequisiteCreateWithoutLessonsInput = {
    requiredLesson: LessonCreateNestedOneWithoutLessonPrerequisiteRequiredLessonIdInput
  }

  export type LessonPrerequisiteUncheckedCreateWithoutLessonsInput = {
    id?: number
    requiredLessonId: number
  }

  export type LessonPrerequisiteCreateOrConnectWithoutLessonsInput = {
    where: LessonPrerequisiteWhereUniqueInput
    create: XOR<LessonPrerequisiteCreateWithoutLessonsInput, LessonPrerequisiteUncheckedCreateWithoutLessonsInput>
  }

  export type LessonPrerequisiteCreateManyLessonsInputEnvelope = {
    data: LessonPrerequisiteCreateManyLessonsInput | LessonPrerequisiteCreateManyLessonsInput[]
    skipDuplicates?: boolean
  }

  export type LessonPrerequisiteCreateWithoutRequiredLessonInput = {
    lessons: LessonCreateNestedOneWithoutLessonPrerequisiteLessonIdInput
  }

  export type LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput = {
    id?: number
    lessonId: number
  }

  export type LessonPrerequisiteCreateOrConnectWithoutRequiredLessonInput = {
    where: LessonPrerequisiteWhereUniqueInput
    create: XOR<LessonPrerequisiteCreateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput>
  }

  export type LessonPrerequisiteCreateManyRequiredLessonInputEnvelope = {
    data: LessonPrerequisiteCreateManyRequiredLessonInput | LessonPrerequisiteCreateManyRequiredLessonInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutLessonInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutLessonInput = {
    id?: number
    courseId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutLessonInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutLessonInput, QuestionSetUncheckedCreateWithoutLessonInput>
  }

  export type QuestionSetCreateManyLessonInputEnvelope = {
    data: QuestionSetCreateManyLessonInput | QuestionSetCreateManyLessonInput[]
    skipDuplicates?: boolean
  }

  export type LessonUpsertWithoutChildrenInput = {
    update: XOR<LessonUpdateWithoutChildrenInput, LessonUncheckedUpdateWithoutChildrenInput>
    create: XOR<LessonCreateWithoutChildrenInput, LessonUncheckedCreateWithoutChildrenInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutChildrenInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutChildrenInput, LessonUncheckedUpdateWithoutChildrenInput>
  }

  export type LessonUpdateWithoutChildrenInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUpsertWithWhereUniqueWithoutParentInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutParentInput, LessonUncheckedUpdateWithoutParentInput>
    create: XOR<LessonCreateWithoutParentInput, LessonUncheckedCreateWithoutParentInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutParentInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutParentInput, LessonUncheckedUpdateWithoutParentInput>
  }

  export type LessonUpdateManyWithWhereWithoutParentInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutParentInput>
  }

  export type LessonTypeUpsertWithoutLessonTypeIdInput = {
    update: XOR<LessonTypeUpdateWithoutLessonTypeIdInput, LessonTypeUncheckedUpdateWithoutLessonTypeIdInput>
    create: XOR<LessonTypeCreateWithoutLessonTypeIdInput, LessonTypeUncheckedCreateWithoutLessonTypeIdInput>
    where?: LessonTypeWhereInput
  }

  export type LessonTypeUpdateToOneWithWhereWithoutLessonTypeIdInput = {
    where?: LessonTypeWhereInput
    data: XOR<LessonTypeUpdateWithoutLessonTypeIdInput, LessonTypeUncheckedUpdateWithoutLessonTypeIdInput>
  }

  export type LessonTypeUpdateWithoutLessonTypeIdInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type LessonTypeUncheckedUpdateWithoutLessonTypeIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpsertWithoutLessonCourseIdInput = {
    update: XOR<CourseUpdateWithoutLessonCourseIdInput, CourseUncheckedUpdateWithoutLessonCourseIdInput>
    create: XOR<CourseCreateWithoutLessonCourseIdInput, CourseUncheckedCreateWithoutLessonCourseIdInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutLessonCourseIdInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutLessonCourseIdInput, CourseUncheckedUpdateWithoutLessonCourseIdInput>
  }

  export type CourseUpdateWithoutLessonCourseIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutLessonCourseIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseInstructorUpsertWithoutCourseInstructorInput = {
    update: XOR<CourseInstructorUpdateWithoutCourseInstructorInput, CourseInstructorUncheckedUpdateWithoutCourseInstructorInput>
    create: XOR<CourseInstructorCreateWithoutCourseInstructorInput, CourseInstructorUncheckedCreateWithoutCourseInstructorInput>
    where?: CourseInstructorWhereInput
  }

  export type CourseInstructorUpdateToOneWithWhereWithoutCourseInstructorInput = {
    where?: CourseInstructorWhereInput
    data: XOR<CourseInstructorUpdateWithoutCourseInstructorInput, CourseInstructorUncheckedUpdateWithoutCourseInstructorInput>
  }

  export type CourseInstructorUpdateWithoutCourseInstructorInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutCourseInstructorCourseIdNestedInput
    user?: UserUpdateOneWithoutCourseInstructorUserIdNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseInstructorUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseInstructorDeletedNestedInput
  }

  export type CourseInstructorUncheckedUpdateWithoutCourseInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutLessonCreatedInput = {
    update: XOR<UserUpdateWithoutLessonCreatedInput, UserUncheckedUpdateWithoutLessonCreatedInput>
    create: XOR<UserCreateWithoutLessonCreatedInput, UserUncheckedCreateWithoutLessonCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonCreatedInput, UserUncheckedUpdateWithoutLessonCreatedInput>
  }

  export type UserUpdateWithoutLessonCreatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutLessonUpdatedInput = {
    update: XOR<UserUpdateWithoutLessonUpdatedInput, UserUncheckedUpdateWithoutLessonUpdatedInput>
    create: XOR<UserCreateWithoutLessonUpdatedInput, UserUncheckedCreateWithoutLessonUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonUpdatedInput, UserUncheckedUpdateWithoutLessonUpdatedInput>
  }

  export type UserUpdateWithoutLessonUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutLessonDeletedInput = {
    update: XOR<UserUpdateWithoutLessonDeletedInput, UserUncheckedUpdateWithoutLessonDeletedInput>
    create: XOR<UserCreateWithoutLessonDeletedInput, UserUncheckedCreateWithoutLessonDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLessonDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLessonDeletedInput, UserUncheckedUpdateWithoutLessonDeletedInput>
  }

  export type UserUpdateWithoutLessonDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLessonDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LessonContentUpsertWithWhereUniqueWithoutLessonInput = {
    where: LessonContentWhereUniqueInput
    update: XOR<LessonContentUpdateWithoutLessonInput, LessonContentUncheckedUpdateWithoutLessonInput>
    create: XOR<LessonContentCreateWithoutLessonInput, LessonContentUncheckedCreateWithoutLessonInput>
  }

  export type LessonContentUpdateWithWhereUniqueWithoutLessonInput = {
    where: LessonContentWhereUniqueInput
    data: XOR<LessonContentUpdateWithoutLessonInput, LessonContentUncheckedUpdateWithoutLessonInput>
  }

  export type LessonContentUpdateManyWithWhereWithoutLessonInput = {
    where: LessonContentScalarWhereInput
    data: XOR<LessonContentUpdateManyMutationInput, LessonContentUncheckedUpdateManyWithoutLessonInput>
  }

  export type LessonViewUpsertWithWhereUniqueWithoutLessonsInput = {
    where: LessonViewWhereUniqueInput
    update: XOR<LessonViewUpdateWithoutLessonsInput, LessonViewUncheckedUpdateWithoutLessonsInput>
    create: XOR<LessonViewCreateWithoutLessonsInput, LessonViewUncheckedCreateWithoutLessonsInput>
  }

  export type LessonViewUpdateWithWhereUniqueWithoutLessonsInput = {
    where: LessonViewWhereUniqueInput
    data: XOR<LessonViewUpdateWithoutLessonsInput, LessonViewUncheckedUpdateWithoutLessonsInput>
  }

  export type LessonViewUpdateManyWithWhereWithoutLessonsInput = {
    where: LessonViewScalarWhereInput
    data: XOR<LessonViewUpdateManyMutationInput, LessonViewUncheckedUpdateManyWithoutLessonsInput>
  }

  export type LessonViewScalarWhereInput = {
    AND?: LessonViewScalarWhereInput | LessonViewScalarWhereInput[]
    OR?: LessonViewScalarWhereInput[]
    NOT?: LessonViewScalarWhereInput | LessonViewScalarWhereInput[]
    id?: IntFilter<"LessonView"> | number
    userId?: IntFilter<"LessonView"> | number
    lessonId?: IntFilter<"LessonView"> | number
    completed?: BoolFilter<"LessonView"> | boolean
    watchedTime?: IntFilter<"LessonView"> | number
    readPages?: IntFilter<"LessonView"> | number
    completedAt?: DateTimeNullableFilter<"LessonView"> | Date | string | null
    createdAt?: DateTimeFilter<"LessonView"> | Date | string
  }

  export type LessonAttemptUpsertWithWhereUniqueWithoutLessonsInput = {
    where: LessonAttemptWhereUniqueInput
    update: XOR<LessonAttemptUpdateWithoutLessonsInput, LessonAttemptUncheckedUpdateWithoutLessonsInput>
    create: XOR<LessonAttemptCreateWithoutLessonsInput, LessonAttemptUncheckedCreateWithoutLessonsInput>
  }

  export type LessonAttemptUpdateWithWhereUniqueWithoutLessonsInput = {
    where: LessonAttemptWhereUniqueInput
    data: XOR<LessonAttemptUpdateWithoutLessonsInput, LessonAttemptUncheckedUpdateWithoutLessonsInput>
  }

  export type LessonAttemptUpdateManyWithWhereWithoutLessonsInput = {
    where: LessonAttemptScalarWhereInput
    data: XOR<LessonAttemptUpdateManyMutationInput, LessonAttemptUncheckedUpdateManyWithoutLessonsInput>
  }

  export type LessonAttemptScalarWhereInput = {
    AND?: LessonAttemptScalarWhereInput | LessonAttemptScalarWhereInput[]
    OR?: LessonAttemptScalarWhereInput[]
    NOT?: LessonAttemptScalarWhereInput | LessonAttemptScalarWhereInput[]
    id?: IntFilter<"LessonAttempt"> | number
    userId?: IntFilter<"LessonAttempt"> | number
    lessonId?: IntFilter<"LessonAttempt"> | number
    attemptNo?: IntFilter<"LessonAttempt"> | number
    completedAt?: DateTimeNullableFilter<"LessonAttempt"> | Date | string | null
    createdAt?: DateTimeFilter<"LessonAttempt"> | Date | string
  }

  export type LessonPrerequisiteUpsertWithWhereUniqueWithoutLessonsInput = {
    where: LessonPrerequisiteWhereUniqueInput
    update: XOR<LessonPrerequisiteUpdateWithoutLessonsInput, LessonPrerequisiteUncheckedUpdateWithoutLessonsInput>
    create: XOR<LessonPrerequisiteCreateWithoutLessonsInput, LessonPrerequisiteUncheckedCreateWithoutLessonsInput>
  }

  export type LessonPrerequisiteUpdateWithWhereUniqueWithoutLessonsInput = {
    where: LessonPrerequisiteWhereUniqueInput
    data: XOR<LessonPrerequisiteUpdateWithoutLessonsInput, LessonPrerequisiteUncheckedUpdateWithoutLessonsInput>
  }

  export type LessonPrerequisiteUpdateManyWithWhereWithoutLessonsInput = {
    where: LessonPrerequisiteScalarWhereInput
    data: XOR<LessonPrerequisiteUpdateManyMutationInput, LessonPrerequisiteUncheckedUpdateManyWithoutLessonsInput>
  }

  export type LessonPrerequisiteScalarWhereInput = {
    AND?: LessonPrerequisiteScalarWhereInput | LessonPrerequisiteScalarWhereInput[]
    OR?: LessonPrerequisiteScalarWhereInput[]
    NOT?: LessonPrerequisiteScalarWhereInput | LessonPrerequisiteScalarWhereInput[]
    id?: IntFilter<"LessonPrerequisite"> | number
    lessonId?: IntFilter<"LessonPrerequisite"> | number
    requiredLessonId?: IntFilter<"LessonPrerequisite"> | number
  }

  export type LessonPrerequisiteUpsertWithWhereUniqueWithoutRequiredLessonInput = {
    where: LessonPrerequisiteWhereUniqueInput
    update: XOR<LessonPrerequisiteUpdateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedUpdateWithoutRequiredLessonInput>
    create: XOR<LessonPrerequisiteCreateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedCreateWithoutRequiredLessonInput>
  }

  export type LessonPrerequisiteUpdateWithWhereUniqueWithoutRequiredLessonInput = {
    where: LessonPrerequisiteWhereUniqueInput
    data: XOR<LessonPrerequisiteUpdateWithoutRequiredLessonInput, LessonPrerequisiteUncheckedUpdateWithoutRequiredLessonInput>
  }

  export type LessonPrerequisiteUpdateManyWithWhereWithoutRequiredLessonInput = {
    where: LessonPrerequisiteScalarWhereInput
    data: XOR<LessonPrerequisiteUpdateManyMutationInput, LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonInput>
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutLessonInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutLessonInput, QuestionSetUncheckedUpdateWithoutLessonInput>
    create: XOR<QuestionSetCreateWithoutLessonInput, QuestionSetUncheckedCreateWithoutLessonInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutLessonInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutLessonInput, QuestionSetUncheckedUpdateWithoutLessonInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutLessonInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutLessonInput>
  }

  export type UserCreateWithoutOrganizationsCreatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationsCreatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationsCreatedInput, UserUncheckedCreateWithoutOrganizationsCreatedInput>
  }

  export type UserCreateWithoutOrganizationsUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationsUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationsUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationsUpdatedInput, UserUncheckedCreateWithoutOrganizationsUpdatedInput>
  }

  export type UserCreateWithoutOrganizationsDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationsDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationsDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationsDeletedInput, UserUncheckedCreateWithoutOrganizationsDeletedInput>
  }

  export type DepartmentCreateWithoutOrganizationInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutOrganizationInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutOrganizationInput, DepartmentUncheckedCreateWithoutOrganizationInput>
  }

  export type DepartmentCreateManyOrganizationInputEnvelope = {
    data: DepartmentCreateManyOrganizationInput | DepartmentCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrganizationsCreatedInput = {
    update: XOR<UserUpdateWithoutOrganizationsCreatedInput, UserUncheckedUpdateWithoutOrganizationsCreatedInput>
    create: XOR<UserCreateWithoutOrganizationsCreatedInput, UserUncheckedCreateWithoutOrganizationsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizationsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizationsCreatedInput, UserUncheckedUpdateWithoutOrganizationsCreatedInput>
  }

  export type UserUpdateWithoutOrganizationsCreatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationsCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutOrganizationsUpdatedInput = {
    update: XOR<UserUpdateWithoutOrganizationsUpdatedInput, UserUncheckedUpdateWithoutOrganizationsUpdatedInput>
    create: XOR<UserCreateWithoutOrganizationsUpdatedInput, UserUncheckedCreateWithoutOrganizationsUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizationsUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizationsUpdatedInput, UserUncheckedUpdateWithoutOrganizationsUpdatedInput>
  }

  export type UserUpdateWithoutOrganizationsUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationsUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutOrganizationsDeletedInput = {
    update: XOR<UserUpdateWithoutOrganizationsDeletedInput, UserUncheckedUpdateWithoutOrganizationsDeletedInput>
    create: XOR<UserCreateWithoutOrganizationsDeletedInput, UserUncheckedCreateWithoutOrganizationsDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrganizationsDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrganizationsDeletedInput, UserUncheckedUpdateWithoutOrganizationsDeletedInput>
  }

  export type UserUpdateWithoutOrganizationsDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationsDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutOrganizationInput, DepartmentUncheckedUpdateWithoutOrganizationInput>
    create: XOR<DepartmentCreateWithoutOrganizationInput, DepartmentUncheckedCreateWithoutOrganizationInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutOrganizationInput, DepartmentUncheckedUpdateWithoutOrganizationInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutOrganizationInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: IntFilter<"Department"> | number
    organizationId?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    isActive?: BoolFilter<"Department"> | boolean
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Department"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Department"> | Date | string | null
  }

  export type QuestionTypeCreateWithoutQuestionBankInput = {
    name: string
    isActive?: boolean
  }

  export type QuestionTypeUncheckedCreateWithoutQuestionBankInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type QuestionTypeCreateOrConnectWithoutQuestionBankInput = {
    where: QuestionTypeWhereUniqueInput
    create: XOR<QuestionTypeCreateWithoutQuestionBankInput, QuestionTypeUncheckedCreateWithoutQuestionBankInput>
  }

  export type QuestionLevelCreateWithoutQuestionBankInput = {
    name: string
    isActive?: boolean
  }

  export type QuestionLevelUncheckedCreateWithoutQuestionBankInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type QuestionLevelCreateOrConnectWithoutQuestionBankInput = {
    where: QuestionLevelWhereUniqueInput
    create: XOR<QuestionLevelCreateWithoutQuestionBankInput, QuestionLevelUncheckedCreateWithoutQuestionBankInput>
  }

  export type QuestionSetCreateWithoutQuestionBankInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutQuestionBankInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutQuestionBankInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutQuestionBankInput, QuestionSetUncheckedCreateWithoutQuestionBankInput>
  }

  export type UserCreateWithoutQuestionBankCreatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionBankCreatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionBankCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionBankCreatedInput, UserUncheckedCreateWithoutQuestionBankCreatedInput>
  }

  export type UserCreateWithoutQuestionBankUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionBankUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionBankUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionBankUpdatedInput, UserUncheckedCreateWithoutQuestionBankUpdatedInput>
  }

  export type UserCreateWithoutQuestionBankDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionBankDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionBankDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionBankDeletedInput, UserUncheckedCreateWithoutQuestionBankDeletedInput>
  }

  export type AnswerSubmissionCreateWithoutQuestionBankInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
    user: UserCreateNestedOneWithoutAnswerSubmissionUserInput
    questionSet: QuestionSetCreateNestedOneWithoutAnswerSubmissionInput
  }

  export type AnswerSubmissionUncheckedCreateWithoutQuestionBankInput = {
    id?: number
    userId: number
    questionSetId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type AnswerSubmissionCreateOrConnectWithoutQuestionBankInput = {
    where: AnswerSubmissionWhereUniqueInput
    create: XOR<AnswerSubmissionCreateWithoutQuestionBankInput, AnswerSubmissionUncheckedCreateWithoutQuestionBankInput>
  }

  export type AnswerSubmissionCreateManyQuestionBankInputEnvelope = {
    data: AnswerSubmissionCreateManyQuestionBankInput | AnswerSubmissionCreateManyQuestionBankInput[]
    skipDuplicates?: boolean
  }

  export type QuestionTypeUpsertWithoutQuestionBankInput = {
    update: XOR<QuestionTypeUpdateWithoutQuestionBankInput, QuestionTypeUncheckedUpdateWithoutQuestionBankInput>
    create: XOR<QuestionTypeCreateWithoutQuestionBankInput, QuestionTypeUncheckedCreateWithoutQuestionBankInput>
    where?: QuestionTypeWhereInput
  }

  export type QuestionTypeUpdateToOneWithWhereWithoutQuestionBankInput = {
    where?: QuestionTypeWhereInput
    data: XOR<QuestionTypeUpdateWithoutQuestionBankInput, QuestionTypeUncheckedUpdateWithoutQuestionBankInput>
  }

  export type QuestionTypeUpdateWithoutQuestionBankInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionTypeUncheckedUpdateWithoutQuestionBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionLevelUpsertWithoutQuestionBankInput = {
    update: XOR<QuestionLevelUpdateWithoutQuestionBankInput, QuestionLevelUncheckedUpdateWithoutQuestionBankInput>
    create: XOR<QuestionLevelCreateWithoutQuestionBankInput, QuestionLevelUncheckedCreateWithoutQuestionBankInput>
    where?: QuestionLevelWhereInput
  }

  export type QuestionLevelUpdateToOneWithWhereWithoutQuestionBankInput = {
    where?: QuestionLevelWhereInput
    data: XOR<QuestionLevelUpdateWithoutQuestionBankInput, QuestionLevelUncheckedUpdateWithoutQuestionBankInput>
  }

  export type QuestionLevelUpdateWithoutQuestionBankInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionLevelUncheckedUpdateWithoutQuestionBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionSetUpsertWithoutQuestionBankInput = {
    update: XOR<QuestionSetUpdateWithoutQuestionBankInput, QuestionSetUncheckedUpdateWithoutQuestionBankInput>
    create: XOR<QuestionSetCreateWithoutQuestionBankInput, QuestionSetUncheckedCreateWithoutQuestionBankInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutQuestionBankInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutQuestionBankInput, QuestionSetUncheckedUpdateWithoutQuestionBankInput>
  }

  export type QuestionSetUpdateWithoutQuestionBankInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutQuestionBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type UserUpsertWithoutQuestionBankCreatedInput = {
    update: XOR<UserUpdateWithoutQuestionBankCreatedInput, UserUncheckedUpdateWithoutQuestionBankCreatedInput>
    create: XOR<UserCreateWithoutQuestionBankCreatedInput, UserUncheckedCreateWithoutQuestionBankCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionBankCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionBankCreatedInput, UserUncheckedUpdateWithoutQuestionBankCreatedInput>
  }

  export type UserUpdateWithoutQuestionBankCreatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionBankCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutQuestionBankUpdatedInput = {
    update: XOR<UserUpdateWithoutQuestionBankUpdatedInput, UserUncheckedUpdateWithoutQuestionBankUpdatedInput>
    create: XOR<UserCreateWithoutQuestionBankUpdatedInput, UserUncheckedCreateWithoutQuestionBankUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionBankUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionBankUpdatedInput, UserUncheckedUpdateWithoutQuestionBankUpdatedInput>
  }

  export type UserUpdateWithoutQuestionBankUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionBankUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutQuestionBankDeletedInput = {
    update: XOR<UserUpdateWithoutQuestionBankDeletedInput, UserUncheckedUpdateWithoutQuestionBankDeletedInput>
    create: XOR<UserCreateWithoutQuestionBankDeletedInput, UserUncheckedCreateWithoutQuestionBankDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionBankDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionBankDeletedInput, UserUncheckedUpdateWithoutQuestionBankDeletedInput>
  }

  export type UserUpdateWithoutQuestionBankDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionBankDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionBankInput = {
    where: AnswerSubmissionWhereUniqueInput
    update: XOR<AnswerSubmissionUpdateWithoutQuestionBankInput, AnswerSubmissionUncheckedUpdateWithoutQuestionBankInput>
    create: XOR<AnswerSubmissionCreateWithoutQuestionBankInput, AnswerSubmissionUncheckedCreateWithoutQuestionBankInput>
  }

  export type AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionBankInput = {
    where: AnswerSubmissionWhereUniqueInput
    data: XOR<AnswerSubmissionUpdateWithoutQuestionBankInput, AnswerSubmissionUncheckedUpdateWithoutQuestionBankInput>
  }

  export type AnswerSubmissionUpdateManyWithWhereWithoutQuestionBankInput = {
    where: AnswerSubmissionScalarWhereInput
    data: XOR<AnswerSubmissionUpdateManyMutationInput, AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankInput>
  }

  export type AnswerSubmissionScalarWhereInput = {
    AND?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
    OR?: AnswerSubmissionScalarWhereInput[]
    NOT?: AnswerSubmissionScalarWhereInput | AnswerSubmissionScalarWhereInput[]
    id?: IntFilter<"AnswerSubmission"> | number
    userId?: IntFilter<"AnswerSubmission"> | number
    questionSetId?: IntFilter<"AnswerSubmission"> | number
    questionBankId?: IntFilter<"AnswerSubmission"> | number
    selectedChoice?: JsonNullableFilter<"AnswerSubmission">
    filledText?: StringNullableFilter<"AnswerSubmission"> | string | null
    fileUrl?: StringNullableFilter<"AnswerSubmission"> | string | null
    isCorrect?: BoolFilter<"AnswerSubmission"> | boolean
    submittedAt?: DateTimeFilter<"AnswerSubmission"> | Date | string
  }

  export type QuestionBankCreateWithoutQuestionLevelInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateWithoutQuestionLevelInput = {
    id?: number
    questionTypeId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankCreateOrConnectWithoutQuestionLevelInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutQuestionLevelInput, QuestionBankUncheckedCreateWithoutQuestionLevelInput>
  }

  export type QuestionBankCreateManyQuestionLevelInputEnvelope = {
    data: QuestionBankCreateManyQuestionLevelInput | QuestionBankCreateManyQuestionLevelInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutQuestionLevelInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutQuestionLevelInput, QuestionBankUncheckedUpdateWithoutQuestionLevelInput>
    create: XOR<QuestionBankCreateWithoutQuestionLevelInput, QuestionBankUncheckedCreateWithoutQuestionLevelInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutQuestionLevelInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutQuestionLevelInput, QuestionBankUncheckedUpdateWithoutQuestionLevelInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutQuestionLevelInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutQuestionLevelInput>
  }

  export type QuestionBankScalarWhereInput = {
    AND?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
    OR?: QuestionBankScalarWhereInput[]
    NOT?: QuestionBankScalarWhereInput | QuestionBankScalarWhereInput[]
    id?: IntFilter<"QuestionBank"> | number
    questionTypeId?: IntFilter<"QuestionBank"> | number
    questionLevelId?: IntFilter<"QuestionBank"> | number
    questionSetId?: IntFilter<"QuestionBank"> | number
    questionText?: StringFilter<"QuestionBank"> | string
    score?: IntFilter<"QuestionBank"> | number
    imageUrl?: StringNullableFilter<"QuestionBank"> | string | null
    answerData?: JsonFilter<"QuestionBank">
    explanation?: StringNullableFilter<"QuestionBank"> | string | null
    versioning?: StringNullableFilter<"QuestionBank"> | string | null
    creationMethod?: EnumCreationMethodFilter<"QuestionBank"> | $Enums.CreationMethod
    sortOrder?: IntFilter<"QuestionBank"> | number
    randomize?: BoolFilter<"QuestionBank"> | boolean
    isActive?: BoolFilter<"QuestionBank"> | boolean
    createdBy?: IntFilter<"QuestionBank"> | number
    updatedBy?: IntNullableFilter<"QuestionBank"> | number | null
    deletedBy?: IntNullableFilter<"QuestionBank"> | number | null
    createdAt?: DateTimeFilter<"QuestionBank"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuestionBank"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"QuestionBank"> | Date | string | null
  }

  export type CourseCreateWithoutQuestionSetCourseIdInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutQuestionSetCourseIdInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutQuestionSetCourseIdInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutQuestionSetCourseIdInput, CourseUncheckedCreateWithoutQuestionSetCourseIdInput>
  }

  export type LessonCreateWithoutQuestionSetLessonIdInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
  }

  export type LessonUncheckedCreateWithoutQuestionSetLessonIdInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
  }

  export type LessonCreateOrConnectWithoutQuestionSetLessonIdInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutQuestionSetLessonIdInput, LessonUncheckedCreateWithoutQuestionSetLessonIdInput>
  }

  export type TestTypeCreateWithoutQuestionSetInput = {
    name: string
    isActive?: boolean
  }

  export type TestTypeUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    name: string
    isActive?: boolean
  }

  export type TestTypeCreateOrConnectWithoutQuestionSetInput = {
    where: TestTypeWhereUniqueInput
    create: XOR<TestTypeCreateWithoutQuestionSetInput, TestTypeUncheckedCreateWithoutQuestionSetInput>
  }

  export type UserCreateWithoutQuestionSetCreatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionSetCreatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionSetCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionSetCreatedInput, UserUncheckedCreateWithoutQuestionSetCreatedInput>
  }

  export type UserCreateWithoutQuestionSetUpdatedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionSetUpdatedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionSetUpdatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionSetUpdatedInput, UserUncheckedCreateWithoutQuestionSetUpdatedInput>
  }

  export type UserCreateWithoutQuestionSetDeletedInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuestionSetDeletedInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuestionSetDeletedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuestionSetDeletedInput, UserUncheckedCreateWithoutQuestionSetDeletedInput>
  }

  export type QuestionBankCreateWithoutQuestionSetInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankCreateOrConnectWithoutQuestionSetInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutQuestionSetInput, QuestionBankUncheckedCreateWithoutQuestionSetInput>
  }

  export type QuestionBankCreateManyQuestionSetInputEnvelope = {
    data: QuestionBankCreateManyQuestionSetInput | QuestionBankCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCriteriaCreateWithoutQuestionSetInput = {
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
    resultLevel: ResultLevelCreateNestedOneWithoutScoreCriteriaInput
  }

  export type ScoreCriteriaUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    resultLevelId: number
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
  }

  export type ScoreCriteriaCreateOrConnectWithoutQuestionSetInput = {
    where: ScoreCriteriaWhereUniqueInput
    create: XOR<ScoreCriteriaCreateWithoutQuestionSetInput, ScoreCriteriaUncheckedCreateWithoutQuestionSetInput>
  }

  export type ScoreCriteriaCreateManyQuestionSetInputEnvelope = {
    data: ScoreCriteriaCreateManyQuestionSetInput | ScoreCriteriaCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type TestResultCreateWithoutQuestionSetInput = {
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTestResultUserInput
    resultLevel: ResultLevelCreateNestedOneWithoutTestResultInput
  }

  export type TestResultUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    userId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type TestResultCreateOrConnectWithoutQuestionSetInput = {
    where: TestResultWhereUniqueInput
    create: XOR<TestResultCreateWithoutQuestionSetInput, TestResultUncheckedCreateWithoutQuestionSetInput>
  }

  export type TestResultCreateManyQuestionSetInputEnvelope = {
    data: TestResultCreateManyQuestionSetInput | TestResultCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type AnswerSubmissionCreateWithoutQuestionSetInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
    user: UserCreateNestedOneWithoutAnswerSubmissionUserInput
    questionBank: QuestionBankCreateNestedOneWithoutAnswerSubmissionInput
  }

  export type AnswerSubmissionUncheckedCreateWithoutQuestionSetInput = {
    id?: number
    userId: number
    questionBankId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type AnswerSubmissionCreateOrConnectWithoutQuestionSetInput = {
    where: AnswerSubmissionWhereUniqueInput
    create: XOR<AnswerSubmissionCreateWithoutQuestionSetInput, AnswerSubmissionUncheckedCreateWithoutQuestionSetInput>
  }

  export type AnswerSubmissionCreateManyQuestionSetInputEnvelope = {
    data: AnswerSubmissionCreateManyQuestionSetInput | AnswerSubmissionCreateManyQuestionSetInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutQuestionSetCourseIdInput = {
    update: XOR<CourseUpdateWithoutQuestionSetCourseIdInput, CourseUncheckedUpdateWithoutQuestionSetCourseIdInput>
    create: XOR<CourseCreateWithoutQuestionSetCourseIdInput, CourseUncheckedCreateWithoutQuestionSetCourseIdInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutQuestionSetCourseIdInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutQuestionSetCourseIdInput, CourseUncheckedUpdateWithoutQuestionSetCourseIdInput>
  }

  export type CourseUpdateWithoutQuestionSetCourseIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutQuestionSetCourseIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type LessonUpsertWithoutQuestionSetLessonIdInput = {
    update: XOR<LessonUpdateWithoutQuestionSetLessonIdInput, LessonUncheckedUpdateWithoutQuestionSetLessonIdInput>
    create: XOR<LessonCreateWithoutQuestionSetLessonIdInput, LessonUncheckedCreateWithoutQuestionSetLessonIdInput>
    where?: LessonWhereInput
  }

  export type LessonUpdateToOneWithWhereWithoutQuestionSetLessonIdInput = {
    where?: LessonWhereInput
    data: XOR<LessonUpdateWithoutQuestionSetLessonIdInput, LessonUncheckedUpdateWithoutQuestionSetLessonIdInput>
  }

  export type LessonUpdateWithoutQuestionSetLessonIdInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutQuestionSetLessonIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
  }

  export type TestTypeUpsertWithoutQuestionSetInput = {
    update: XOR<TestTypeUpdateWithoutQuestionSetInput, TestTypeUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<TestTypeCreateWithoutQuestionSetInput, TestTypeUncheckedCreateWithoutQuestionSetInput>
    where?: TestTypeWhereInput
  }

  export type TestTypeUpdateToOneWithWhereWithoutQuestionSetInput = {
    where?: TestTypeWhereInput
    data: XOR<TestTypeUpdateWithoutQuestionSetInput, TestTypeUncheckedUpdateWithoutQuestionSetInput>
  }

  export type TestTypeUpdateWithoutQuestionSetInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TestTypeUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUpsertWithoutQuestionSetCreatedInput = {
    update: XOR<UserUpdateWithoutQuestionSetCreatedInput, UserUncheckedUpdateWithoutQuestionSetCreatedInput>
    create: XOR<UserCreateWithoutQuestionSetCreatedInput, UserUncheckedCreateWithoutQuestionSetCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionSetCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionSetCreatedInput, UserUncheckedUpdateWithoutQuestionSetCreatedInput>
  }

  export type UserUpdateWithoutQuestionSetCreatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionSetCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutQuestionSetUpdatedInput = {
    update: XOR<UserUpdateWithoutQuestionSetUpdatedInput, UserUncheckedUpdateWithoutQuestionSetUpdatedInput>
    create: XOR<UserCreateWithoutQuestionSetUpdatedInput, UserUncheckedCreateWithoutQuestionSetUpdatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionSetUpdatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionSetUpdatedInput, UserUncheckedUpdateWithoutQuestionSetUpdatedInput>
  }

  export type UserUpdateWithoutQuestionSetUpdatedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionSetUpdatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutQuestionSetDeletedInput = {
    update: XOR<UserUpdateWithoutQuestionSetDeletedInput, UserUncheckedUpdateWithoutQuestionSetDeletedInput>
    create: XOR<UserCreateWithoutQuestionSetDeletedInput, UserUncheckedCreateWithoutQuestionSetDeletedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuestionSetDeletedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuestionSetDeletedInput, UserUncheckedUpdateWithoutQuestionSetDeletedInput>
  }

  export type UserUpdateWithoutQuestionSetDeletedInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuestionSetDeletedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutQuestionSetInput, QuestionBankUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<QuestionBankCreateWithoutQuestionSetInput, QuestionBankUncheckedCreateWithoutQuestionSetInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutQuestionSetInput, QuestionBankUncheckedUpdateWithoutQuestionSetInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutQuestionSetInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type ScoreCriteriaUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: ScoreCriteriaWhereUniqueInput
    update: XOR<ScoreCriteriaUpdateWithoutQuestionSetInput, ScoreCriteriaUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<ScoreCriteriaCreateWithoutQuestionSetInput, ScoreCriteriaUncheckedCreateWithoutQuestionSetInput>
  }

  export type ScoreCriteriaUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: ScoreCriteriaWhereUniqueInput
    data: XOR<ScoreCriteriaUpdateWithoutQuestionSetInput, ScoreCriteriaUncheckedUpdateWithoutQuestionSetInput>
  }

  export type ScoreCriteriaUpdateManyWithWhereWithoutQuestionSetInput = {
    where: ScoreCriteriaScalarWhereInput
    data: XOR<ScoreCriteriaUpdateManyMutationInput, ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type ScoreCriteriaScalarWhereInput = {
    AND?: ScoreCriteriaScalarWhereInput | ScoreCriteriaScalarWhereInput[]
    OR?: ScoreCriteriaScalarWhereInput[]
    NOT?: ScoreCriteriaScalarWhereInput | ScoreCriteriaScalarWhereInput[]
    id?: IntFilter<"ScoreCriteria"> | number
    questionSetId?: IntFilter<"ScoreCriteria"> | number
    resultLevelId?: IntFilter<"ScoreCriteria"> | number
    minScore?: IntFilter<"ScoreCriteria"> | number
    maxScore?: IntFilter<"ScoreCriteria"> | number
    description?: StringNullableFilter<"ScoreCriteria"> | string | null
    updatedAt?: DateTimeNullableFilter<"ScoreCriteria"> | Date | string | null
  }

  export type TestResultUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: TestResultWhereUniqueInput
    update: XOR<TestResultUpdateWithoutQuestionSetInput, TestResultUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<TestResultCreateWithoutQuestionSetInput, TestResultUncheckedCreateWithoutQuestionSetInput>
  }

  export type TestResultUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: TestResultWhereUniqueInput
    data: XOR<TestResultUpdateWithoutQuestionSetInput, TestResultUncheckedUpdateWithoutQuestionSetInput>
  }

  export type TestResultUpdateManyWithWhereWithoutQuestionSetInput = {
    where: TestResultScalarWhereInput
    data: XOR<TestResultUpdateManyMutationInput, TestResultUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type TestResultScalarWhereInput = {
    AND?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
    OR?: TestResultScalarWhereInput[]
    NOT?: TestResultScalarWhereInput | TestResultScalarWhereInput[]
    id?: IntFilter<"TestResult"> | number
    userId?: IntFilter<"TestResult"> | number
    questionSetId?: IntFilter<"TestResult"> | number
    resultLevelId?: IntFilter<"TestResult"> | number
    rawScore?: IntFilter<"TestResult"> | number
    normalizedScore?: IntFilter<"TestResult"> | number
    attemptNo?: IntFilter<"TestResult"> | number
    completedAt?: DateTimeNullableFilter<"TestResult"> | Date | string | null
  }

  export type AnswerSubmissionUpsertWithWhereUniqueWithoutQuestionSetInput = {
    where: AnswerSubmissionWhereUniqueInput
    update: XOR<AnswerSubmissionUpdateWithoutQuestionSetInput, AnswerSubmissionUncheckedUpdateWithoutQuestionSetInput>
    create: XOR<AnswerSubmissionCreateWithoutQuestionSetInput, AnswerSubmissionUncheckedCreateWithoutQuestionSetInput>
  }

  export type AnswerSubmissionUpdateWithWhereUniqueWithoutQuestionSetInput = {
    where: AnswerSubmissionWhereUniqueInput
    data: XOR<AnswerSubmissionUpdateWithoutQuestionSetInput, AnswerSubmissionUncheckedUpdateWithoutQuestionSetInput>
  }

  export type AnswerSubmissionUpdateManyWithWhereWithoutQuestionSetInput = {
    where: AnswerSubmissionScalarWhereInput
    data: XOR<AnswerSubmissionUpdateManyMutationInput, AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetInput>
  }

  export type QuestionBankCreateWithoutQuestionTypeInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateWithoutQuestionTypeInput = {
    id?: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankCreateOrConnectWithoutQuestionTypeInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutQuestionTypeInput, QuestionBankUncheckedCreateWithoutQuestionTypeInput>
  }

  export type QuestionBankCreateManyQuestionTypeInputEnvelope = {
    data: QuestionBankCreateManyQuestionTypeInput | QuestionBankCreateManyQuestionTypeInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutQuestionTypeInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutQuestionTypeInput, QuestionBankUncheckedUpdateWithoutQuestionTypeInput>
    create: XOR<QuestionBankCreateWithoutQuestionTypeInput, QuestionBankUncheckedCreateWithoutQuestionTypeInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutQuestionTypeInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutQuestionTypeInput, QuestionBankUncheckedUpdateWithoutQuestionTypeInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutQuestionTypeInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutQuestionTypeInput>
  }

  export type ScoreCriteriaCreateWithoutResultLevelInput = {
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
    questionSet: QuestionSetCreateNestedOneWithoutScoreCriteriaInput
  }

  export type ScoreCriteriaUncheckedCreateWithoutResultLevelInput = {
    id?: number
    questionSetId: number
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
  }

  export type ScoreCriteriaCreateOrConnectWithoutResultLevelInput = {
    where: ScoreCriteriaWhereUniqueInput
    create: XOR<ScoreCriteriaCreateWithoutResultLevelInput, ScoreCriteriaUncheckedCreateWithoutResultLevelInput>
  }

  export type ScoreCriteriaCreateManyResultLevelInputEnvelope = {
    data: ScoreCriteriaCreateManyResultLevelInput | ScoreCriteriaCreateManyResultLevelInput[]
    skipDuplicates?: boolean
  }

  export type TestResultCreateWithoutResultLevelInput = {
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutTestResultUserInput
    questionSet: QuestionSetCreateNestedOneWithoutTestResultInput
  }

  export type TestResultUncheckedCreateWithoutResultLevelInput = {
    id?: number
    userId: number
    questionSetId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type TestResultCreateOrConnectWithoutResultLevelInput = {
    where: TestResultWhereUniqueInput
    create: XOR<TestResultCreateWithoutResultLevelInput, TestResultUncheckedCreateWithoutResultLevelInput>
  }

  export type TestResultCreateManyResultLevelInputEnvelope = {
    data: TestResultCreateManyResultLevelInput | TestResultCreateManyResultLevelInput[]
    skipDuplicates?: boolean
  }

  export type ScoreCriteriaUpsertWithWhereUniqueWithoutResultLevelInput = {
    where: ScoreCriteriaWhereUniqueInput
    update: XOR<ScoreCriteriaUpdateWithoutResultLevelInput, ScoreCriteriaUncheckedUpdateWithoutResultLevelInput>
    create: XOR<ScoreCriteriaCreateWithoutResultLevelInput, ScoreCriteriaUncheckedCreateWithoutResultLevelInput>
  }

  export type ScoreCriteriaUpdateWithWhereUniqueWithoutResultLevelInput = {
    where: ScoreCriteriaWhereUniqueInput
    data: XOR<ScoreCriteriaUpdateWithoutResultLevelInput, ScoreCriteriaUncheckedUpdateWithoutResultLevelInput>
  }

  export type ScoreCriteriaUpdateManyWithWhereWithoutResultLevelInput = {
    where: ScoreCriteriaScalarWhereInput
    data: XOR<ScoreCriteriaUpdateManyMutationInput, ScoreCriteriaUncheckedUpdateManyWithoutResultLevelInput>
  }

  export type TestResultUpsertWithWhereUniqueWithoutResultLevelInput = {
    where: TestResultWhereUniqueInput
    update: XOR<TestResultUpdateWithoutResultLevelInput, TestResultUncheckedUpdateWithoutResultLevelInput>
    create: XOR<TestResultCreateWithoutResultLevelInput, TestResultUncheckedCreateWithoutResultLevelInput>
  }

  export type TestResultUpdateWithWhereUniqueWithoutResultLevelInput = {
    where: TestResultWhereUniqueInput
    data: XOR<TestResultUpdateWithoutResultLevelInput, TestResultUncheckedUpdateWithoutResultLevelInput>
  }

  export type TestResultUpdateManyWithWhereWithoutResultLevelInput = {
    where: TestResultScalarWhereInput
    data: XOR<TestResultUpdateManyMutationInput, TestResultUncheckedUpdateManyWithoutResultLevelInput>
  }

  export type QuestionSetCreateWithoutScoreCriteriaInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutScoreCriteriaInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutScoreCriteriaInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutScoreCriteriaInput, QuestionSetUncheckedCreateWithoutScoreCriteriaInput>
  }

  export type ResultLevelCreateWithoutScoreCriteriaInput = {
    name: string
    isActive?: boolean
    testResult?: TestResultCreateNestedManyWithoutResultLevelInput
  }

  export type ResultLevelUncheckedCreateWithoutScoreCriteriaInput = {
    id?: number
    name: string
    isActive?: boolean
    testResult?: TestResultUncheckedCreateNestedManyWithoutResultLevelInput
  }

  export type ResultLevelCreateOrConnectWithoutScoreCriteriaInput = {
    where: ResultLevelWhereUniqueInput
    create: XOR<ResultLevelCreateWithoutScoreCriteriaInput, ResultLevelUncheckedCreateWithoutScoreCriteriaInput>
  }

  export type QuestionSetUpsertWithoutScoreCriteriaInput = {
    update: XOR<QuestionSetUpdateWithoutScoreCriteriaInput, QuestionSetUncheckedUpdateWithoutScoreCriteriaInput>
    create: XOR<QuestionSetCreateWithoutScoreCriteriaInput, QuestionSetUncheckedCreateWithoutScoreCriteriaInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutScoreCriteriaInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutScoreCriteriaInput, QuestionSetUncheckedUpdateWithoutScoreCriteriaInput>
  }

  export type QuestionSetUpdateWithoutScoreCriteriaInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutScoreCriteriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type ResultLevelUpsertWithoutScoreCriteriaInput = {
    update: XOR<ResultLevelUpdateWithoutScoreCriteriaInput, ResultLevelUncheckedUpdateWithoutScoreCriteriaInput>
    create: XOR<ResultLevelCreateWithoutScoreCriteriaInput, ResultLevelUncheckedCreateWithoutScoreCriteriaInput>
    where?: ResultLevelWhereInput
  }

  export type ResultLevelUpdateToOneWithWhereWithoutScoreCriteriaInput = {
    where?: ResultLevelWhereInput
    data: XOR<ResultLevelUpdateWithoutScoreCriteriaInput, ResultLevelUncheckedUpdateWithoutScoreCriteriaInput>
  }

  export type ResultLevelUpdateWithoutScoreCriteriaInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    testResult?: TestResultUpdateManyWithoutResultLevelNestedInput
  }

  export type ResultLevelUncheckedUpdateWithoutScoreCriteriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    testResult?: TestResultUncheckedUpdateManyWithoutResultLevelNestedInput
  }

  export type UserCreateWithoutTestResultUserInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTestResultUserInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTestResultUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTestResultUserInput, UserUncheckedCreateWithoutTestResultUserInput>
  }

  export type QuestionSetCreateWithoutTestResultInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutTestResultInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutTestResultInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutTestResultInput, QuestionSetUncheckedCreateWithoutTestResultInput>
  }

  export type ResultLevelCreateWithoutTestResultInput = {
    name: string
    isActive?: boolean
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutResultLevelInput
  }

  export type ResultLevelUncheckedCreateWithoutTestResultInput = {
    id?: number
    name: string
    isActive?: boolean
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutResultLevelInput
  }

  export type ResultLevelCreateOrConnectWithoutTestResultInput = {
    where: ResultLevelWhereUniqueInput
    create: XOR<ResultLevelCreateWithoutTestResultInput, ResultLevelUncheckedCreateWithoutTestResultInput>
  }

  export type UserUpsertWithoutTestResultUserInput = {
    update: XOR<UserUpdateWithoutTestResultUserInput, UserUncheckedUpdateWithoutTestResultUserInput>
    create: XOR<UserCreateWithoutTestResultUserInput, UserUncheckedCreateWithoutTestResultUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTestResultUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTestResultUserInput, UserUncheckedUpdateWithoutTestResultUserInput>
  }

  export type UserUpdateWithoutTestResultUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTestResultUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionSetUpsertWithoutTestResultInput = {
    update: XOR<QuestionSetUpdateWithoutTestResultInput, QuestionSetUncheckedUpdateWithoutTestResultInput>
    create: XOR<QuestionSetCreateWithoutTestResultInput, QuestionSetUncheckedCreateWithoutTestResultInput>
    where?: QuestionSetWhereInput
  }

  export type QuestionSetUpdateToOneWithWhereWithoutTestResultInput = {
    where?: QuestionSetWhereInput
    data: XOR<QuestionSetUpdateWithoutTestResultInput, QuestionSetUncheckedUpdateWithoutTestResultInput>
  }

  export type QuestionSetUpdateWithoutTestResultInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutTestResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type ResultLevelUpsertWithoutTestResultInput = {
    update: XOR<ResultLevelUpdateWithoutTestResultInput, ResultLevelUncheckedUpdateWithoutTestResultInput>
    create: XOR<ResultLevelCreateWithoutTestResultInput, ResultLevelUncheckedCreateWithoutTestResultInput>
    where?: ResultLevelWhereInput
  }

  export type ResultLevelUpdateToOneWithWhereWithoutTestResultInput = {
    where?: ResultLevelWhereInput
    data: XOR<ResultLevelUpdateWithoutTestResultInput, ResultLevelUncheckedUpdateWithoutTestResultInput>
  }

  export type ResultLevelUpdateWithoutTestResultInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutResultLevelNestedInput
  }

  export type ResultLevelUncheckedUpdateWithoutTestResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutResultLevelNestedInput
  }

  export type QuestionSetCreateWithoutTestTypeInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutTestTypeInput = {
    id?: number
    courseId: number
    lessonId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutTestTypeInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutTestTypeInput, QuestionSetUncheckedCreateWithoutTestTypeInput>
  }

  export type QuestionSetCreateManyTestTypeInputEnvelope = {
    data: QuestionSetCreateManyTestTypeInput | QuestionSetCreateManyTestTypeInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutTestTypeInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutTestTypeInput, QuestionSetUncheckedUpdateWithoutTestTypeInput>
    create: XOR<QuestionSetCreateWithoutTestTypeInput, QuestionSetUncheckedCreateWithoutTestTypeInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutTestTypeInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutTestTypeInput, QuestionSetUncheckedUpdateWithoutTestTypeInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutTestTypeInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutTestTypeInput>
  }

  export type UserCreateWithoutTitleInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    userRole: UserRoleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTitleInput = {
    id?: number
    userRoleId: number
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTitleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTitleInput, UserUncheckedCreateWithoutTitleInput>
  }

  export type UserCreateManyTitleInputEnvelope = {
    data: UserCreateManyTitleInput | UserCreateManyTitleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutTitleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTitleInput, UserUncheckedUpdateWithoutTitleInput>
    create: XOR<UserCreateWithoutTitleInput, UserUncheckedCreateWithoutTitleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTitleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTitleInput, UserUncheckedUpdateWithoutTitleInput>
  }

  export type UserUpdateManyWithWhereWithoutTitleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTitleInput>
  }

  export type UserCreateWithoutUserRoleInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    title?: TitleCreateNestedOneWithoutUsersInput
    academicTitle?: AcademicTitleCreateNestedOneWithoutUsersInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organizationsCreated?: OrganizationCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionCreateNestedManyWithoutUserInput
    lessonCreated?: LessonCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRoleInput = {
    id?: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organizationsCreated?: OrganizationUncheckedCreateNestedManyWithoutCreatedByUserInput
    organizationsUpdated?: OrganizationUncheckedCreateNestedManyWithoutUpdatedByUserInput
    organizationsDeleted?: OrganizationUncheckedCreateNestedManyWithoutDeletedByUserInput
    categoryCreated?: CategoryUncheckedCreateNestedManyWithoutCreatedByUserInput
    categoryUpdated?: CategoryUncheckedCreateNestedManyWithoutUpdatedByUserInput
    categoryDeleted?: CategoryUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseCreated?: CourseUncheckedCreateNestedManyWithoutCreatedByUserInput
    courseUpdated?: CourseUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseDeleted?: CourseUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUpdated?: CourseInstructorUncheckedCreateNestedManyWithoutUpdatedByUserInput
    courseInstructorDeleted?: CourseInstructorUncheckedCreateNestedManyWithoutDeletedByUserInput
    courseInstructorUserId?: CourseInstructorUncheckedCreateNestedManyWithoutUserInput
    courseCompletionUserId?: CourseCompletionUncheckedCreateNestedManyWithoutUserInput
    lessonCreated?: LessonUncheckedCreateNestedManyWithoutCreatedByUserInput
    lessonUpdated?: LessonUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonDeleted?: LessonUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonContentUpdated?: LessonContentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    lessonContentDeleted?: LessonContentUncheckedCreateNestedManyWithoutDeletedByUserInput
    lessonViewUserId?: LessonViewUncheckedCreateNestedManyWithoutUsersInput
    lessonAttemptUserId?: LessonAttemptUncheckedCreateNestedManyWithoutUsersInput
    questionSetCreated?: QuestionSetUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionSetUpdated?: QuestionSetUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionSetDeleted?: QuestionSetUncheckedCreateNestedManyWithoutDeletedByUserInput
    questionBankCreated?: QuestionBankUncheckedCreateNestedManyWithoutCreatedByUserInput
    questionBankUpdated?: QuestionBankUncheckedCreateNestedManyWithoutUpdatedByUserInput
    questionBankDeleted?: QuestionBankUncheckedCreateNestedManyWithoutDeletedByUserInput
    testResultUser?: TestResultUncheckedCreateNestedManyWithoutUserInput
    answerSubmissionUser?: AnswerSubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
  }

  export type UserCreateManyUserRoleInputEnvelope = {
    data: UserCreateManyUserRoleInput | UserCreateManyUserRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutUserRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUserRoleInput, UserUncheckedUpdateWithoutUserRoleInput>
    create: XOR<UserCreateWithoutUserRoleInput, UserUncheckedCreateWithoutUserRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUserRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUserRoleInput, UserUncheckedUpdateWithoutUserRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutUserRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserRoleInput>
  }

  export type UserRoleCreateWithoutUsersInput = {
    name: string
  }

  export type UserRoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type UserRoleCreateOrConnectWithoutUsersInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUsersInput, UserRoleUncheckedCreateWithoutUsersInput>
  }

  export type TitleCreateWithoutUsersInput = {
    name: string
  }

  export type TitleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type TitleCreateOrConnectWithoutUsersInput = {
    where: TitleWhereUniqueInput
    create: XOR<TitleCreateWithoutUsersInput, TitleUncheckedCreateWithoutUsersInput>
  }

  export type AcademicTitleCreateWithoutUsersInput = {
    name: string
  }

  export type AcademicTitleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type AcademicTitleCreateOrConnectWithoutUsersInput = {
    where: AcademicTitleWhereUniqueInput
    create: XOR<AcademicTitleCreateWithoutUsersInput, AcademicTitleUncheckedCreateWithoutUsersInput>
  }

  export type DepartmentCreateWithoutUsersInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: number
    organizationId: number
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationCreateWithoutCreatedByUserInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutOrganizationsUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutOrganizationsDeletedInput
    departments?: DepartmentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    departments?: DepartmentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCreatedByUserInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCreatedByUserInput, OrganizationUncheckedCreateWithoutCreatedByUserInput>
  }

  export type OrganizationCreateManyCreatedByUserInputEnvelope = {
    data: OrganizationCreateManyCreatedByUserInput | OrganizationCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutUpdatedByUserInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutOrganizationsCreatedInput
    deletedByUser?: UserCreateNestedOneWithoutOrganizationsDeletedInput
    departments?: DepartmentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    departments?: DepartmentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUpdatedByUserInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUpdatedByUserInput, OrganizationUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type OrganizationCreateManyUpdatedByUserInputEnvelope = {
    data: OrganizationCreateManyUpdatedByUserInput | OrganizationCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutDeletedByUserInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutOrganizationsCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutOrganizationsUpdatedInput
    departments?: DepartmentCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    departments?: DepartmentUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutDeletedByUserInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutDeletedByUserInput, OrganizationUncheckedCreateWithoutDeletedByUserInput>
  }

  export type OrganizationCreateManyDeletedByUserInputEnvelope = {
    data: OrganizationCreateManyDeletedByUserInput | OrganizationCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutCreatedByUserInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutCategoryUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCategoryDeletedInput
    categories?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    categories?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutCreatedByUserInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCreatedByUserInput, CategoryUncheckedCreateWithoutCreatedByUserInput>
  }

  export type CategoryCreateManyCreatedByUserInputEnvelope = {
    data: CategoryCreateManyCreatedByUserInput | CategoryCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutUpdatedByUserInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutCategoryCreatedInput
    deletedByUser?: UserCreateNestedOneWithoutCategoryDeletedInput
    categories?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    categories?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutUpdatedByUserInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUpdatedByUserInput, CategoryUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type CategoryCreateManyUpdatedByUserInputEnvelope = {
    data: CategoryCreateManyUpdatedByUserInput | CategoryCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutDeletedByUserInput = {
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    createdByUser: UserCreateNestedOneWithoutCategoryCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCategoryUpdatedInput
    categories?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    categories?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutDeletedByUserInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutDeletedByUserInput, CategoryUncheckedCreateWithoutDeletedByUserInput>
  }

  export type CategoryCreateManyDeletedByUserInputEnvelope = {
    data: CategoryCreateManyDeletedByUserInput | CategoryCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutCreatedByUserInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCreatedByUserInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCreatedByUserInput, CourseUncheckedCreateWithoutCreatedByUserInput>
  }

  export type CourseCreateManyCreatedByUserInputEnvelope = {
    data: CourseCreateManyCreatedByUserInput | CourseCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutUpdatedByUserInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseDeletedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutUpdatedByUserInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutUpdatedByUserInput, CourseUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type CourseCreateManyUpdatedByUserInputEnvelope = {
    data: CourseCreateManyUpdatedByUserInput | CourseCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutDeletedByUserInput = {
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutCategoriesInput
    createdByUser: UserCreateNestedOneWithoutCourseCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutCourseUpdatedInput
    courseInstructorCourseId?: CourseInstructorCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedCreateNestedManyWithoutCourseInput
    courseCompletionCourseId?: CourseCompletionUncheckedCreateNestedManyWithoutCourseInput
    lessonCourseId?: LessonUncheckedCreateNestedManyWithoutCourseInput
    questionSetCourseId?: QuestionSetUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutDeletedByUserInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutDeletedByUserInput, CourseUncheckedCreateWithoutDeletedByUserInput>
  }

  export type CourseCreateManyDeletedByUserInputEnvelope = {
    data: CourseCreateManyDeletedByUserInput | CourseCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseInstructorCreateWithoutUpdatedByUserInput = {
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutCourseInstructorCourseIdInput
    user?: UserCreateNestedOneWithoutCourseInstructorUserIdInput
    deletedByUser?: UserCreateNestedOneWithoutCourseInstructorDeletedInput
    courseInstructor?: LessonCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructor?: LessonUncheckedCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorCreateOrConnectWithoutUpdatedByUserInput = {
    where: CourseInstructorWhereUniqueInput
    create: XOR<CourseInstructorCreateWithoutUpdatedByUserInput, CourseInstructorUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type CourseInstructorCreateManyUpdatedByUserInputEnvelope = {
    data: CourseInstructorCreateManyUpdatedByUserInput | CourseInstructorCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseInstructorCreateWithoutDeletedByUserInput = {
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutCourseInstructorCourseIdInput
    user?: UserCreateNestedOneWithoutCourseInstructorUserIdInput
    updatedByUser?: UserCreateNestedOneWithoutCourseInstructorUpdatedInput
    courseInstructor?: LessonCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructor?: LessonUncheckedCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorCreateOrConnectWithoutDeletedByUserInput = {
    where: CourseInstructorWhereUniqueInput
    create: XOR<CourseInstructorCreateWithoutDeletedByUserInput, CourseInstructorUncheckedCreateWithoutDeletedByUserInput>
  }

  export type CourseInstructorCreateManyDeletedByUserInputEnvelope = {
    data: CourseInstructorCreateManyDeletedByUserInput | CourseInstructorCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseInstructorCreateWithoutUserInput = {
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutCourseInstructorCourseIdInput
    updatedByUser?: UserCreateNestedOneWithoutCourseInstructorUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutCourseInstructorDeletedInput
    courseInstructor?: LessonCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorUncheckedCreateWithoutUserInput = {
    id?: number
    courseId: number
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    courseInstructor?: LessonUncheckedCreateNestedManyWithoutCourseInstructorInput
  }

  export type CourseInstructorCreateOrConnectWithoutUserInput = {
    where: CourseInstructorWhereUniqueInput
    create: XOR<CourseInstructorCreateWithoutUserInput, CourseInstructorUncheckedCreateWithoutUserInput>
  }

  export type CourseInstructorCreateManyUserInputEnvelope = {
    data: CourseInstructorCreateManyUserInput | CourseInstructorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseCompletionCreateWithoutUserInput = {
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
    course: CourseCreateNestedOneWithoutCourseCompletionCourseIdInput
  }

  export type CourseCompletionUncheckedCreateWithoutUserInput = {
    id?: number
    courseId: number
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
  }

  export type CourseCompletionCreateOrConnectWithoutUserInput = {
    where: CourseCompletionWhereUniqueInput
    create: XOR<CourseCompletionCreateWithoutUserInput, CourseCompletionUncheckedCreateWithoutUserInput>
  }

  export type CourseCompletionCreateManyUserInputEnvelope = {
    data: CourseCompletionCreateManyUserInput | CourseCompletionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LessonCreateWithoutCreatedByUserInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutCreatedByUserInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutCreatedByUserInput, LessonUncheckedCreateWithoutCreatedByUserInput>
  }

  export type LessonCreateManyCreatedByUserInputEnvelope = {
    data: LessonCreateManyCreatedByUserInput | LessonCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type LessonCreateWithoutUpdatedByUserInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    deletedByUser?: UserCreateNestedOneWithoutLessonDeletedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutUpdatedByUserInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutUpdatedByUserInput, LessonUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type LessonCreateManyUpdatedByUserInputEnvelope = {
    data: LessonCreateManyUpdatedByUserInput | LessonCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type LessonCreateWithoutDeletedByUserInput = {
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    parent?: LessonCreateNestedOneWithoutChildrenInput
    children?: LessonCreateNestedManyWithoutParentInput
    lessonType: LessonTypeCreateNestedOneWithoutLessonTypeIdInput
    course: CourseCreateNestedOneWithoutLessonCourseIdInput
    courseInstructor: CourseInstructorCreateNestedOneWithoutCourseInstructorInput
    createdByUser: UserCreateNestedOneWithoutLessonCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutLessonUpdatedInput
    lessonContent?: LessonContentCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetCreateNestedManyWithoutLessonInput
  }

  export type LessonUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    children?: LessonUncheckedCreateNestedManyWithoutParentInput
    lessonContent?: LessonContentUncheckedCreateNestedManyWithoutLessonInput
    lessonViewLessonId?: LessonViewUncheckedCreateNestedManyWithoutLessonsInput
    lessonAttemptLessonId?: LessonAttemptUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutLessonsInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedCreateNestedManyWithoutRequiredLessonInput
    questionSetLessonId?: QuestionSetUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonCreateOrConnectWithoutDeletedByUserInput = {
    where: LessonWhereUniqueInput
    create: XOR<LessonCreateWithoutDeletedByUserInput, LessonUncheckedCreateWithoutDeletedByUserInput>
  }

  export type LessonCreateManyDeletedByUserInputEnvelope = {
    data: LessonCreateManyDeletedByUserInput | LessonCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type LessonContentCreateWithoutUpdatedByUserInput = {
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lesson: LessonCreateNestedOneWithoutLessonContentInput
    lessonContentType: LessonContentTypeCreateNestedOneWithoutLessonContentInput
    deletedByUser?: UserCreateNestedOneWithoutLessonContentDeletedInput
  }

  export type LessonContentUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    lessonId: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateOrConnectWithoutUpdatedByUserInput = {
    where: LessonContentWhereUniqueInput
    create: XOR<LessonContentCreateWithoutUpdatedByUserInput, LessonContentUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type LessonContentCreateManyUpdatedByUserInputEnvelope = {
    data: LessonContentCreateManyUpdatedByUserInput | LessonContentCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type LessonContentCreateWithoutDeletedByUserInput = {
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    lesson: LessonCreateNestedOneWithoutLessonContentInput
    lessonContentType: LessonContentTypeCreateNestedOneWithoutLessonContentInput
    updatedByUser?: UserCreateNestedOneWithoutLessonContentUpdatedInput
  }

  export type LessonContentUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    lessonId: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateOrConnectWithoutDeletedByUserInput = {
    where: LessonContentWhereUniqueInput
    create: XOR<LessonContentCreateWithoutDeletedByUserInput, LessonContentUncheckedCreateWithoutDeletedByUserInput>
  }

  export type LessonContentCreateManyDeletedByUserInputEnvelope = {
    data: LessonContentCreateManyDeletedByUserInput | LessonContentCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type LessonViewCreateWithoutUsersInput = {
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
    lessons: LessonCreateNestedOneWithoutLessonViewLessonIdInput
  }

  export type LessonViewUncheckedCreateWithoutUsersInput = {
    id?: number
    lessonId: number
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonViewCreateOrConnectWithoutUsersInput = {
    where: LessonViewWhereUniqueInput
    create: XOR<LessonViewCreateWithoutUsersInput, LessonViewUncheckedCreateWithoutUsersInput>
  }

  export type LessonViewCreateManyUsersInputEnvelope = {
    data: LessonViewCreateManyUsersInput | LessonViewCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type LessonAttemptCreateWithoutUsersInput = {
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
    lessons: LessonCreateNestedOneWithoutLessonAttemptLessonIdInput
  }

  export type LessonAttemptUncheckedCreateWithoutUsersInput = {
    id?: number
    lessonId: number
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonAttemptCreateOrConnectWithoutUsersInput = {
    where: LessonAttemptWhereUniqueInput
    create: XOR<LessonAttemptCreateWithoutUsersInput, LessonAttemptUncheckedCreateWithoutUsersInput>
  }

  export type LessonAttemptCreateManyUsersInputEnvelope = {
    data: LessonAttemptCreateManyUsersInput | LessonAttemptCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutCreatedByUserInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutCreatedByUserInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutCreatedByUserInput, QuestionSetUncheckedCreateWithoutCreatedByUserInput>
  }

  export type QuestionSetCreateManyCreatedByUserInputEnvelope = {
    data: QuestionSetCreateManyCreatedByUserInput | QuestionSetCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutUpdatedByUserInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionSetDeletedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutUpdatedByUserInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutUpdatedByUserInput, QuestionSetUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type QuestionSetCreateManyUpdatedByUserInputEnvelope = {
    data: QuestionSetCreateManyUpdatedByUserInput | QuestionSetCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutDeletedByUserInput = {
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    course: CourseCreateNestedOneWithoutQuestionSetCourseIdInput
    lesson: LessonCreateNestedOneWithoutQuestionSetLessonIdInput
    testType: TestTypeCreateNestedOneWithoutQuestionSetInput
    createdByUser: UserCreateNestedOneWithoutQuestionSetCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionSetUpdatedInput
    questionBank?: QuestionBankCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionBank?: QuestionBankUncheckedCreateNestedManyWithoutQuestionSetInput
    scoreCriteria?: ScoreCriteriaUncheckedCreateNestedManyWithoutQuestionSetInput
    testResult?: TestResultUncheckedCreateNestedManyWithoutQuestionSetInput
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionSetInput
  }

  export type QuestionSetCreateOrConnectWithoutDeletedByUserInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutDeletedByUserInput, QuestionSetUncheckedCreateWithoutDeletedByUserInput>
  }

  export type QuestionSetCreateManyDeletedByUserInputEnvelope = {
    data: QuestionSetCreateManyDeletedByUserInput | QuestionSetCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankCreateWithoutCreatedByUserInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankCreateOrConnectWithoutCreatedByUserInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutCreatedByUserInput, QuestionBankUncheckedCreateWithoutCreatedByUserInput>
  }

  export type QuestionBankCreateManyCreatedByUserInputEnvelope = {
    data: QuestionBankCreateManyCreatedByUserInput | QuestionBankCreateManyCreatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankCreateWithoutUpdatedByUserInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    deletedByUser?: UserCreateNestedOneWithoutQuestionBankDeletedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankCreateOrConnectWithoutUpdatedByUserInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutUpdatedByUserInput, QuestionBankUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type QuestionBankCreateManyUpdatedByUserInputEnvelope = {
    data: QuestionBankCreateManyUpdatedByUserInput | QuestionBankCreateManyUpdatedByUserInput[]
    skipDuplicates?: boolean
  }

  export type QuestionBankCreateWithoutDeletedByUserInput = {
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    questionType: QuestionTypeCreateNestedOneWithoutQuestionBankInput
    questionLevel: QuestionLevelCreateNestedOneWithoutQuestionBankInput
    questionSet: QuestionSetCreateNestedOneWithoutQuestionBankInput
    createdByUser: UserCreateNestedOneWithoutQuestionBankCreatedInput
    updatedByUser?: UserCreateNestedOneWithoutQuestionBankUpdatedInput
    answerSubmission?: AnswerSubmissionCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankUncheckedCreateWithoutDeletedByUserInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedCreateNestedManyWithoutQuestionBankInput
  }

  export type QuestionBankCreateOrConnectWithoutDeletedByUserInput = {
    where: QuestionBankWhereUniqueInput
    create: XOR<QuestionBankCreateWithoutDeletedByUserInput, QuestionBankUncheckedCreateWithoutDeletedByUserInput>
  }

  export type QuestionBankCreateManyDeletedByUserInputEnvelope = {
    data: QuestionBankCreateManyDeletedByUserInput | QuestionBankCreateManyDeletedByUserInput[]
    skipDuplicates?: boolean
  }

  export type TestResultCreateWithoutUserInput = {
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
    questionSet: QuestionSetCreateNestedOneWithoutTestResultInput
    resultLevel: ResultLevelCreateNestedOneWithoutTestResultInput
  }

  export type TestResultUncheckedCreateWithoutUserInput = {
    id?: number
    questionSetId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type TestResultCreateOrConnectWithoutUserInput = {
    where: TestResultWhereUniqueInput
    create: XOR<TestResultCreateWithoutUserInput, TestResultUncheckedCreateWithoutUserInput>
  }

  export type TestResultCreateManyUserInputEnvelope = {
    data: TestResultCreateManyUserInput | TestResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AnswerSubmissionCreateWithoutUserInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
    questionSet: QuestionSetCreateNestedOneWithoutAnswerSubmissionInput
    questionBank: QuestionBankCreateNestedOneWithoutAnswerSubmissionInput
  }

  export type AnswerSubmissionUncheckedCreateWithoutUserInput = {
    id?: number
    questionSetId: number
    questionBankId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type AnswerSubmissionCreateOrConnectWithoutUserInput = {
    where: AnswerSubmissionWhereUniqueInput
    create: XOR<AnswerSubmissionCreateWithoutUserInput, AnswerSubmissionUncheckedCreateWithoutUserInput>
  }

  export type AnswerSubmissionCreateManyUserInputEnvelope = {
    data: AnswerSubmissionCreateManyUserInput | AnswerSubmissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithoutUsersInput = {
    update: XOR<UserRoleUpdateWithoutUsersInput, UserRoleUncheckedUpdateWithoutUsersInput>
    create: XOR<UserRoleCreateWithoutUsersInput, UserRoleUncheckedCreateWithoutUsersInput>
    where?: UserRoleWhereInput
  }

  export type UserRoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: UserRoleWhereInput
    data: XOR<UserRoleUpdateWithoutUsersInput, UserRoleUncheckedUpdateWithoutUsersInput>
  }

  export type UserRoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TitleUpsertWithoutUsersInput = {
    update: XOR<TitleUpdateWithoutUsersInput, TitleUncheckedUpdateWithoutUsersInput>
    create: XOR<TitleCreateWithoutUsersInput, TitleUncheckedCreateWithoutUsersInput>
    where?: TitleWhereInput
  }

  export type TitleUpdateToOneWithWhereWithoutUsersInput = {
    where?: TitleWhereInput
    data: XOR<TitleUpdateWithoutUsersInput, TitleUncheckedUpdateWithoutUsersInput>
  }

  export type TitleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TitleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicTitleUpsertWithoutUsersInput = {
    update: XOR<AcademicTitleUpdateWithoutUsersInput, AcademicTitleUncheckedUpdateWithoutUsersInput>
    create: XOR<AcademicTitleCreateWithoutUsersInput, AcademicTitleUncheckedCreateWithoutUsersInput>
    where?: AcademicTitleWhereInput
  }

  export type AcademicTitleUpdateToOneWithWhereWithoutUsersInput = {
    where?: AcademicTitleWhereInput
    data: XOR<AcademicTitleUpdateWithoutUsersInput, AcademicTitleUncheckedUpdateWithoutUsersInput>
  }

  export type AcademicTitleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicTitleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: OrganizationWhereUniqueInput
    update: XOR<OrganizationUpdateWithoutCreatedByUserInput, OrganizationUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<OrganizationCreateWithoutCreatedByUserInput, OrganizationUncheckedCreateWithoutCreatedByUserInput>
  }

  export type OrganizationUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: OrganizationWhereUniqueInput
    data: XOR<OrganizationUpdateWithoutCreatedByUserInput, OrganizationUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type OrganizationUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: OrganizationScalarWhereInput
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type OrganizationScalarWhereInput = {
    AND?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
    OR?: OrganizationScalarWhereInput[]
    NOT?: OrganizationScalarWhereInput | OrganizationScalarWhereInput[]
    id?: IntFilter<"Organization"> | number
    name?: StringFilter<"Organization"> | string
    isActive?: BoolFilter<"Organization"> | boolean
    createdBy?: IntFilter<"Organization"> | number
    updatedBy?: IntNullableFilter<"Organization"> | number | null
    deletedBy?: IntNullableFilter<"Organization"> | number | null
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Organization"> | Date | string | null
  }

  export type OrganizationUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: OrganizationWhereUniqueInput
    update: XOR<OrganizationUpdateWithoutUpdatedByUserInput, OrganizationUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<OrganizationCreateWithoutUpdatedByUserInput, OrganizationUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type OrganizationUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: OrganizationWhereUniqueInput
    data: XOR<OrganizationUpdateWithoutUpdatedByUserInput, OrganizationUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type OrganizationUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: OrganizationScalarWhereInput
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type OrganizationUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: OrganizationWhereUniqueInput
    update: XOR<OrganizationUpdateWithoutDeletedByUserInput, OrganizationUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<OrganizationCreateWithoutDeletedByUserInput, OrganizationUncheckedCreateWithoutDeletedByUserInput>
  }

  export type OrganizationUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: OrganizationWhereUniqueInput
    data: XOR<OrganizationUpdateWithoutDeletedByUserInput, OrganizationUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type OrganizationUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: OrganizationScalarWhereInput
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutCreatedByUserInput, CategoryUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<CategoryCreateWithoutCreatedByUserInput, CategoryUncheckedCreateWithoutCreatedByUserInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutCreatedByUserInput, CategoryUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type CategoryUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    isActive?: BoolFilter<"Category"> | boolean
    createdBy?: IntFilter<"Category"> | number
    updatedBy?: IntNullableFilter<"Category"> | number | null
    deletedBy?: IntNullableFilter<"Category"> | number | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Category"> | Date | string | null
  }

  export type CategoryUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutUpdatedByUserInput, CategoryUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<CategoryCreateWithoutUpdatedByUserInput, CategoryUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutUpdatedByUserInput, CategoryUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type CategoryUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutDeletedByUserInput, CategoryUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<CategoryCreateWithoutDeletedByUserInput, CategoryUncheckedCreateWithoutDeletedByUserInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutDeletedByUserInput, CategoryUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type CategoryUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCreatedByUserInput, CourseUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<CourseCreateWithoutCreatedByUserInput, CourseUncheckedCreateWithoutCreatedByUserInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCreatedByUserInput, CourseUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type CourseUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutUpdatedByUserInput, CourseUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<CourseCreateWithoutUpdatedByUserInput, CourseUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutUpdatedByUserInput, CourseUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type CourseUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutDeletedByUserInput, CourseUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<CourseCreateWithoutDeletedByUserInput, CourseUncheckedCreateWithoutDeletedByUserInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutDeletedByUserInput, CourseUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type CourseUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type CourseInstructorUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: CourseInstructorWhereUniqueInput
    update: XOR<CourseInstructorUpdateWithoutUpdatedByUserInput, CourseInstructorUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<CourseInstructorCreateWithoutUpdatedByUserInput, CourseInstructorUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type CourseInstructorUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: CourseInstructorWhereUniqueInput
    data: XOR<CourseInstructorUpdateWithoutUpdatedByUserInput, CourseInstructorUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type CourseInstructorUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: CourseInstructorScalarWhereInput
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type CourseInstructorUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: CourseInstructorWhereUniqueInput
    update: XOR<CourseInstructorUpdateWithoutDeletedByUserInput, CourseInstructorUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<CourseInstructorCreateWithoutDeletedByUserInput, CourseInstructorUncheckedCreateWithoutDeletedByUserInput>
  }

  export type CourseInstructorUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: CourseInstructorWhereUniqueInput
    data: XOR<CourseInstructorUpdateWithoutDeletedByUserInput, CourseInstructorUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type CourseInstructorUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: CourseInstructorScalarWhereInput
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type CourseInstructorUpsertWithWhereUniqueWithoutUserInput = {
    where: CourseInstructorWhereUniqueInput
    update: XOR<CourseInstructorUpdateWithoutUserInput, CourseInstructorUncheckedUpdateWithoutUserInput>
    create: XOR<CourseInstructorCreateWithoutUserInput, CourseInstructorUncheckedCreateWithoutUserInput>
  }

  export type CourseInstructorUpdateWithWhereUniqueWithoutUserInput = {
    where: CourseInstructorWhereUniqueInput
    data: XOR<CourseInstructorUpdateWithoutUserInput, CourseInstructorUncheckedUpdateWithoutUserInput>
  }

  export type CourseInstructorUpdateManyWithWhereWithoutUserInput = {
    where: CourseInstructorScalarWhereInput
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyWithoutUserInput>
  }

  export type CourseCompletionUpsertWithWhereUniqueWithoutUserInput = {
    where: CourseCompletionWhereUniqueInput
    update: XOR<CourseCompletionUpdateWithoutUserInput, CourseCompletionUncheckedUpdateWithoutUserInput>
    create: XOR<CourseCompletionCreateWithoutUserInput, CourseCompletionUncheckedCreateWithoutUserInput>
  }

  export type CourseCompletionUpdateWithWhereUniqueWithoutUserInput = {
    where: CourseCompletionWhereUniqueInput
    data: XOR<CourseCompletionUpdateWithoutUserInput, CourseCompletionUncheckedUpdateWithoutUserInput>
  }

  export type CourseCompletionUpdateManyWithWhereWithoutUserInput = {
    where: CourseCompletionScalarWhereInput
    data: XOR<CourseCompletionUpdateManyMutationInput, CourseCompletionUncheckedUpdateManyWithoutUserInput>
  }

  export type LessonUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutCreatedByUserInput, LessonUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<LessonCreateWithoutCreatedByUserInput, LessonUncheckedCreateWithoutCreatedByUserInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutCreatedByUserInput, LessonUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type LessonUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type LessonUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutUpdatedByUserInput, LessonUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<LessonCreateWithoutUpdatedByUserInput, LessonUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutUpdatedByUserInput, LessonUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type LessonUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type LessonUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: LessonWhereUniqueInput
    update: XOR<LessonUpdateWithoutDeletedByUserInput, LessonUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<LessonCreateWithoutDeletedByUserInput, LessonUncheckedCreateWithoutDeletedByUserInput>
  }

  export type LessonUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: LessonWhereUniqueInput
    data: XOR<LessonUpdateWithoutDeletedByUserInput, LessonUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type LessonUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: LessonScalarWhereInput
    data: XOR<LessonUpdateManyMutationInput, LessonUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type LessonContentUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: LessonContentWhereUniqueInput
    update: XOR<LessonContentUpdateWithoutUpdatedByUserInput, LessonContentUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<LessonContentCreateWithoutUpdatedByUserInput, LessonContentUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type LessonContentUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: LessonContentWhereUniqueInput
    data: XOR<LessonContentUpdateWithoutUpdatedByUserInput, LessonContentUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type LessonContentUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: LessonContentScalarWhereInput
    data: XOR<LessonContentUpdateManyMutationInput, LessonContentUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type LessonContentUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: LessonContentWhereUniqueInput
    update: XOR<LessonContentUpdateWithoutDeletedByUserInput, LessonContentUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<LessonContentCreateWithoutDeletedByUserInput, LessonContentUncheckedCreateWithoutDeletedByUserInput>
  }

  export type LessonContentUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: LessonContentWhereUniqueInput
    data: XOR<LessonContentUpdateWithoutDeletedByUserInput, LessonContentUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type LessonContentUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: LessonContentScalarWhereInput
    data: XOR<LessonContentUpdateManyMutationInput, LessonContentUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type LessonViewUpsertWithWhereUniqueWithoutUsersInput = {
    where: LessonViewWhereUniqueInput
    update: XOR<LessonViewUpdateWithoutUsersInput, LessonViewUncheckedUpdateWithoutUsersInput>
    create: XOR<LessonViewCreateWithoutUsersInput, LessonViewUncheckedCreateWithoutUsersInput>
  }

  export type LessonViewUpdateWithWhereUniqueWithoutUsersInput = {
    where: LessonViewWhereUniqueInput
    data: XOR<LessonViewUpdateWithoutUsersInput, LessonViewUncheckedUpdateWithoutUsersInput>
  }

  export type LessonViewUpdateManyWithWhereWithoutUsersInput = {
    where: LessonViewScalarWhereInput
    data: XOR<LessonViewUpdateManyMutationInput, LessonViewUncheckedUpdateManyWithoutUsersInput>
  }

  export type LessonAttemptUpsertWithWhereUniqueWithoutUsersInput = {
    where: LessonAttemptWhereUniqueInput
    update: XOR<LessonAttemptUpdateWithoutUsersInput, LessonAttemptUncheckedUpdateWithoutUsersInput>
    create: XOR<LessonAttemptCreateWithoutUsersInput, LessonAttemptUncheckedCreateWithoutUsersInput>
  }

  export type LessonAttemptUpdateWithWhereUniqueWithoutUsersInput = {
    where: LessonAttemptWhereUniqueInput
    data: XOR<LessonAttemptUpdateWithoutUsersInput, LessonAttemptUncheckedUpdateWithoutUsersInput>
  }

  export type LessonAttemptUpdateManyWithWhereWithoutUsersInput = {
    where: LessonAttemptScalarWhereInput
    data: XOR<LessonAttemptUpdateManyMutationInput, LessonAttemptUncheckedUpdateManyWithoutUsersInput>
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutCreatedByUserInput, QuestionSetUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<QuestionSetCreateWithoutCreatedByUserInput, QuestionSetUncheckedCreateWithoutCreatedByUserInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutCreatedByUserInput, QuestionSetUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutUpdatedByUserInput, QuestionSetUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<QuestionSetCreateWithoutUpdatedByUserInput, QuestionSetUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutUpdatedByUserInput, QuestionSetUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutDeletedByUserInput, QuestionSetUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<QuestionSetCreateWithoutDeletedByUserInput, QuestionSetUncheckedCreateWithoutDeletedByUserInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutDeletedByUserInput, QuestionSetUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutCreatedByUserInput, QuestionBankUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<QuestionBankCreateWithoutCreatedByUserInput, QuestionBankUncheckedCreateWithoutCreatedByUserInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutCreatedByUserInput, QuestionBankUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutUpdatedByUserInput, QuestionBankUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<QuestionBankCreateWithoutUpdatedByUserInput, QuestionBankUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutUpdatedByUserInput, QuestionBankUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutUpdatedByUserInput>
  }

  export type QuestionBankUpsertWithWhereUniqueWithoutDeletedByUserInput = {
    where: QuestionBankWhereUniqueInput
    update: XOR<QuestionBankUpdateWithoutDeletedByUserInput, QuestionBankUncheckedUpdateWithoutDeletedByUserInput>
    create: XOR<QuestionBankCreateWithoutDeletedByUserInput, QuestionBankUncheckedCreateWithoutDeletedByUserInput>
  }

  export type QuestionBankUpdateWithWhereUniqueWithoutDeletedByUserInput = {
    where: QuestionBankWhereUniqueInput
    data: XOR<QuestionBankUpdateWithoutDeletedByUserInput, QuestionBankUncheckedUpdateWithoutDeletedByUserInput>
  }

  export type QuestionBankUpdateManyWithWhereWithoutDeletedByUserInput = {
    where: QuestionBankScalarWhereInput
    data: XOR<QuestionBankUpdateManyMutationInput, QuestionBankUncheckedUpdateManyWithoutDeletedByUserInput>
  }

  export type TestResultUpsertWithWhereUniqueWithoutUserInput = {
    where: TestResultWhereUniqueInput
    update: XOR<TestResultUpdateWithoutUserInput, TestResultUncheckedUpdateWithoutUserInput>
    create: XOR<TestResultCreateWithoutUserInput, TestResultUncheckedCreateWithoutUserInput>
  }

  export type TestResultUpdateWithWhereUniqueWithoutUserInput = {
    where: TestResultWhereUniqueInput
    data: XOR<TestResultUpdateWithoutUserInput, TestResultUncheckedUpdateWithoutUserInput>
  }

  export type TestResultUpdateManyWithWhereWithoutUserInput = {
    where: TestResultScalarWhereInput
    data: XOR<TestResultUpdateManyMutationInput, TestResultUncheckedUpdateManyWithoutUserInput>
  }

  export type AnswerSubmissionUpsertWithWhereUniqueWithoutUserInput = {
    where: AnswerSubmissionWhereUniqueInput
    update: XOR<AnswerSubmissionUpdateWithoutUserInput, AnswerSubmissionUncheckedUpdateWithoutUserInput>
    create: XOR<AnswerSubmissionCreateWithoutUserInput, AnswerSubmissionUncheckedCreateWithoutUserInput>
  }

  export type AnswerSubmissionUpdateWithWhereUniqueWithoutUserInput = {
    where: AnswerSubmissionWhereUniqueInput
    data: XOR<AnswerSubmissionUpdateWithoutUserInput, AnswerSubmissionUncheckedUpdateWithoutUserInput>
  }

  export type AnswerSubmissionUpdateManyWithWhereWithoutUserInput = {
    where: AnswerSubmissionScalarWhereInput
    data: XOR<AnswerSubmissionUpdateManyMutationInput, AnswerSubmissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateManyAcademicTitleInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type UserUpdateWithoutAcademicTitleInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAcademicTitleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAcademicTitleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCreateManyCategoryInput = {
    id?: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonCreateManyCourseInstructorInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonUpdateWithoutCourseInstructorInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutCourseInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutCourseInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseInstructorCreateManyCourseInput = {
    id?: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseCompletionCreateManyCourseInput = {
    id?: number
    userId: number
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
  }

  export type LessonCreateManyCourseInput = {
    id?: number
    lessonTypeId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionSetCreateManyCourseInput = {
    id?: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseInstructorUpdateWithoutCourseInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutCourseInstructorUserIdNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseInstructorUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseInstructorDeletedNestedInput
    courseInstructor?: LessonUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructor?: LessonUncheckedUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCompletionUpdateWithoutCourseInput = {
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutCourseCompletionUserIdNestedInput
  }

  export type CourseCompletionUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCompletionUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type LessonUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionSetUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyDepartmentInput = {
    id?: number
    userRoleId: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type UserUpdateWithoutDepartmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentCreateManyLessonContentTypeInput = {
    id?: number
    lessonId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentUpdateWithoutLessonContentTypeInput = {
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lesson?: LessonUpdateOneRequiredWithoutLessonContentNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonContentUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonContentDeletedNestedInput
  }

  export type LessonContentUncheckedUpdateWithoutLessonContentTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUncheckedUpdateManyWithoutLessonContentTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonCreateManyLessonTypeInput = {
    id?: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonUpdateWithoutLessonTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutLessonTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutLessonTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonCreateManyParentInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateManyLessonInput = {
    id?: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonViewCreateManyLessonsInput = {
    id?: number
    userId: number
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonAttemptCreateManyLessonsInput = {
    id?: number
    userId: number
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonPrerequisiteCreateManyLessonsInput = {
    id?: number
    requiredLessonId: number
  }

  export type LessonPrerequisiteCreateManyRequiredLessonInput = {
    id?: number
    lessonId: number
  }

  export type QuestionSetCreateManyLessonInput = {
    id?: number
    courseId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonUpdateWithoutParentInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUpdateWithoutLessonInput = {
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lessonContentType?: LessonContentTypeUpdateOneRequiredWithoutLessonContentNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonContentUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonContentDeletedNestedInput
  }

  export type LessonContentUncheckedUpdateWithoutLessonInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUncheckedUpdateManyWithoutLessonInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonViewUpdateWithoutLessonsInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateOneRequiredWithoutLessonViewUserIdNestedInput
  }

  export type LessonViewUncheckedUpdateWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonViewUncheckedUpdateManyWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonAttemptUpdateWithoutLessonsInput = {
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateOneRequiredWithoutLessonAttemptUserIdNestedInput
  }

  export type LessonAttemptUncheckedUpdateWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonAttemptUncheckedUpdateManyWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonPrerequisiteUpdateWithoutLessonsInput = {
    requiredLesson?: LessonUpdateOneRequiredWithoutLessonPrerequisiteRequiredLessonIdNestedInput
  }

  export type LessonPrerequisiteUncheckedUpdateWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requiredLessonId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonPrerequisiteUncheckedUpdateManyWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requiredLessonId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonPrerequisiteUpdateWithoutRequiredLessonInput = {
    lessons?: LessonUpdateOneRequiredWithoutLessonPrerequisiteLessonIdNestedInput
  }

  export type LessonPrerequisiteUncheckedUpdateWithoutRequiredLessonInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
  }

  export type LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSetUpdateWithoutLessonInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutLessonInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutLessonInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentCreateManyOrganizationInput = {
    id?: number
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type DepartmentUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnswerSubmissionCreateManyQuestionBankInput = {
    id?: number
    userId: number
    questionSetId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type AnswerSubmissionUpdateWithoutQuestionBankInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnswerSubmissionUserNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutAnswerSubmissionNestedInput
  }

  export type AnswerSubmissionUncheckedUpdateWithoutQuestionBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionBankCreateManyQuestionLevelInput = {
    id?: number
    questionTypeId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankUpdateWithoutQuestionLevelInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutQuestionLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutQuestionLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionBankCreateManyQuestionSetInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type ScoreCriteriaCreateManyQuestionSetInput = {
    id?: number
    resultLevelId: number
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
  }

  export type TestResultCreateManyQuestionSetInput = {
    id?: number
    userId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type AnswerSubmissionCreateManyQuestionSetInput = {
    id?: number
    userId: number
    questionBankId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type QuestionBankUpdateWithoutQuestionSetInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreCriteriaUpdateWithoutQuestionSetInput = {
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resultLevel?: ResultLevelUpdateOneRequiredWithoutScoreCriteriaNestedInput
  }

  export type ScoreCriteriaUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUpdateWithoutQuestionSetInput = {
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTestResultUserNestedInput
    resultLevel?: ResultLevelUpdateOneRequiredWithoutTestResultNestedInput
  }

  export type TestResultUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnswerSubmissionUpdateWithoutQuestionSetInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAnswerSubmissionUserNestedInput
    questionBank?: QuestionBankUpdateOneRequiredWithoutAnswerSubmissionNestedInput
  }

  export type AnswerSubmissionUncheckedUpdateWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionBankId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionBankId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionBankCreateManyQuestionTypeInput = {
    id?: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankUpdateWithoutQuestionTypeInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutQuestionTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutQuestionTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreCriteriaCreateManyResultLevelInput = {
    id?: number
    questionSetId: number
    minScore: number
    maxScore: number
    description?: string | null
    updatedAt?: Date | string | null
  }

  export type TestResultCreateManyResultLevelInput = {
    id?: number
    userId: number
    questionSetId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type ScoreCriteriaUpdateWithoutResultLevelInput = {
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionSet?: QuestionSetUpdateOneRequiredWithoutScoreCriteriaNestedInput
  }

  export type ScoreCriteriaUncheckedUpdateWithoutResultLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreCriteriaUncheckedUpdateManyWithoutResultLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    minScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUpdateWithoutResultLevelInput = {
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutTestResultUserNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutTestResultNestedInput
  }

  export type TestResultUncheckedUpdateWithoutResultLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUncheckedUpdateManyWithoutResultLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionSetCreateManyTestTypeInput = {
    id?: number
    courseId: number
    lessonId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionSetUpdateWithoutTestTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutTestTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutTestTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyTitleInput = {
    id?: number
    userRoleId: number
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type UserUpdateWithoutTitleInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userRole?: UserRoleUpdateOneRequiredWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTitleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTitleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRoleId?: IntFieldUpdateOperationsInput | number
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyUserRoleInput = {
    id?: number
    titleId?: number | null
    academicTitleId?: number | null
    firstName: string
    lastName: string
    email: string
    password: string
    departmentId?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type UserUpdateWithoutUserRoleInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: TitleUpdateOneWithoutUsersNestedInput
    academicTitle?: AcademicTitleUpdateOneWithoutUsersNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organizationsCreated?: OrganizationUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationsCreated?: OrganizationUncheckedUpdateManyWithoutCreatedByUserNestedInput
    organizationsUpdated?: OrganizationUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    organizationsDeleted?: OrganizationUncheckedUpdateManyWithoutDeletedByUserNestedInput
    categoryCreated?: CategoryUncheckedUpdateManyWithoutCreatedByUserNestedInput
    categoryUpdated?: CategoryUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    categoryDeleted?: CategoryUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseCreated?: CourseUncheckedUpdateManyWithoutCreatedByUserNestedInput
    courseUpdated?: CourseUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseDeleted?: CourseUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUpdated?: CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    courseInstructorDeleted?: CourseInstructorUncheckedUpdateManyWithoutDeletedByUserNestedInput
    courseInstructorUserId?: CourseInstructorUncheckedUpdateManyWithoutUserNestedInput
    courseCompletionUserId?: CourseCompletionUncheckedUpdateManyWithoutUserNestedInput
    lessonCreated?: LessonUncheckedUpdateManyWithoutCreatedByUserNestedInput
    lessonUpdated?: LessonUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonDeleted?: LessonUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonContentUpdated?: LessonContentUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    lessonContentDeleted?: LessonContentUncheckedUpdateManyWithoutDeletedByUserNestedInput
    lessonViewUserId?: LessonViewUncheckedUpdateManyWithoutUsersNestedInput
    lessonAttemptUserId?: LessonAttemptUncheckedUpdateManyWithoutUsersNestedInput
    questionSetCreated?: QuestionSetUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionSetUpdated?: QuestionSetUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionSetDeleted?: QuestionSetUncheckedUpdateManyWithoutDeletedByUserNestedInput
    questionBankCreated?: QuestionBankUncheckedUpdateManyWithoutCreatedByUserNestedInput
    questionBankUpdated?: QuestionBankUncheckedUpdateManyWithoutUpdatedByUserNestedInput
    questionBankDeleted?: QuestionBankUncheckedUpdateManyWithoutDeletedByUserNestedInput
    testResultUser?: TestResultUncheckedUpdateManyWithoutUserNestedInput
    answerSubmissionUser?: AnswerSubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    titleId?: NullableIntFieldUpdateOperationsInput | number | null
    academicTitleId?: NullableIntFieldUpdateOperationsInput | number | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationCreateManyCreatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type OrganizationCreateManyUpdatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type OrganizationCreateManyDeletedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CategoryCreateManyCreatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CategoryCreateManyUpdatedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CategoryCreateManyDeletedByUserInput = {
    id?: number
    name: string
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseCreateManyCreatedByUserInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseCreateManyUpdatedByUserInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseCreateManyDeletedByUserInput = {
    id?: number
    categoryId: number
    name: string
    description: string
    imageUrl: string
    fee: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseInstructorCreateManyUpdatedByUserInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseInstructorCreateManyDeletedByUserInput = {
    id?: number
    courseId: number
    userId?: number | null
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseInstructorCreateManyUserInput = {
    id?: number
    courseId: number
    fullName?: string | null
    role: $Enums.Role
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type CourseCompletionCreateManyUserInput = {
    id?: number
    courseId: number
    completedAt: Date | string
    finalScore: number
    isCertified?: boolean
    certificateUrl: string
  }

  export type LessonCreateManyCreatedByUserInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonCreateManyUpdatedByUserInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonCreateManyDeletedByUserInput = {
    id?: number
    lessonTypeId: number
    courseId: number
    courseInstructorId: number
    name: string
    description?: string | null
    imageUrl?: string | null
    sortOrder: number
    parentId?: number | null
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateManyUpdatedByUserInput = {
    id?: number
    lessonId: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    deletedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonContentCreateManyDeletedByUserInput = {
    id?: number
    lessonId: number
    contentTypeId: number
    contentUrl?: string | null
    duration?: number | null
    pages?: number | null
    sortOrder: number
    isActive?: boolean
    updatedBy?: number | null
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type LessonViewCreateManyUsersInput = {
    id?: number
    lessonId: number
    completed?: boolean
    watchedTime: number
    readPages: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type LessonAttemptCreateManyUsersInput = {
    id?: number
    lessonId: number
    attemptNo: number
    completedAt?: Date | string | null
    createdAt: Date | string
  }

  export type QuestionSetCreateManyCreatedByUserInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionSetCreateManyUpdatedByUserInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionSetCreateManyDeletedByUserInput = {
    id?: number
    courseId: number
    lessonId: number
    testTypeId: number
    name: string
    description?: string | null
    passScore: number
    attemptLimit: number
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankCreateManyCreatedByUserInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    updatedBy?: number | null
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankCreateManyUpdatedByUserInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    deletedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type QuestionBankCreateManyDeletedByUserInput = {
    id?: number
    questionTypeId: number
    questionLevelId: number
    questionSetId: number
    questionText: string
    score: number
    imageUrl?: string | null
    answerData: JsonNullValueInput | InputJsonValue
    explanation?: string | null
    versioning?: string | null
    creationMethod: $Enums.CreationMethod
    sortOrder: number
    randomize?: boolean
    isActive?: boolean
    createdBy: number
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    deletedAt?: Date | string | null
  }

  export type TestResultCreateManyUserInput = {
    id?: number
    questionSetId: number
    resultLevelId: number
    rawScore: number
    normalizedScore: number
    attemptNo: number
    completedAt?: Date | string | null
  }

  export type AnswerSubmissionCreateManyUserInput = {
    id?: number
    questionSetId: number
    questionBankId: number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: string | null
    fileUrl?: string | null
    isCorrect: boolean
    submittedAt: Date | string
  }

  export type OrganizationUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutOrganizationsUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutOrganizationsDeletedNestedInput
    departments?: DepartmentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departments?: DepartmentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutOrganizationsCreatedNestedInput
    deletedByUser?: UserUpdateOneWithoutOrganizationsDeletedNestedInput
    departments?: DepartmentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departments?: DepartmentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationUpdateWithoutDeletedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutOrganizationsCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutOrganizationsUpdatedNestedInput
    departments?: DepartmentUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departments?: DepartmentUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutCategoryUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCategoryDeletedNestedInput
    categories?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutCategoryCreatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCategoryDeletedNestedInput
    categories?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryUpdateWithoutDeletedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneRequiredWithoutCategoryCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCategoryUpdatedNestedInput
    categories?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseDeletedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseUpdateWithoutDeletedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutCategoriesNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutCourseCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseUpdatedNestedInput
    courseInstructorCourseId?: CourseInstructorUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructorCourseId?: CourseInstructorUncheckedUpdateManyWithoutCourseNestedInput
    courseCompletionCourseId?: CourseCompletionUncheckedUpdateManyWithoutCourseNestedInput
    lessonCourseId?: LessonUncheckedUpdateManyWithoutCourseNestedInput
    questionSetCourseId?: QuestionSetUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    fee?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseInstructorUpdateWithoutUpdatedByUserInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutCourseInstructorCourseIdNestedInput
    user?: UserUpdateOneWithoutCourseInstructorUserIdNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseInstructorDeletedNestedInput
    courseInstructor?: LessonUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructor?: LessonUncheckedUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseInstructorUpdateWithoutDeletedByUserInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutCourseInstructorCourseIdNestedInput
    user?: UserUpdateOneWithoutCourseInstructorUserIdNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseInstructorUpdatedNestedInput
    courseInstructor?: LessonUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructor?: LessonUncheckedUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseInstructorUpdateWithoutUserInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutCourseInstructorCourseIdNestedInput
    updatedByUser?: UserUpdateOneWithoutCourseInstructorUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutCourseInstructorDeletedNestedInput
    courseInstructor?: LessonUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseInstructor?: LessonUncheckedUpdateManyWithoutCourseInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCompletionUpdateWithoutUserInput = {
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutCourseCompletionCourseIdNestedInput
  }

  export type CourseCompletionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCompletionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalScore?: IntFieldUpdateOperationsInput | number
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: StringFieldUpdateOperationsInput | string
  }

  export type LessonUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonDeletedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonUpdateWithoutDeletedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parent?: LessonUpdateOneWithoutChildrenNestedInput
    children?: LessonUpdateManyWithoutParentNestedInput
    lessonType?: LessonTypeUpdateOneRequiredWithoutLessonTypeIdNestedInput
    course?: CourseUpdateOneRequiredWithoutLessonCourseIdNestedInput
    courseInstructor?: CourseInstructorUpdateOneRequiredWithoutCourseInstructorNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutLessonCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonUpdatedNestedInput
    lessonContent?: LessonContentUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    children?: LessonUncheckedUpdateManyWithoutParentNestedInput
    lessonContent?: LessonContentUncheckedUpdateManyWithoutLessonNestedInput
    lessonViewLessonId?: LessonViewUncheckedUpdateManyWithoutLessonsNestedInput
    lessonAttemptLessonId?: LessonAttemptUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutLessonsNestedInput
    lessonPrerequisiteRequiredLessonId?: LessonPrerequisiteUncheckedUpdateManyWithoutRequiredLessonNestedInput
    questionSetLessonId?: QuestionSetUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonTypeId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    courseInstructorId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUpdateWithoutUpdatedByUserInput = {
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lesson?: LessonUpdateOneRequiredWithoutLessonContentNestedInput
    lessonContentType?: LessonContentTypeUpdateOneRequiredWithoutLessonContentNestedInput
    deletedByUser?: UserUpdateOneWithoutLessonContentDeletedNestedInput
  }

  export type LessonContentUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUpdateWithoutDeletedByUserInput = {
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lesson?: LessonUpdateOneRequiredWithoutLessonContentNestedInput
    lessonContentType?: LessonContentTypeUpdateOneRequiredWithoutLessonContentNestedInput
    updatedByUser?: UserUpdateOneWithoutLessonContentUpdatedNestedInput
  }

  export type LessonContentUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonContentUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    contentTypeId?: IntFieldUpdateOperationsInput | number
    contentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LessonViewUpdateWithoutUsersInput = {
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonUpdateOneRequiredWithoutLessonViewLessonIdNestedInput
  }

  export type LessonViewUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonViewUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    completed?: BoolFieldUpdateOperationsInput | boolean
    watchedTime?: IntFieldUpdateOperationsInput | number
    readPages?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonAttemptUpdateWithoutUsersInput = {
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonUpdateOneRequiredWithoutLessonAttemptLessonIdNestedInput
  }

  export type LessonAttemptUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonAttemptUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSetUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionSetUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionSetDeletedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionSetUpdateWithoutDeletedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutQuestionSetCourseIdNestedInput
    lesson?: LessonUpdateOneRequiredWithoutQuestionSetLessonIdNestedInput
    testType?: TestTypeUpdateOneRequiredWithoutQuestionSetNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionSetCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionSetUpdatedNestedInput
    questionBank?: QuestionBankUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionBank?: QuestionBankUncheckedUpdateManyWithoutQuestionSetNestedInput
    scoreCriteria?: ScoreCriteriaUncheckedUpdateManyWithoutQuestionSetNestedInput
    testResult?: TestResultUncheckedUpdateManyWithoutQuestionSetNestedInput
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionSetNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    lessonId?: IntFieldUpdateOperationsInput | number
    testTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    passScore?: IntFieldUpdateOperationsInput | number
    attemptLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionBankUpdateWithoutCreatedByUserInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionBankUpdateWithoutUpdatedByUserInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    deletedByUser?: UserUpdateOneWithoutQuestionBankDeletedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionBankUpdateWithoutDeletedByUserInput = {
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionType?: QuestionTypeUpdateOneRequiredWithoutQuestionBankNestedInput
    questionLevel?: QuestionLevelUpdateOneRequiredWithoutQuestionBankNestedInput
    questionSet?: QuestionSetUpdateOneRequiredWithoutQuestionBankNestedInput
    createdByUser?: UserUpdateOneRequiredWithoutQuestionBankCreatedNestedInput
    updatedByUser?: UserUpdateOneWithoutQuestionBankUpdatedNestedInput
    answerSubmission?: AnswerSubmissionUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    answerSubmission?: AnswerSubmissionUncheckedUpdateManyWithoutQuestionBankNestedInput
  }

  export type QuestionBankUncheckedUpdateManyWithoutDeletedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionTypeId?: IntFieldUpdateOperationsInput | number
    questionLevelId?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionText?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answerData?: JsonNullValueInput | InputJsonValue
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    versioning?: NullableStringFieldUpdateOperationsInput | string | null
    creationMethod?: EnumCreationMethodFieldUpdateOperationsInput | $Enums.CreationMethod
    sortOrder?: IntFieldUpdateOperationsInput | number
    randomize?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUpdateWithoutUserInput = {
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    questionSet?: QuestionSetUpdateOneRequiredWithoutTestResultNestedInput
    resultLevel?: ResultLevelUpdateOneRequiredWithoutTestResultNestedInput
  }

  export type TestResultUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TestResultUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    resultLevelId?: IntFieldUpdateOperationsInput | number
    rawScore?: IntFieldUpdateOperationsInput | number
    normalizedScore?: IntFieldUpdateOperationsInput | number
    attemptNo?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnswerSubmissionUpdateWithoutUserInput = {
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionSet?: QuestionSetUpdateOneRequiredWithoutAnswerSubmissionNestedInput
    questionBank?: QuestionBankUpdateOneRequiredWithoutAnswerSubmissionNestedInput
  }

  export type AnswerSubmissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionBankId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerSubmissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionSetId?: IntFieldUpdateOperationsInput | number
    questionBankId?: IntFieldUpdateOperationsInput | number
    selectedChoice?: NullableJsonNullValueInput | InputJsonValue
    filledText?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}